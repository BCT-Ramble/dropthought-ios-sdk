{"version":3,"sources":["useOpenEnded.ts"],"names":["useOpenEnded","feedback","index","feedbackText","answers","toString","text","setText","isFocus","setIsFocus","hasEdited","setHasEdited","length","keyboardDidHideListener","Keyboard","addListener","onEndEditingHandler","remove","onChangeTextHandler","textInput","metadataTypeKeyboard","metadataType","QuestionMetaDataType","Email","Phone","Number","Date","metadataTypeAutoCapitalize","Name","onFocus","onBlur"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AAMA,MAAMA,YAAY,GAAG,CAACC,QAAD,EAAqBC,KAAa,GAAG,CAArC,KAA2C;AAAA;;AAC9D;AACA,QAAMC,YAAY,GAAGF,QAAQ,wBAAGA,QAAQ,CAACG,OAAZ,sDAAG,kBAAmBF,KAAnB,EAA0BG,QAA1B,EAAH,GAA0C,EAAvE;AACA,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkB,qBAASJ,YAAT,CAAxB;AACA,QAAM,CAACK,OAAD,EAAUC,UAAV,IAAwB,qBAAS,KAAT,CAA9B;AACA,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4B,qBAASR,YAAY,CAACS,MAAb,GAAsB,CAA/B,CAAlC;AAEA,wBAAU,MAAM;AACd,UAAMC,uBAAuB,GAAGC,sBAASC,WAAT,CAC9B,iBAD8B,EAE9BC,mBAF8B,CAAhC;;AAIA,WAAO,MAAM;AACXH,MAAAA,uBAAuB,CAACI,MAAxB;AACD,KAFD;AAGD,GARD,EAQG,EARH;;AAUA,QAAMD,mBAAmB,GAAG,MAAM;AAChCL,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACD,GAFD;;AAIA,QAAMO,mBAAmB,GAAIC,SAAD,IAAuB;AACjD,QAAIX,OAAJ,EAAa;AACXD,MAAAA,OAAO,CAACY,SAAD,CAAP;AACD;AACF,GAJD;;AAMA,QAAMC,oBAAoB,GACxBC,YAD2B,IAES;AACpC,YAAQA,YAAR;AACE,WAAKC,2BAAqBC,KAA1B;AACE,eAAO,SAAP;;AACF,WAAKD,2BAAqBE,KAA1B;AACE,eAAO,WAAP;;AACF,WAAKF,2BAAqBG,MAA1B;AACE,eAAO,SAAP;;AACF,WAAKH,2BAAqBI,IAA1B;AACA;AACE,eAAO,SAAP;AATJ;AAWD,GAdD;;AAgBA,QAAMC,0BAA0B,GAC9BN,YADiC,IAE9B;AACH,YAAQA,YAAR;AACE,WAAKC,2BAAqBM,IAA1B;AACE,eAAO,OAAP;;AACF,WAAKN,2BAAqBC,KAA1B;AACA,WAAKD,2BAAqBE,KAA1B;AACA,WAAKF,2BAAqBI,IAA1B;AACA,WAAKJ,2BAAqBG,MAA1B;AACE,eAAO,MAAP;;AACF;AACE,eAAO,WAAP;AATJ;AAWD,GAdD;;AAeA,SAAO;AACLL,IAAAA,oBADK;AAELO,IAAAA,0BAFK;AAILrB,IAAAA,IAJK;AAKLE,IAAAA,OALK;AAMLE,IAAAA,SANK;AAQLQ,IAAAA,mBARK;AASLF,IAAAA,mBATK;AAULa,IAAAA,OAAO,EAAE,MAAMpB,UAAU,CAAC,IAAD,CAVpB;AAWLqB,IAAAA,MAAM,EAAE,MAAMrB,UAAU,CAAC,KAAD;AAXnB,GAAP;AAaD,CAvED;;eAyEeT,Y","sourcesContent":["import { useState, useEffect } from 'react';\nimport { Keyboard, KeyboardTypeOptions } from 'react-native';\nimport { QuestionMetaDataType } from '../utils/data';\nimport type {\n  Feedback,\n  QuestionMetaDataType as TypeQuestionMetaDataType,\n} from '../data';\n\nconst useOpenEnded = (feedback: Feedback, index: number = 0) => {\n  //@ts-ignore\n  const feedbackText = feedback ? feedback.answers?.[index].toString() : '';\n  const [text, setText] = useState(feedbackText);\n  const [isFocus, setIsFocus] = useState(false);\n  const [hasEdited, setHasEdited] = useState(feedbackText.length > 0);\n\n  useEffect(() => {\n    const keyboardDidHideListener = Keyboard.addListener(\n      'keyboardDidHide',\n      onEndEditingHandler\n    );\n    return () => {\n      keyboardDidHideListener.remove();\n    };\n  }, []);\n\n  const onEndEditingHandler = () => {\n    setHasEdited(true);\n  };\n\n  const onChangeTextHandler = (textInput: string) => {\n    if (isFocus) {\n      setText(textInput);\n    }\n  };\n\n  const metadataTypeKeyboard = (\n    metadataType: TypeQuestionMetaDataType | undefined\n  ): KeyboardTypeOptions | undefined => {\n    switch (metadataType) {\n      case QuestionMetaDataType.Email:\n        return 'default';\n      case QuestionMetaDataType.Phone:\n        return 'phone-pad';\n      case QuestionMetaDataType.Number:\n        return 'numeric';\n      case QuestionMetaDataType.Date:\n      default:\n        return 'default';\n    }\n  };\n\n  const metadataTypeAutoCapitalize = (\n    metadataType: TypeQuestionMetaDataType | undefined\n  ) => {\n    switch (metadataType) {\n      case QuestionMetaDataType.Name:\n        return 'words';\n      case QuestionMetaDataType.Email:\n      case QuestionMetaDataType.Phone:\n      case QuestionMetaDataType.Date:\n      case QuestionMetaDataType.Number:\n        return 'none';\n      default:\n        return 'sentences';\n    }\n  };\n  return {\n    metadataTypeKeyboard,\n    metadataTypeAutoCapitalize,\n\n    text,\n    isFocus,\n    hasEdited,\n\n    onChangeTextHandler,\n    onEndEditingHandler,\n    onFocus: () => setIsFocus(true),\n    onBlur: () => setIsFocus(false),\n  };\n};\n\nexport default useOpenEnded;\n"]}