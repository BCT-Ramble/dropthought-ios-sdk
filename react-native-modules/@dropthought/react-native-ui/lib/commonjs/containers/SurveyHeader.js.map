{"version":3,"sources":["SurveyHeader.tsx"],"names":["SurveyHeader","props","rtl","i18n","dir","insets","survey","pageIndex","backgroundColor","question","onClose","fontColor","themeOption","customFontColor","color","isOption6Smiley","THEME_OPTION","OPTION6","type","subType","undefined","Colors","white","containerStyle","styles","container","paddingTop","top","GlobalStyle","flexRowReverse","iconStyle","tintColor","surveyProperty","hexCode","titleStyle","title","headerRowContainer","closeButton","require","surveyName","pageOrder","length","StyleSheet","create","width","paddingVertical","paddingHorizontal","flexDirection","alignItems","height","marginTop","justifyContent","fontSize","fontWeight","marginLeft","marginRight","textAlign","flexGrow","React","memo"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Image, StyleSheet, Text, TouchableOpacity, View } from 'react-native';\nimport { GlobalStyle, Colors } from '../styles';\nimport i18n from '../translation';\nimport type { Survey, Question } from '../data';\nimport ProgressBar from '../components/ProgressBar';\nimport { useTheme, THEME_OPTION } from '../contexts/theme';\n// @ts-ignore\nimport { useSafeAreaInsets } from 'react-native-safe-area-context';\n\ntype Props = {\n  survey: Survey;\n  pageIndex: number;\n  question?: Question;\n  // To apply backgroundColor for those smiley question which has full backgroundColor\n  backgroundColor?: string;\n  onClose: () => void;\n};\n\nconst SurveyHeader = (props: Props) => {\n  const rtl = i18n.dir() === 'rtl';\n  const insets = useSafeAreaInsets();\n  const { survey, pageIndex, backgroundColor, question, onClose } = props;\n\n  const { fontColor, themeOption, customFontColor } = useTheme();\n\n  let color = fontColor;\n  const isOption6Smiley =\n    themeOption === THEME_OPTION.OPTION6 &&\n    question?.type === 'rating' &&\n    question?.subType === 'smiley';\n  if (\n    (customFontColor === undefined || customFontColor === '') &&\n    isOption6Smiley\n  ) {\n    color = Colors.white;\n  }\n\n  const containerStyle = [\n    styles.container,\n    { paddingTop: insets.top },\n    rtl && GlobalStyle.flexRowReverse,\n    {\n      backgroundColor,\n    },\n  ];\n\n  const iconStyle = { tintColor: survey.surveyProperty.hexCode };\n  const titleStyle = [styles.title, { color }];\n\n  return (\n    <View style={containerStyle}>\n      <View style={styles.headerRowContainer}>\n        <TouchableOpacity style={styles.closeButton} onPress={onClose}>\n          <Image\n            style={iconStyle}\n            source={require('../assets/icClose24Px.png')}\n          />\n        </TouchableOpacity>\n        <Text style={titleStyle} numberOfLines={1}>\n          {survey.surveyName}\n        </Text>\n      </View>\n      <ProgressBar\n        value={pageIndex + 1}\n        maxValue={survey.pageOrder.length}\n        themeColor={survey.surveyProperty.hexCode}\n        color={color}\n        rtl={rtl}\n      />\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    width: '100%',\n    paddingVertical: 15,\n    paddingHorizontal: 30,\n  },\n  headerRowContainer: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    height: 25,\n    marginTop: 17,\n  },\n  closeButton: {\n    width: 25,\n    height: 25,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  title: {\n    fontSize: 17,\n    fontWeight: '600',\n    marginLeft: 10,\n    marginRight: 30,\n    textAlign: 'center',\n    flexGrow: 1,\n  },\n});\n\nexport default React.memo(SurveyHeader);\n"]}