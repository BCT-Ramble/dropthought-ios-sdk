{"version":3,"sources":["QuestionContainer.tsx"],"names":["TempComponent","question","forgot","GlobalStyle","questionContainer","QuestionContainer","props","onFeedback","propsOnFeedback","validationStarted","themeOption","QuestionComponent","feedback","questionId","feedbackDispatch","onFeedbackHandler","React","useCallback","updatedFeedback","updateFeedback","type","SingleChoiceQuestion","MultiChoiceQuestion","subType","SmileyRatingQuestionOption1","SmileyRatingQuestionOption2","SmileyRatingQuestionOption3","SmileyRatingQuestionOption4","SmileyRatingQuestionOption6","SliderRatingQuestion","OpenQuestion","RankingQuestion"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AAEA;;AAKA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;AAKA,MAAMA,aAAa,GAAG,CAAC;AACrBC,EAAAA,QADqB;AAErBC,EAAAA;AAFqB,CAAD,KAMhB;AACJ,sBACE,oBAAC,iBAAD;AAAM,IAAA,KAAK,EAAEC,gBAAYC;AAAzB,kBACE,oBAAC,uBAAD;AAAgB,IAAA,QAAQ,EAAEH,QAA1B;AAAoC,IAAA,MAAM,EAAEC;AAA5C,IADF,CADF;AAKD,CAZD;;AA4BA,MAAMG,iBAAiB,GAAIC,KAAD,IAAkB;AAC1C,QAAM;AAAEC,IAAAA,UAAU,EAAEC,eAAd;AAA+BC,IAAAA,iBAA/B;AAAkDC,IAAAA;AAAlD,MAAkEJ,KAAxE;AAEA,MAAIK,iBAAiB,GAAGX,aAAxB,CAH0C,CAK1C;;AACA,QAAMY,QAAQ,GAAG,gCAAiBN,KAAK,CAACL,QAAN,CAAeY,UAAhC,CAAjB;AACA,QAAMC,gBAAgB,GAAG,oCAAzB;AACA,QAAMC,iBAAiB,GAAGC,KAAK,CAACC,WAAN,CACvBC,eAAD,IAAqB;AACnB,kCAAeJ,gBAAf,EAAiCI,eAAjC,EADmB,CAEnB;;AACAV,IAAAA,eAAe,IAAIA,eAAe,CAACW,wBAAD,CAAlC;AACD,GALuB,EAMxB,CAACL,gBAAD,EAAmBN,eAAnB,CANwB,CAA1B,CAR0C,CAiB1C;;AACA,QAAMN,MAAM,GACVO,iBAAiB,IAAI,CAAC,sCAA2BH,KAAK,CAACL,QAAjC,EAA2CW,QAA3C,CADxB;;AAGA,UAAQN,KAAK,CAACL,QAAN,CAAemB,IAAvB;AACE,SAAK,cAAL;AACE;AACAT,MAAAA,iBAAiB,GAAGU,6BAApB;AACA;;AACF,SAAK,aAAL;AACE;AACAV,MAAAA,iBAAiB,GAAGW,4BAApB;AACA;;AACF,SAAK,QAAL;AACE,UAAIhB,KAAK,CAACL,QAAN,CAAesB,OAAf,KAA2B,QAA/B,EAAyC;AACvC,gBAAQb,WAAR;AACE,eAAK,SAAL;AACE;AACAC,YAAAA,iBAAiB,GAAGa,mCAApB;AACA;;AACF,eAAK,SAAL;AACE;AACAb,YAAAA,iBAAiB,GAAGc,oCAApB;AACA;;AACF,eAAK,SAAL;AACE;AACAd,YAAAA,iBAAiB,GAAGe,oCAApB;AACA;;AACF,eAAK,SAAL;AACE;AACAf,YAAAA,iBAAiB,GAAGgB,oCAApB;AACA;;AACF,eAAK,SAAL;AACE;AACAhB,YAAAA,iBAAiB,GAAGiB,oCAApB;AACA;;AACF;AACE;AACAjB,YAAAA,iBAAiB,GAAGa,mCAApB;AAvBJ;AAyBD,OA1BD,MA0BO;AACL;AACAb,QAAAA,iBAAiB,GAAGkB,6BAApB;AACD;;AACD;;AACF,SAAK,KAAL;AACE;AACAlB,MAAAA,iBAAiB,GAAGkB,6BAApB;AACA;;AACF,SAAK,MAAL;AACE;AACAlB,MAAAA,iBAAiB,GAAGmB,qBAApB;AACA;;AACF,SAAK,SAAL;AACE;AACAnB,MAAAA,iBAAiB,GAAGoB,wBAApB;AACA;;AACF;AACEpB,MAAAA,iBAAiB,GAAGX,aAApB;AAtDJ;;AAyDA,sBACE,oBAAC,iBAAD,eACMM,KADN;AAEE;AACA,IAAA,QAAQ,EAAEM,QAHZ;AAIE,IAAA,UAAU,EAAEG,iBAJd;AAKE,IAAA,MAAM,EAAEb;AALV,KADF;AASD,CAvFD;;eAyFeG,iB","sourcesContent":["import * as React from 'react';\nimport { View } from 'react-native';\nimport { mandatoryQuestionValidator } from '../utils/data';\n\nimport {\n  useFeedbackByQid,\n  useFeedbackDispatch,\n  updateFeedback,\n} from '../contexts/feedback';\nimport SmileyRatingQuestionOption1 from '../components/SmileyRatingQuestionOption1';\nimport SmileyRatingQuestionOption2 from '../components/SmileyRatingQuestionOption2';\nimport SmileyRatingQuestionOption3 from '../components/SmileyRatingQuestionOption3';\nimport SmileyRatingQuestionOption4 from '../components/SmileyRatingQuestionOption4';\nimport SmileyRatingQuestionOption6 from '../components/SmileyRatingQuestionOption6';\nimport RankingQuestion from '../components/RankingQuestion';\nimport SingleChoiceQuestion from '../components/SingleChoiceQuestion';\nimport MultiChoiceQuestion from '../components/MultiChoiceQuestion';\nimport SliderRatingQuestion from '../components/SliderRatingQuestion';\nimport OpenQuestion from '../components/OpenQuestion';\nimport MandatoryTitle from '../components/MandatoryTitle';\nimport GlobalStyle from '../styles';\n\nimport type { Question, Feedback, Survey } from '../data';\nimport type { THEME_OPTION } from '../contexts/theme';\n\nconst TempComponent = ({\n  question,\n  forgot,\n}: {\n  question: Question;\n  forgot: boolean;\n}) => {\n  return (\n    <View style={GlobalStyle.questionContainer}>\n      <MandatoryTitle question={question} forgot={forgot} />\n    </View>\n  );\n};\n\ntype Props = {\n  anonymous: boolean;\n  question: Question;\n  validationStarted: boolean;\n  themeColor: string;\n  onClose: () => void;\n  onPrevPage: () => void;\n  onNextPage: () => void;\n  onFeedback?: (feedback: Feedback) => void;\n  survey: Survey;\n  pageIndex: number;\n  themeOption: THEME_OPTION;\n};\n\nconst QuestionContainer = (props: Props) => {\n  const { onFeedback: propsOnFeedback, validationStarted, themeOption } = props;\n\n  let QuestionComponent = TempComponent;\n\n  // get/update feedback to context\n  const feedback = useFeedbackByQid(props.question.questionId);\n  const feedbackDispatch = useFeedbackDispatch();\n  const onFeedbackHandler = React.useCallback(\n    (updatedFeedback) => {\n      updateFeedback(feedbackDispatch, updatedFeedback);\n      // @ts-ignore\n      propsOnFeedback && propsOnFeedback(updateFeedback);\n    },\n    [feedbackDispatch, propsOnFeedback]\n  );\n\n  // whether to display the forgot warning message\n  const forgot =\n    validationStarted && !mandatoryQuestionValidator(props.question, feedback);\n\n  switch (props.question.type) {\n    case 'singleChoice':\n      // @ts-ignore\n      QuestionComponent = SingleChoiceQuestion;\n      break;\n    case 'multiChoice':\n      // @ts-ignore\n      QuestionComponent = MultiChoiceQuestion;\n      break;\n    case 'rating':\n      if (props.question.subType === 'smiley') {\n        switch (themeOption) {\n          case 'option1':\n            // @ts-ignore\n            QuestionComponent = SmileyRatingQuestionOption1;\n            break;\n          case 'option2':\n            // @ts-ignore\n            QuestionComponent = SmileyRatingQuestionOption2;\n            break;\n          case 'option3':\n            // @ts-ignore\n            QuestionComponent = SmileyRatingQuestionOption3;\n            break;\n          case 'option4':\n            // @ts-ignore\n            QuestionComponent = SmileyRatingQuestionOption4;\n            break;\n          case 'option6':\n            // @ts-ignore\n            QuestionComponent = SmileyRatingQuestionOption6;\n            break;\n          default:\n            // @ts-ignore\n            QuestionComponent = SmileyRatingQuestionOption1;\n        }\n      } else {\n        // @ts-ignore\n        QuestionComponent = SliderRatingQuestion;\n      }\n      break;\n    case 'nps':\n      // @ts-ignore\n      QuestionComponent = SliderRatingQuestion;\n      break;\n    case 'open':\n      // @ts-ignore\n      QuestionComponent = OpenQuestion;\n      break;\n    case 'ranking':\n      // @ts-ignore\n      QuestionComponent = RankingQuestion;\n      break;\n    default:\n      QuestionComponent = TempComponent;\n  }\n\n  return (\n    <QuestionComponent\n      {...props}\n      // @ts-ignore\n      feedback={feedback}\n      onFeedback={onFeedbackHandler}\n      forgot={forgot}\n    />\n  );\n};\n\nexport default QuestionContainer;\n"]}