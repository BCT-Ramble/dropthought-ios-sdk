{"version":3,"sources":["ClassicSurveyFooter.tsx"],"names":["DummyButton","width","ClassicSurveyFooter","props","dimensionWidthType","rtl","i18n","dir","survey","pageIndex","onPrevPage","onNextPage","lastPage","pageOrder","length","LeftButtonComponent","Button","themeColor","surveyProperty","hexCode","btnWidth","DimensionWidthType","phone","submitDisabled","setSubmitDisabled","React","useState","styles","container","GlobalStyle","flexRowReverse","t","leftBtnContainer","setTimeout","rightBtnContainer","StyleSheet","create","flex","row","justifyContent","marginVertical","memo"],"mappings":";;;;;;;AASA;;AACA;;AAEA;;AAIA;;AACA;;AACA;;;;;;;;AAlBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAaA,MAAMA,WAAW,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,kBAClB,oBAAC,iBAAD;AAAM,EAAA,KAAK,EAAE;AAAEA,IAAAA;AAAF;AAAb,EADF;;AAWA,MAAMC,mBAAmB,GAAIC,KAAD,IAAkB;AAC5C,QAAMC,kBAAkB,GAAG,iDAA3B;AACA,QAAMC,GAAG,GAAGC,qBAAKC,GAAL,OAAe,KAA3B;AACA,QAAM;AAAEC,IAAAA,MAAF;AAAUC,IAAAA,SAAS,GAAG,CAAtB;AAAyBC,IAAAA,UAAzB;AAAqCC,IAAAA;AAArC,MAAoDR,KAA1D;AAEA,QAAMS,QAAQ,GAAGH,SAAS,KAAKD,MAAM,CAACK,SAAP,CAAiBC,MAAjB,GAA0B,CAAzD,CAL4C,CAO5C;;AACA,MAAIC,mBAAmB,GAAGC,eAA1B;;AACA,MAAI,CAACP,SAAD,IAAcA,SAAS,IAAI,CAA/B,EAAkC;AAChC;AACAM,IAAAA,mBAAmB,GAAGf,WAAtB;AACD;;AAED,QAAMiB,UAAU,GAAGd,KAAK,CAACK,MAAN,CAAaU,cAAb,CAA4BC,OAA/C;AACA,QAAMC,QAAQ,GAAGhB,kBAAkB,KAAKiB,wCAAmBC,KAA1C,GAAkD,EAAlD,GAAuD,GAAxE;AAEA,QAAM,CAACC,cAAD,EAAiBC,iBAAjB,IAAsCC,KAAK,CAACC,QAAN,CAAe,KAAf,CAA5C;AAEA,sBACE,oBAAC,iBAAD;AAAM,IAAA,KAAK,EAAE,CAACC,MAAM,CAACC,SAAR,EAAmBvB,GAAG,IAAIwB,oBAAYC,cAAtC;AAAb,kBACE,oBAAC,mBAAD;AACE,IAAA,KAAK,EAAEV,QADT;AAEE,IAAA,KAAK,EAAEd,qBAAKyB,CAAL,CAAO,oBAAP,CAFT;AAGE,IAAA,KAAK,EAAEd,UAHT;AAIE,IAAA,OAAO,EAAEP,UAJX,CAKE;AALF;AAME,IAAA,cAAc,EAAEiB,MAAM,CAACK;AANzB,IADF,EASGpB,QAAQ,gBACP,oBAAC,eAAD;AACE,IAAA,QAAQ,EAAEW,cADZ;AAEE,IAAA,KAAK,EAAEH,QAFT;AAGE,IAAA,KAAK,EAAEd,qBAAKyB,CAAL,CAAO,sBAAP,CAHT;AAIE,IAAA,KAAK,EAAEd,UAJT;AAKE,IAAA,OAAO,EAAE,MAAM;AACbO,MAAAA,iBAAiB,CAAC,IAAD,CAAjB;AACAS,MAAAA,UAAU,CAAC,MAAMT,iBAAiB,CAAC,KAAD,CAAxB,EAAiC,IAAjC,CAAV;AACAb,MAAAA,UAAU;AACX,KATH,CAUE;AAVF;AAWE,IAAA,cAAc,EAAEgB,MAAM,CAACO;AAXzB,IADO,gBAeP,oBAAC,eAAD;AACE,IAAA,KAAK,EAAEd,QADT;AAEE,IAAA,KAAK,EAAEd,qBAAKyB,CAAL,CAAO,oBAAP,CAFT;AAGE,IAAA,KAAK,EAAEd,UAHT;AAIE,IAAA,OAAO,EAAEN,UAJX,CAKE;AALF;AAME,IAAA,cAAc,EAAEgB,MAAM,CAACO;AANzB,IAxBJ,CADF;AAoCD,CAvDD;;AAyDA,MAAMP,MAAM,GAAGQ,wBAAWC,MAAX,CAAkB;AAC/BR,EAAAA,SAAS,EAAE;AACTS,IAAAA,IAAI,EAAE,CADG;AAET,OAAGR,oBAAYS,GAFN;AAGTC,IAAAA,cAAc,EAAE,eAHP;AAITC,IAAAA,cAAc,EAAE;AAJP;AADoB,CAAlB,CAAf;;4BASef,KAAK,CAACgB,IAAN,CAAWvC,mBAAX,C","sourcesContent":["/**\n * @description a extension UI/UX component of SurveyScreenLayout\n * it displays three buttons:\n *  - Back, displayed when page is > 0\n *  - Next, displayed when page is not end\n *  - Submit, displayed when page is the last page\n * When \"Back\" is pressed, call props.onPrevPage\n * When \"Next\" or \"Submit\" is pressed, call props.onNextPage\n */\nimport * as React from 'react';\nimport { StyleSheet, View } from 'react-native';\n\nimport {\n  DimensionWidthType,\n  useDimensionWidthType,\n} from '../hooks/useWindowDimensions';\nimport Button from '../components/Button';\nimport { GlobalStyle } from '../styles';\nimport i18n from '../translation';\nimport type { Survey } from '../data';\n\nconst DummyButton = ({ width }: { width: number }) => (\n  <View style={{ width }} />\n);\n\ntype Props = {\n  survey: Survey;\n  pageIndex: number;\n  onPrevPage: () => void;\n  onNextPage: () => void;\n};\n\nconst ClassicSurveyFooter = (props: Props) => {\n  const dimensionWidthType = useDimensionWidthType();\n  const rtl = i18n.dir() === 'rtl';\n  const { survey, pageIndex = 0, onPrevPage, onNextPage } = props;\n\n  const lastPage = pageIndex === survey.pageOrder.length - 1;\n\n  // why use a dummy button here? we use 'space-between' to layout the buttons\n  let LeftButtonComponent = Button;\n  if (!pageIndex || pageIndex <= 0) {\n    // @ts-ignore\n    LeftButtonComponent = DummyButton;\n  }\n\n  const themeColor = props.survey.surveyProperty.hexCode;\n  const btnWidth = dimensionWidthType === DimensionWidthType.phone ? 76 : 100;\n\n  const [submitDisabled, setSubmitDisabled] = React.useState(false);\n\n  return (\n    <View style={[styles.container, rtl && GlobalStyle.flexRowReverse]}>\n      <LeftButtonComponent\n        width={btnWidth}\n        title={i18n.t('survey:survey-back')}\n        color={themeColor}\n        onPress={onPrevPage}\n        // @ts-ignore\n        containerStyle={styles.leftBtnContainer}\n      />\n      {lastPage ? (\n        <Button\n          disabled={submitDisabled}\n          width={btnWidth}\n          title={i18n.t('survey:survey-submit')}\n          color={themeColor}\n          onPress={() => {\n            setSubmitDisabled(true);\n            setTimeout(() => setSubmitDisabled(false), 1000);\n            onNextPage();\n          }}\n          // @ts-ignore\n          containerStyle={styles.rightBtnContainer}\n        />\n      ) : (\n        <Button\n          width={btnWidth}\n          title={i18n.t('survey:survey-next')}\n          color={themeColor}\n          onPress={onNextPage}\n          // @ts-ignore\n          containerStyle={styles.rightBtnContainer}\n        />\n      )}\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    ...GlobalStyle.row,\n    justifyContent: 'space-between',\n    marginVertical: 30,\n  },\n});\n\nexport default React.memo(ClassicSurveyFooter);\n"]}