{"version":3,"sources":["ClassicQuestionContainer.tsx"],"names":["TempComponent","question","forgot","GlobalStyle","questionContainer","ClassicQuestionContainer","props","onFeedback","propsOnFeedback","validationStarted","QuestionComponent","feedback","questionId","feedbackDispatch","onFeedbackHandler","React","useCallback","updatedFeedback","updateFeedback","type","ClassicSingleChoiceQuestion","ClassicMultiChoiceQuestion","subType","ClassicSmileyRatingQuestion","ClassicSliderRatingQuestion","ClassicOpenQuestion"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AAEA;;AAKA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;AAGA,MAAMA,aAAa,GAAG,CAAC;AACrBC,EAAAA,QADqB;AAErBC,EAAAA;AAFqB,CAAD,KAMhB;AACJ,sBACE,oBAAC,iBAAD;AAAM,IAAA,KAAK,EAAEC,gBAAYC;AAAzB,kBACE,oBAAC,8BAAD;AAAuB,IAAA,QAAQ,EAAEH,QAAjC;AAA2C,IAAA,MAAM,EAAEC;AAAnD,IADF,CADF;AAKD,CAZD;;AAsBA,MAAMG,wBAAwB,GAAIC,KAAD,IAAkB;AACjD,QAAM;AAAEC,IAAAA,UAAU,EAAEC,eAAd;AAA+BC,IAAAA;AAA/B,MAAqDH,KAA3D;AAEA,MAAII,iBAAiB,GAAGV,aAAxB,CAHiD,CAKjD;;AACA,QAAMW,QAAQ,GAAG,gCAAiBL,KAAK,CAACL,QAAN,CAAeW,UAAhC,CAAjB;AACA,QAAMC,gBAAgB,GAAG,oCAAzB;AACA,QAAMC,iBAAiB,GAAGC,KAAK,CAACC,WAAN,CACvBC,eAAD,IAAqB;AACnB,kCAAeJ,gBAAf,EAAiCI,eAAjC,EADmB,CAEnB;;AACAT,IAAAA,eAAe,IAAIA,eAAe,CAACU,wBAAD,CAAlC;AACD,GALuB,EAMxB,CAACL,gBAAD,EAAmBL,eAAnB,CANwB,CAA1B,CARiD,CAiBjD;;AACA,QAAMN,MAAM,GACVO,iBAAiB,IAAI,CAAC,sCAA2BH,KAAK,CAACL,QAAjC,EAA2CU,QAA3C,CADxB;;AAGA,UAAQL,KAAK,CAACL,QAAN,CAAekB,IAAvB;AACE,SAAK,cAAL;AACE;AACAT,MAAAA,iBAAiB,GAAGU,oCAApB;AACA;;AACF,SAAK,aAAL;AACE;AACAV,MAAAA,iBAAiB,GAAGW,mCAApB;AACA;;AACF,SAAK,QAAL;AACE,UAAIf,KAAK,CAACL,QAAN,CAAeqB,OAAf,KAA2B,QAA/B,EAAyC;AACvC;AACAZ,QAAAA,iBAAiB,GAAGa,oCAApB;AACD,OAHD,MAGO;AACL;AACAb,QAAAA,iBAAiB,GAAGc,oCAApB;AACD;;AACD;;AACF,SAAK,KAAL;AACE;AACAd,MAAAA,iBAAiB,GAAGc,oCAApB;AACA;;AACF,SAAK,MAAL;AACE;AACAd,MAAAA,iBAAiB,GAAGe,4BAApB;AACA;;AACF;AACEf,MAAAA,iBAAiB,GAAGV,aAApB;AA3BJ;;AA8BA,sBACE,oBAAC,iBAAD,eACMM,KADN;AAEE;AACA,IAAA,QAAQ,EAAEK,QAHZ;AAIE,IAAA,UAAU,EAAEG,iBAJd;AAKE,IAAA,MAAM,EAAEZ;AALV,KADF;AASD,CA5DD;;eA8DeG,wB","sourcesContent":["import * as React from 'react';\nimport { View } from 'react-native';\nimport { mandatoryQuestionValidator } from '../utils/data';\n\nimport {\n  useFeedbackByQid,\n  useFeedbackDispatch,\n  updateFeedback,\n} from '../contexts/feedback';\nimport ClassicSingleChoiceQuestion from '../components/ClassicSingleChoiceQuestion';\nimport ClassicMultiChoiceQuestion from '../components/ClassicMultiChoiceQuestion';\nimport ClassicSmileyRatingQuestion from '../components/ClassicSmileyRatingQuestion';\nimport ClassicSliderRatingQuestion from '../components/ClassicSliderRatingQuestion';\nimport ClassicOpenQuestion from '../components/ClassicOpenQuestion';\nimport ClassicMandatoryTitle from '../components/ClassicMandatoryTitle';\nimport GlobalStyle from '../styles';\nimport type { Question, Feedback } from '../data';\n\nconst TempComponent = ({\n  question,\n  forgot,\n}: {\n  question: Question;\n  forgot: boolean;\n}) => {\n  return (\n    <View style={GlobalStyle.questionContainer}>\n      <ClassicMandatoryTitle question={question} forgot={forgot} />\n    </View>\n  );\n};\n\ntype Props = {\n  anonymous: boolean;\n  question: Question;\n  validationStarted: boolean;\n  themeColor: string;\n  onFeedback?: (feedback: Feedback) => void;\n};\n\nconst ClassicQuestionContainer = (props: Props) => {\n  const { onFeedback: propsOnFeedback, validationStarted } = props;\n\n  let QuestionComponent = TempComponent;\n\n  // get/update feedback to context\n  const feedback = useFeedbackByQid(props.question.questionId);\n  const feedbackDispatch = useFeedbackDispatch();\n  const onFeedbackHandler = React.useCallback(\n    (updatedFeedback) => {\n      updateFeedback(feedbackDispatch, updatedFeedback);\n      // @ts-ignore\n      propsOnFeedback && propsOnFeedback(updateFeedback);\n    },\n    [feedbackDispatch, propsOnFeedback]\n  );\n\n  // whether to display the forgot warning message\n  const forgot =\n    validationStarted && !mandatoryQuestionValidator(props.question, feedback);\n\n  switch (props.question.type) {\n    case 'singleChoice':\n      // @ts-ignore\n      QuestionComponent = ClassicSingleChoiceQuestion;\n      break;\n    case 'multiChoice':\n      // @ts-ignore\n      QuestionComponent = ClassicMultiChoiceQuestion;\n      break;\n    case 'rating':\n      if (props.question.subType === 'smiley') {\n        // @ts-ignore\n        QuestionComponent = ClassicSmileyRatingQuestion;\n      } else {\n        // @ts-ignore\n        QuestionComponent = ClassicSliderRatingQuestion;\n      }\n      break;\n    case 'nps':\n      // @ts-ignore\n      QuestionComponent = ClassicSliderRatingQuestion;\n      break;\n    case 'open':\n      // @ts-ignore\n      QuestionComponent = ClassicOpenQuestion;\n      break;\n    default:\n      QuestionComponent = TempComponent;\n  }\n\n  return (\n    <QuestionComponent\n      {...props}\n      // @ts-ignore\n      feedback={feedback}\n      onFeedback={onFeedbackHandler}\n      forgot={forgot}\n    />\n  );\n};\n\nexport default ClassicQuestionContainer;\n"]}