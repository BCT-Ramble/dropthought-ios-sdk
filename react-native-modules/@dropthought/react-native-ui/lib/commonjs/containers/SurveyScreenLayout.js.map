{"version":3,"sources":["SurveyScreenLayout.tsx"],"names":["SurveyProgressBarPosition","FixedBottom","BelowBody","ScrollView","Platform","OS","KeyboardAvoidingScrollView","RNScrollView","firstInvalidQuestionId","page","feedbackState","invalidQuestionId","question","questions","feedback","feedbacksMap","questionId","mandatory","undefined","optional","getFeedbacks","answeredQuestionIds","map","qid","SurveyScreenLayout","pageIndex","survey","onClose","onPrevPage","onNextPage","onSubmit","onUpload","isUploading","SurveyPageIndicator","DefaultSurveyPageIndicator","SurveyProgressBar","DefaultSurveyProgressBar","surveyProgressBarPosition","preview","hexCode","themeOption","backgroundColor","scrollViewRef","React","useRef","scrollEnabled","setScrollEnabled","useState","surveyProgressBar","i18n","dir","singleQuestion","pages","validationStarted","setValidationStarted","onValidationStartHandler","useCallback","onValidationFailedHandler","_","targetReg","current","measureLayout","_x","y","scrollTo","x","animated","onPrevPageHandler","mandatoryQuestionTitleRefs","currentPage","surveyId","validatePageFeedbacks","onNextPageHandler","isValid","nextPageIndex","feedbacks","classicQuestions","mandatoryErrorMessage","anonymous","classicLayout","styles","scrollView","scrollViewContentContainer","bodyContent","onCloseHandler","newLayout","type","subType","submitSurvey","pageOrder","length","GlobalStyle","flex1","THEME_OPTION","CLASSIC","BIJLIRIDE","StyleSheet","create","flex","paddingHorizontal","flexGrow","alignItems","paddingBottom","width","maxWidth"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  ScrollView as RNScrollView,\n  StyleSheet,\n  Platform,\n  View,\n  findNodeHandle,\n} from 'react-native';\n\nimport { SurveyPageProvider } from '../contexts/survey-page';\nimport ClassicQuestionContainer from './ClassicQuestionContainer';\nimport QuestionContainer from './QuestionContainer';\nimport DefaultSurveyProgressBar from './SurveyProgressBar';\nimport ClassicSurveyFooter from './ClassicSurveyFooter';\nimport SurveyFooter from './SurveyFooter';\nimport DefaultSurveyPageIndicator from '../components/SurveyPageIndicator';\nimport { KeyboardAvoidingScrollView } from '../components/KeyboardAvoidingView';\nimport GlobalStyle from '../styles';\nimport i18n from '../translation';\nimport { THEME_OPTION, useTheme } from '../contexts/theme';\nimport type {\n  Survey,\n  SurveyFeedback,\n  Page,\n  Feedback,\n  ImageFileProps,\n} from '../data';\nimport { questionFeedbackValidator } from '../utils/data';\nimport { nextPage } from '../dt-common';\nimport { useFeedbackState } from '../contexts/feedback';\nimport { useSurveyPageContext } from '../contexts/survey-page';\nimport SurveyHeader from './SurveyHeader';\n\nexport const SurveyProgressBarPosition = {\n  FixedBottom: 0,\n  BelowBody: 1,\n};\n\nconst ScrollView =\n  Platform.OS === 'ios' ? KeyboardAvoidingScrollView : RNScrollView;\n\ntype FeedbackReducerState = any;\n/**\n * check if the feedbacks of questions of the page is valid\n * returns the 1st invalid question id or undefined (means all valid)\n */\nconst firstInvalidQuestionId = (\n  page: Page,\n  feedbackState: FeedbackReducerState\n): string | undefined => {\n  let invalidQuestionId;\n  for (const question of page.questions) {\n    const feedback = feedbackState.feedbacksMap[question.questionId];\n    if (\n      (question.mandatory && feedback === undefined) ||\n      (question.optional && feedback === undefined)\n    ) {\n      invalidQuestionId = question.questionId;\n      break;\n    }\n\n    if (feedback && !questionFeedbackValidator(question, feedback)) {\n      invalidQuestionId = question.questionId;\n      break;\n    }\n  }\n  return invalidQuestionId;\n};\n\n/**\n * get feedbacks array from feedback state\n */\nconst getFeedbacks = (feedbackState: FeedbackReducerState): Feedback[] => {\n  return feedbackState.answeredQuestionIds.map(\n    (qid: string) => feedbackState.feedbacksMap[qid]\n  );\n};\n\ninterface Props {\n  pageIndex: number; //current page index (start from 0)\n  survey: Survey;\n  onClose?: () => void;\n  onSubmit: (surveyFeedback: SurveyFeedback) => void;\n  onNextPage: (nextPageIndex: number) => void;\n  onPrevPage?: () => void;\n  onPageEnter?: () => void;\n  onPageLeave?: () => void;\n  onFeedback?: () => void;\n  onUpload?: (file: ImageFileProps) => Promise<string | undefined>;\n  isUploading?: boolean;\n  SurveyProgressBar?: any;\n  surveyProgressBarPosition?: number;\n  SurveyPageIndicator?: any;\n  preview: boolean;\n}\n\nconst SurveyScreenLayout = ({\n  pageIndex = 0,\n  survey,\n  onClose,\n  onPrevPage,\n  onNextPage,\n  onSubmit,\n  onUpload,\n  isUploading,\n  SurveyPageIndicator = DefaultSurveyPageIndicator,\n  SurveyProgressBar = DefaultSurveyProgressBar,\n  surveyProgressBarPosition = SurveyProgressBarPosition.FixedBottom,\n  preview,\n}: Props) => {\n  const { hexCode, themeOption, backgroundColor } = useTheme();\n  const scrollViewRef = React.useRef<RNScrollView>(null);\n  const [scrollEnabled, setScrollEnabled] = React.useState(true);\n\n  const surveyProgressBar = (\n    <SurveyProgressBar\n      survey={survey}\n      pageIndex={pageIndex}\n      rtl={i18n.dir() === 'rtl'}\n    />\n  );\n\n  const singleQuestion = survey.pages[pageIndex].questions[0];\n\n  // when validation start, set the state\n  const [validationStarted, setValidationStarted] = React.useState(false);\n  const onValidationStartHandler = React.useCallback(() => {\n    setValidationStarted(true);\n  }, []);\n\n  // when validation failed, scroll to the ref\n  const onValidationFailedHandler = React.useCallback((_, targetReg) => {\n    if (targetReg && scrollViewRef.current) {\n      targetReg.measureLayout(\n        findNodeHandle(scrollViewRef.current),\n        (_x: number, y: number) => {\n          if (scrollViewRef.current) {\n            scrollViewRef.current.scrollTo({\n              x: 0,\n              y: y,\n              animated: true,\n            });\n          }\n        }\n      );\n    }\n  }, []);\n\n  const onPrevPageHandler = () => {\n    onPrevPage && onPrevPage();\n  };\n\n  const feedbackState = useFeedbackState();\n  const { mandatoryQuestionTitleRefs } = useSurveyPageContext();\n  const currentPage = survey.pages[pageIndex];\n  const surveyId = survey.surveyId;\n\n  // check if feedbacks are valid\n  const validatePageFeedbacks = React.useCallback(() => {\n    onValidationStartHandler();\n    const invalidQuestionId = firstInvalidQuestionId(\n      currentPage,\n      feedbackState\n    );\n    // if there's an invalid question, call onValidationFailed\n    if (invalidQuestionId)\n      onValidationFailedHandler(\n        invalidQuestionId,\n        mandatoryQuestionTitleRefs[invalidQuestionId]\n      );\n    return !invalidQuestionId;\n  }, [\n    onValidationStartHandler,\n    currentPage,\n    feedbackState,\n    onValidationFailedHandler,\n    mandatoryQuestionTitleRefs,\n  ]);\n\n  const onNextPageHandler = React.useCallback(() => {\n    const isValid = validatePageFeedbacks();\n    if (isValid) {\n      const nextPageIndex = nextPage(\n        pageIndex,\n        getFeedbacks(feedbackState),\n        survey\n      );\n      if (nextPageIndex === -1) {\n        onSubmit({\n          surveyId,\n          feedbacks: getFeedbacks(feedbackState),\n        });\n      } else {\n        onNextPage(nextPageIndex);\n      }\n    }\n  }, [\n    validatePageFeedbacks,\n    pageIndex,\n    feedbackState,\n    survey,\n    onSubmit,\n    onNextPage,\n    surveyId,\n  ]);\n\n  const classicQuestions = survey.pages[pageIndex].questions.map((question) => {\n    return (\n      <ClassicQuestionContainer\n        key={question.questionId}\n        mandatoryErrorMessage={survey.mandatoryErrorMessage}\n        anonymous={survey.anonymous}\n        question={question}\n        validationStarted={validationStarted}\n        themeColor={hexCode}\n        onDragGrant={() => setScrollEnabled(false)}\n        onDragEnd={() => setScrollEnabled(true)}\n        onUpload={onUpload}\n        isUploading={isUploading}\n        preview={preview}\n      />\n    );\n  });\n\n  const classicLayout = (\n    <>\n      <SurveyPageIndicator\n        pageIndex={pageIndex}\n        survey={survey}\n        rtl={i18n.dir() === 'rtl'}\n      />\n      {/* @ts-ignore */}\n      <ScrollView\n        // @ts-ignore\n        ref={scrollViewRef}\n        style={[styles.scrollView, { backgroundColor }]}\n        extraAvoidingSpace={30}\n        contentContainerStyle={styles.scrollViewContentContainer}\n        scrollEnabled={scrollEnabled}\n      >\n        <View style={styles.bodyContent}>\n          {classicQuestions}\n          <ClassicSurveyFooter\n            survey={survey}\n            pageIndex={pageIndex}\n            onPrevPage={onPrevPageHandler}\n            onNextPage={onNextPageHandler}\n          />\n          {surveyProgressBarPosition === SurveyProgressBarPosition.BelowBody &&\n            surveyProgressBar}\n        </View>\n      </ScrollView>\n      {surveyProgressBarPosition === SurveyProgressBarPosition.FixedBottom &&\n        surveyProgressBar}\n    </>\n  );\n\n  const onCloseHandler = () => {\n    onClose && onClose();\n  };\n\n  // Can rename this if have better name\n  const newLayout = (\n    <>\n      {singleQuestion.type === 'rating' &&\n      singleQuestion.subType === 'smiley' ? null : (\n        <SurveyHeader\n          survey={survey}\n          pageIndex={pageIndex}\n          backgroundColor={backgroundColor}\n          onClose={onCloseHandler}\n        />\n      )}\n      <QuestionContainer\n        key={singleQuestion.questionId}\n        anonymous={survey.anonymous}\n        question={singleQuestion}\n        validationStarted={validationStarted}\n        themeColor={hexCode}\n        onClose={onCloseHandler}\n        onPrevPage={onPrevPageHandler}\n        onNextPage={onNextPageHandler}\n        onUpload={onUpload}\n        isUploading={isUploading}\n        survey={survey}\n        pageIndex={pageIndex}\n        themeOption={themeOption}\n        preview={preview}\n      />\n      {singleQuestion.type === 'rating' &&\n      singleQuestion.subType === 'smiley' ? null : (\n        <SurveyFooter\n          submitSurvey={survey.submitSurvey}\n          surveyColor={hexCode}\n          isFirstPage={pageIndex === 0}\n          isLastPage={pageIndex === survey.pageOrder.length - 1}\n          onPrevPage={onPrevPageHandler}\n          onNextPage={onNextPageHandler}\n          backgroundColor={backgroundColor}\n        />\n      )}\n    </>\n  );\n\n  return (\n    <SurveyPageProvider>\n      <View style={[GlobalStyle.flex1, { backgroundColor }]}>\n        {themeOption === THEME_OPTION.CLASSIC ||\n        themeOption === THEME_OPTION.BIJLIRIDE\n          ? classicLayout\n          : newLayout}\n      </View>\n    </SurveyPageProvider>\n  );\n};\n\nexport default SurveyScreenLayout;\n\nconst styles = StyleSheet.create({\n  scrollView: {\n    flex: 1,\n    paddingHorizontal: 30,\n  },\n  scrollViewContentContainer: {\n    flexGrow: 1,\n    alignItems: 'center',\n    paddingBottom: 30,\n  },\n\n  // where the questions and submit/page buttons go\n  bodyContent: {\n    width: '100%',\n    flex: 1,\n    maxWidth: 648,\n  },\n});\n"]}