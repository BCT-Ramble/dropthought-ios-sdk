{"version":3,"sources":["DraggableItem.tsx"],"names":["DraggableItem","children","index","onDragStart","onDragGrant","onDrag","onDragRelease","onDragEnd","onLayout","forceReset","movements","draggable","isDragging","setIsDragging","isPressed","setIsPressed","isDraggingRef","longPressTimeout","pan","Animated","ValueXY","onClear","current","clearTimeout","panResponder","PanResponder","create","onStartShouldSetPanResponder","onPanResponderStart","_e","_gestureState","onPanResponderGrant","_gesture","setTimeout","setOffset","x","_value","y","setValue","onPanResponderMove","_","gesture","dy","onPanResponderRelease","onPanResponderTerminate","shouldMoveRef","spring","toValue","useNativeDriver","start","panStyle","transform","getTranslateTransform","zIndex","draggingStyle","opacity","scale","panHandlers","React","memo"],"mappings":";;;;;;;AAAA;;AACA;;;;;;;;AAgBA,SAASA,aAAT,CAAuB;AACrBC,EAAAA,QADqB;AAErBC,EAAAA,KAFqB;AAGrBC,EAAAA,WAHqB;AAIrBC,EAAAA,WAJqB;AAKrBC,EAAAA,MALqB;AAMrBC,EAAAA,aANqB;AAOrBC,EAAAA,SAPqB;AAQrBC,EAAAA,QARqB;AASrBC,EAAAA,UATqB;AAUrBC,EAAAA,SAVqB;AAWrBC,EAAAA;AAXqB,CAAvB,EAYuB;AACrB,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8B,qBAAS,KAAT,CAApC;AACA,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4B,qBAAS,KAAT,CAAlC;AACA,QAAMC,aAAa,GAAG,mBAAO,KAAP,CAAtB;AAEA,QAAMC,gBAAgB,GAAG,oBAAzB;AAEA,QAAMC,GAAG,GAAG,qBAAS,IAAIC,sBAASC,OAAb,EAAT,EAAiC,CAAjC,CAAZ;;AACA,QAAMC,OAAO,GAAG,MAAM;AACpBN,IAAAA,YAAY,CAAC,KAAD,CAAZ;;AACA,QAAIE,gBAAgB,CAACK,OAArB,EAA8B;AAC5BC,MAAAA,YAAY,CAACN,gBAAgB,CAACK,OAAlB,CAAZ;AACAhB,MAAAA,aAAa,IAAIA,aAAa,EAA9B;AACD;;AACD,QAAIU,aAAa,CAACM,OAAlB,EAA2B;AACzBT,MAAAA,aAAa,CAAC,KAAD,CAAb;AACAG,MAAAA,aAAa,CAACM,OAAd,GAAwB,KAAxB;AACAf,MAAAA,SAAS,IAAIA,SAAS,CAACW,GAAD,CAAtB;AACD;AACF,GAXD;;AAYA,QAAMM,YAAY,GAAG,mBACnBC,0BAAaC,MAAb,CAAoB;AAClBC,IAAAA,4BAA4B,EAAE,MAAM;AAClC,aAAOhB,SAAP;AACD,KAHiB;AAIlBiB,IAAAA,mBAAmB,EAAE,CAACC,EAAD,EAAKC,aAAL,KAAuB;AAC1Cf,MAAAA,YAAY,CAAC,IAAD,CAAZ;AACAZ,MAAAA,WAAW;AACZ,KAPiB;AAQlB4B,IAAAA,mBAAmB,EAAE,CAACF,EAAD,EAAKG,QAAL,KAAkB;AACrCf,MAAAA,gBAAgB,CAACK,OAAjB,GAA2BW,UAAU,CAAC,MAAM;AAC1C7B,QAAAA,WAAW,IAAIA,WAAW,EAA1B;AACAS,QAAAA,aAAa,CAAC,IAAD,CAAb;AACAG,QAAAA,aAAa,CAACM,OAAd,GAAwB,IAAxB,CAH0C,CAI1C;;AACAJ,QAAAA,GAAG,CAACgB,SAAJ,CAAc;AAAEC,UAAAA,CAAC,EAAEjB,GAAG,CAACiB,CAAJ,CAAMC,MAAX;AAAmBC,UAAAA,CAAC,EAAEnB,GAAG,CAACmB,CAAJ,CAAMD;AAA5B,SAAd;AACAlB,QAAAA,GAAG,CAACoB,QAAJ,CAAa;AAAEH,UAAAA,CAAC,EAAE,CAAL;AAAQE,UAAAA,CAAC,EAAE;AAAX,SAAb;AACD,OAPoC,EAOlC,GAPkC,CAArC;AAQD,KAjBiB;AAkBlBE,IAAAA,kBAAkB,EAAE,CAACC,CAAD,EAAIC,OAAJ,KAAgB;AAClC,UAAIzB,aAAa,CAACM,OAAlB,EAA2B;AACzBjB,QAAAA,MAAM,IAAIA,MAAM,CAACa,GAAD,EAAMuB,OAAO,CAACC,EAAd,CAAhB;AACD;AACF,KAtBiB;AAuBlBC,IAAAA,qBAAqB,EAAE,CAACd,EAAD,EAAKG,QAAL,KAAkB;AACvCX,MAAAA,OAAO;AACR,KAzBiB;;AA0BlBuB,IAAAA,uBAAuB,CAACf,EAAD,EAAKC,aAAL,EAAoB;AACzCT,MAAAA,OAAO;AACR;;AA5BiB,GAApB,CADmB,CAArB;AAiCA,QAAMwB,aAAa,GAAG,mBAAOnC,SAAP,CAAtB;AACA,wBAAU,MAAM;AACd,QAAImC,aAAa,CAACvB,OAAd,KAA0B,CAA1B,IAA+BZ,SAAS,KAAK,CAAjD,EAAoD;AAClDmC,MAAAA,aAAa,CAACvB,OAAd,GAAwBZ,SAAxB;;AACAS,4BAAS2B,MAAT,CAAgB5B,GAAhB,EAAqB;AACnB6B,QAAAA,OAAO,EAAE;AAAEZ,UAAAA,CAAC,EAAE,CAAL;AAAQE,UAAAA,CAAC,EAAE3B;AAAX,SADU;AAEnBsC,QAAAA,eAAe,EAAE;AAFE,OAArB,EAGGC,KAHH;AAID,KAND,MAMO,IAAIJ,aAAa,CAACvB,OAAd,KAA0B,CAA1B,IAA+BZ,SAAS,KAAK,CAAjD,EAAoD;AACzDmC,MAAAA,aAAa,CAACvB,OAAd,GAAwBZ,SAAxB;;AACAS,4BAAS2B,MAAT,CAAgB5B,GAAhB,EAAqB;AACnB6B,QAAAA,OAAO,EAAE;AAAEZ,UAAAA,CAAC,EAAE,CAAL;AAAQE,UAAAA,CAAC,EAAE3B;AAAX,SADU;AAEnBsC,QAAAA,eAAe,EAAE;AAFE,OAArB,EAGGC,KAHH;AAID;AACF,GAdD,EAcG,CAAC/B,GAAD,EAAMR,SAAN,EAAiBR,KAAjB,CAdH;AAgBA,wBAAU,MAAM;AACd,QAAIO,UAAJ,EAAgB;AACdS,MAAAA,GAAG,CAACoB,QAAJ,CAAa;AAAEH,QAAAA,CAAC,EAAE,CAAL;AAAQE,QAAAA,CAAC,EAAE;AAAX,OAAb;AACD;AACF,GAJD,EAIG,CAAC5B,UAAD,EAAaS,GAAb,CAJH;AAMA,QAAMgC,QAAQ,GAAG;AACfC,IAAAA,SAAS,EAAEjC,GAAG,CAACkC,qBAAJ,EADI;AAEfC,IAAAA,MAAM,EAAE;AAFO,GAAjB;AAKA,QAAMC,aAAa,GAAG;AACpBD,IAAAA,MAAM,EAAEzC,UAAU,GAAG,CAAH,GAAO,CADL;AAEpB2C,IAAAA,OAAO,EAAEzC,SAAS,GAAG,GAAH,GAAS,CAFP;AAGpBqC,IAAAA,SAAS,EAAE,CACT,GAAGjC,GAAG,CAACkC,qBAAJ,EADM,EAET;AACEI,MAAAA,KAAK,EAAE5C,UAAU,GAAG,GAAH,GAAS;AAD5B,KAFS;AAHS,GAAtB;AAUA,sBACE,6BAAC,qBAAD,CAAU,IAAV,eACMY,YAAY,CAACF,OAAb,CAAqBmC,WAD3B;AAEE,IAAA,KAAK,EAAE,CAACP,QAAD,EAAWI,aAAX,CAFT;AAGE,IAAA,QAAQ,EAAE9C;AAHZ,MAKGP,QALH,CADF;AASD;;4BAEcyD,eAAMC,IAAN,CAAW3D,aAAX,C","sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport { Animated, PanResponder, LayoutChangeEvent } from 'react-native';\n\ntype DraggableItemProps = {\n  children: React.ReactNode;\n  index: number;\n  onDragStart: () => void;\n  onDragGrant: () => void;\n  onDrag: (pan: Animated.ValueXY, y: number) => void;\n  onDragRelease: () => void;\n  onDragEnd: (pan: Animated.ValueXY) => void;\n  onLayout: (event: LayoutChangeEvent) => void;\n  forceReset: boolean;\n  movements: number;\n  draggable: boolean;\n};\n\nfunction DraggableItem({\n  children,\n  index,\n  onDragStart,\n  onDragGrant,\n  onDrag,\n  onDragRelease,\n  onDragEnd,\n  onLayout,\n  forceReset,\n  movements,\n  draggable,\n}: DraggableItemProps) {\n  const [isDragging, setIsDragging] = useState(false);\n  const [isPressed, setIsPressed] = useState(false);\n  const isDraggingRef = useRef(false);\n\n  const longPressTimeout = useRef<NodeJS.Timeout>();\n\n  const pan = useState(new Animated.ValueXY())[0];\n  const onClear = () => {\n    setIsPressed(false);\n    if (longPressTimeout.current) {\n      clearTimeout(longPressTimeout.current);\n      onDragRelease && onDragRelease();\n    }\n    if (isDraggingRef.current) {\n      setIsDragging(false);\n      isDraggingRef.current = false;\n      onDragEnd && onDragEnd(pan);\n    }\n  };\n  const panResponder = useRef(\n    PanResponder.create({\n      onStartShouldSetPanResponder: () => {\n        return draggable;\n      },\n      onPanResponderStart: (_e, _gestureState) => {\n        setIsPressed(true);\n        onDragStart();\n      },\n      onPanResponderGrant: (_e, _gesture) => {\n        longPressTimeout.current = setTimeout(() => {\n          onDragGrant && onDragGrant();\n          setIsDragging(true);\n          isDraggingRef.current = true;\n          //@ts-ignore\n          pan.setOffset({ x: pan.x._value, y: pan.y._value });\n          pan.setValue({ x: 0, y: 0 });\n        }, 500);\n      },\n      onPanResponderMove: (_, gesture) => {\n        if (isDraggingRef.current) {\n          onDrag && onDrag(pan, gesture.dy);\n        }\n      },\n      onPanResponderRelease: (_e, _gesture) => {\n        onClear();\n      },\n      onPanResponderTerminate(_e, _gestureState) {\n        onClear();\n      },\n    })\n  );\n\n  const shouldMoveRef = useRef(movements);\n  useEffect(() => {\n    if (shouldMoveRef.current !== 0 && movements === 0) {\n      shouldMoveRef.current = movements;\n      Animated.spring(pan, {\n        toValue: { x: 0, y: movements },\n        useNativeDriver: true,\n      }).start();\n    } else if (shouldMoveRef.current === 0 && movements !== 0) {\n      shouldMoveRef.current = movements;\n      Animated.spring(pan, {\n        toValue: { x: 0, y: movements },\n        useNativeDriver: true,\n      }).start();\n    }\n  }, [pan, movements, index]);\n\n  useEffect(() => {\n    if (forceReset) {\n      pan.setValue({ x: 0, y: 0 });\n    }\n  }, [forceReset, pan]);\n\n  const panStyle = {\n    transform: pan.getTranslateTransform(),\n    zIndex: 0,\n  };\n\n  const draggingStyle = {\n    zIndex: isDragging ? 2 : 0,\n    opacity: isPressed ? 0.3 : 1,\n    transform: [\n      ...pan.getTranslateTransform(),\n      {\n        scale: isDragging ? 1.1 : 1,\n      },\n    ],\n  };\n  return (\n    <Animated.View\n      {...panResponder.current.panHandlers}\n      style={[panStyle, draggingStyle]}\n      onLayout={onLayout}\n    >\n      {children}\n    </Animated.View>\n  );\n}\n\nexport default React.memo(DraggableItem);\n"]}