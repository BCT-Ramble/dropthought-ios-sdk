{"version":3,"sources":["DraggableItem.tsx"],"names":["DraggableItem","children","index","onDrag","onDragEnd","onLayout","forceReset","movements","valRef","x","y","isDragging","setIsDragging","isDraggingRef","longPressTimeout","pan","Animated","ValueXY","panResponder","PanResponder","create","onStartShouldSetPanResponder","onPanResponderGrant","_e","_gesture","current","setTimeout","setOffset","_value","setValue","onPanResponderMove","_","gesture","dy","onPanResponderRelease","clearTimeout","onPanResponderTerminate","_gestureState","addListener","value","shouldMoveRef","spring","toValue","useNativeDriver","start","panStyle","transform","getTranslateTransform","zIndex","draggingStyle","opacity","panHandlers","React","memo"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport { Animated, PanResponder, LayoutChangeEvent } from 'react-native';\n\ntype DraggableItemProps = {\n  children: React.ReactNode;\n  index: number;\n  onDrag: (y: number) => void;\n  onDragEnd: (pan: Animated.ValueXY) => void;\n  onLayout: (event: LayoutChangeEvent) => void;\n  forceReset: boolean;\n  movements: number;\n};\n\nfunction DraggableItem({\n  children,\n  index,\n  onDrag,\n  onDragEnd,\n  onLayout,\n  forceReset,\n  movements,\n}: DraggableItemProps) {\n  const valRef = useRef({ x: 0, y: 0 });\n  const [isDragging, setIsDragging] = useState(false);\n  const isDraggingRef = useRef(false);\n\n  const longPressTimeout = useRef<NodeJS.Timeout>();\n\n  const pan = useState(new Animated.ValueXY())[0];\n  const panResponder = useRef(\n    PanResponder.create({\n      onStartShouldSetPanResponder: () => {\n        return true;\n      },\n      onPanResponderGrant: (_e, _gesture) => {\n        longPressTimeout.current = setTimeout(() => {\n          setIsDragging(true);\n          isDraggingRef.current = true;\n          //@ts-ignore\n          pan.setOffset({ x: pan.x._value, y: pan.y._value });\n          pan.setValue({ x: 0, y: 0 });\n        }, 200);\n      },\n      onPanResponderMove: (_, gesture) => {\n        if (isDraggingRef.current) {\n          pan.y.setValue(gesture.dy);\n        }\n      },\n      onPanResponderRelease: (_e, _gesture) => {\n        if (longPressTimeout.current) {\n          clearTimeout(longPressTimeout.current);\n        }\n        if (isDraggingRef.current) {\n          setIsDragging(false);\n          isDraggingRef.current = false;\n          onDragEnd && onDragEnd(pan);\n        }\n      },\n      onPanResponderTerminate(_e, _gestureState) {\n        if (longPressTimeout.current) {\n          clearTimeout(longPressTimeout.current);\n        }\n      },\n    })\n  );\n\n  useEffect(() => {\n    pan.addListener((value) => {\n      valRef.current = value;\n      if (isDraggingRef.current) {\n        onDrag && onDrag(value.y);\n      }\n    });\n  }, [onDrag, pan]);\n\n  const shouldMoveRef = useRef(movements);\n  useEffect(() => {\n    if (shouldMoveRef.current !== 0 && movements === 0) {\n      shouldMoveRef.current = movements;\n      Animated.spring(pan, {\n        toValue: { x: 0, y: movements },\n        useNativeDriver: true,\n      }).start();\n    } else if (shouldMoveRef.current === 0 && movements !== 0) {\n      shouldMoveRef.current = movements;\n      Animated.spring(pan, {\n        toValue: { x: 0, y: movements },\n        useNativeDriver: true,\n      }).start();\n    }\n  }, [pan, movements, index]);\n\n  useEffect(() => {\n    if (forceReset) {\n      pan.setValue({ x: 0, y: 0 });\n    }\n  }, [forceReset, pan]);\n\n  const panStyle = {\n    transform: pan.getTranslateTransform(),\n    zIndex: 0,\n  };\n\n  const draggingStyle = {\n    zIndex: isDragging ? 2 : 0,\n    opacity: isDragging ? 0.3 : 1,\n  };\n  return (\n    <Animated.View\n      {...panResponder.current.panHandlers}\n      style={[\n        panStyle,\n        draggingStyle,\n        { transform: pan.getTranslateTransform() },\n      ]}\n      onLayout={onLayout}\n    >\n      {children}\n    </Animated.View>\n  );\n}\n\nexport default React.memo(DraggableItem);\n"]}