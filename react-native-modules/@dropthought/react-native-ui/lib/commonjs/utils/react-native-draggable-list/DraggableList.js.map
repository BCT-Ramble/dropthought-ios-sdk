{"version":3,"sources":["DraggableList.tsx"],"names":["moveElement","array","from","to","result","element","splice","DraggableList","data","renderItem","onDragStart","onDragRelease","onDragEnd","backupListRef","tempListRef","draggingIndexRef","newIndexRef","forceReset","setForceReset","setHelpToRerender","heightLevelRef","undefined","forEach","item","backupItem","current","find","backupData","index","calculateMovements","movements","rowHeight","calculateHeightLevel","localHeightLevel","Number","MIN_SAFE_INTEGER","i","length","iRowHeight","level","Math","floor","j","jRowHeight","MAX_SAFE_INTEGER","calculateReleaseDragMovements","localIndex","calculatePositionChange","currentY","prev","minRef","maxRef","onDragStartHandler","nonNACount","filter","isNA","origin","option","onDragHandler","pan","y","listIndex","setValue","onDragEndHandler","Animated","spring","toValue","x","useNativeDriver","speed","start","newList","setTimeout","onLayoutHandler","event","height","nativeEvent","layout","parseInt","styles","questionContainer","map","JSON","stringify","toString","React","memo","StyleSheet","create","width"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useRef, useState } from 'react';\nimport { StyleSheet, View, Animated, LayoutChangeEvent } from 'react-native';\nimport DraggableItem from './DraggableItem';\n\nexport type TransformedOption = {\n  option: string;\n  index: number;\n  isNA: boolean;\n  rowHeight?: number;\n};\n\nfunction moveElement<ItemT>(\n  array: ReadonlyArray<ItemT>,\n  from: number,\n  to: number\n) {\n  const result = [...array];\n  if (from !== to) {\n    const element = result.splice(from, 1)[0];\n    result.splice(to, 0, element);\n  }\n  return result;\n}\n\ntype DraggableListRenderItemInfo = {\n  item: TransformedOption;\n  index: number;\n};\n\nexport type DraggableListRenderItem = (\n  info: DraggableListRenderItemInfo\n) => React.ReactElement | null;\n\ntype DraggableListProps = {\n  data: ReadonlyArray<TransformedOption>;\n  renderItem: DraggableListRenderItem;\n  onDragStart: () => void;\n  onDragRelease: () => void;\n  onDragEnd: (newList: TransformedOption[]) => void;\n};\n\nfunction DraggableList({\n  data,\n  renderItem,\n  onDragStart,\n  onDragRelease,\n  onDragEnd,\n}: DraggableListProps) {\n  const backupListRef = useRef([...data]);\n  const tempListRef = useRef([...data]);\n\n  const draggingIndexRef = useRef(-1);\n  const newIndexRef = useRef(-1);\n\n  const [forceReset, setForceReset] = useState(false);\n\n  const setHelpToRerender = useState(false)[1];\n  const heightLevelRef = useRef<number[] | undefined>(undefined);\n\n  useEffect(() => {\n    let result: TransformedOption[] = [];\n    data.forEach((item) => {\n      const backupItem = backupListRef.current.find(\n        (backupData) => backupData.index === item.index\n      );\n      if (backupItem) {\n        result = [...result, backupItem];\n      }\n    });\n    tempListRef.current = result ? result : [...data];\n    heightLevelRef.current = undefined;\n  }, [data]);\n\n  const calculateMovements = useCallback((index: number) => {\n    let result = 0;\n    if (newIndexRef.current < 0 || draggingIndexRef.current < 0) {\n      return result;\n    }\n\n    if (newIndexRef.current === draggingIndexRef.current) {\n      return result;\n    } else {\n      const movements =\n        tempListRef.current[draggingIndexRef.current].rowHeight ?? 0;\n      if (newIndexRef.current > draggingIndexRef.current) {\n        result =\n          index > draggingIndexRef.current && index <= newIndexRef.current\n            ? -movements\n            : 0;\n      } else {\n        result =\n          index < draggingIndexRef.current && index >= newIndexRef.current\n            ? movements\n            : 0;\n      }\n      return result;\n    }\n  }, []);\n\n  const calculateHeightLevel = useCallback(() => {\n    if (!heightLevelRef.current) {\n      let localHeightLevel: number[] = [Number.MIN_SAFE_INTEGER];\n      for (let i = 0; i < tempListRef.current.length; i++) {\n        const iRowHeight = tempListRef.current[i].rowHeight;\n        if (iRowHeight) {\n          let level = 0;\n          if (i < draggingIndexRef.current) {\n            level = Math.floor(iRowHeight / 2);\n            for (let j = i + 1; j < draggingIndexRef.current; j++) {\n              const jRowHeight = tempListRef.current[j].rowHeight;\n              if (jRowHeight) {\n                level = level + jRowHeight;\n              }\n            }\n            localHeightLevel = [...localHeightLevel, -level];\n          } else if (i > draggingIndexRef.current) {\n            for (let j = draggingIndexRef.current + 1; j < i; j++) {\n              const jRowHeight = tempListRef.current[j].rowHeight;\n              if (jRowHeight) {\n                level = level + jRowHeight;\n              }\n            }\n            level = level + Math.floor(iRowHeight / 2);\n            localHeightLevel = [...localHeightLevel, level];\n          }\n        }\n      }\n      localHeightLevel = [...localHeightLevel, Number.MAX_SAFE_INTEGER];\n      heightLevelRef.current = localHeightLevel;\n    }\n  }, []);\n\n  const calculateReleaseDragMovements = useCallback(() => {\n    let movements = 0;\n\n    tempListRef.current.forEach((item, localIndex) => {\n      if (item.rowHeight) {\n        if (newIndexRef.current > draggingIndexRef.current) {\n          if (\n            localIndex > draggingIndexRef.current &&\n            localIndex <= newIndexRef.current\n          ) {\n            movements += item.rowHeight;\n          }\n        } else if (newIndexRef.current < draggingIndexRef.current) {\n          if (\n            localIndex < draggingIndexRef.current &&\n            localIndex >= newIndexRef.current\n          ) {\n            movements -= item.rowHeight;\n          }\n        }\n      }\n    });\n    return movements;\n  }, []);\n\n  const calculatePositionChange = useCallback(\n    (currentY: number) => {\n      if (heightLevelRef.current) {\n        for (let i = 0; i < heightLevelRef.current.length; i++) {\n          if (\n            currentY >= heightLevelRef.current[i] &&\n            currentY < heightLevelRef.current[i + 1]\n          ) {\n            if (newIndexRef.current !== i) {\n              newIndexRef.current = i;\n              // Note: Call setHelpToRerender to trigger rerender. Without calling setHelpToRerender other item will not shift while dragging.\n              setHelpToRerender((prev) => !prev);\n            }\n          }\n        }\n      }\n    },\n    [setHelpToRerender]\n  );\n\n  let minRef = useRef(0);\n  let maxRef = useRef(0);\n\n  const onDragStartHandler = (index: number) => {\n    onDragStart && onDragStart();\n    const nonNACount = data.filter(({ isNA }) => !isNA).length;\n    minRef.current = 0;\n    maxRef.current = 0;\n    for (let i = 0; i < index; i++) {\n      minRef.current = minRef.current - (tempListRef.current[i].rowHeight ?? 0);\n    }\n\n    for (let i = index; i < nonNACount - 1; i++) {\n      const origin = data.filter(\n        ({ option }) => option === tempListRef.current[index].option\n      );\n      if (origin.length > 0 && !origin[0].isNA) {\n        maxRef.current =\n          maxRef.current + (tempListRef.current[i].rowHeight ?? 0);\n      }\n    }\n  };\n\n  const onDragHandler = useCallback(\n    (pan: Animated.ValueXY, y: number, listIndex: number) => {\n      if (y > minRef.current && y < maxRef.current) {\n        pan.y.setValue(y);\n\n        draggingIndexRef.current = listIndex;\n        calculateHeightLevel();\n        calculatePositionChange(y);\n      }\n    },\n    [calculateHeightLevel, calculatePositionChange]\n  );\n\n  const onDragEndHandler = useCallback(\n    (pan: Animated.ValueXY, listIndex: number) => {\n      const movements = calculateReleaseDragMovements();\n\n      if (movements !== 0) {\n        Animated.spring(pan, {\n          toValue: { x: 0, y: movements },\n          useNativeDriver: true,\n          speed: Number.MAX_SAFE_INTEGER,\n        }).start(() => {\n          const newList = moveElement(\n            tempListRef.current,\n            listIndex,\n            newIndexRef.current\n          );\n          newIndexRef.current = -1;\n          draggingIndexRef.current = -1;\n          setForceReset(true);\n          onDragEnd(newList);\n\n          tempListRef.current = newList;\n          setTimeout(() => {\n            setForceReset(false);\n            heightLevelRef.current = undefined;\n          }, 0);\n        });\n      } else {\n        setForceReset(true);\n        setTimeout(() => {\n          setForceReset(false);\n          heightLevelRef.current = undefined;\n        }, 0);\n      }\n    },\n    [calculateReleaseDragMovements, onDragEnd]\n  );\n\n  const onLayoutHandler = (event: LayoutChangeEvent, listIndex: number) => {\n    var { height } = event.nativeEvent.layout;\n    tempListRef.current[listIndex] = {\n      ...tempListRef.current[listIndex],\n      rowHeight: parseInt(`${height}`, 10),\n    };\n    if (!backupListRef.current[listIndex].rowHeight) {\n      backupListRef.current[listIndex] = {\n        ...tempListRef.current[listIndex],\n        rowHeight: parseInt(`${height}`, 10),\n      };\n    }\n  };\n\n  return (\n    <View style={styles.questionContainer}>\n      {data.map((item, index) => {\n        return (\n          <DraggableItem\n            index={index}\n            onDragStart={() => onDragStartHandler(index)}\n            onDrag={(pan, y) => onDragHandler(pan, y, index)}\n            onDragRelease={onDragRelease}\n            onDragEnd={(pan) => onDragEndHandler(pan, index)}\n            onLayout={(event) => onLayoutHandler(event, index)}\n            forceReset={forceReset}\n            movements={calculateMovements(index)}\n            key={JSON.stringify(item) + index.toString()}\n            draggable={!item.isNA}\n          >\n            {renderItem({ item, index })}\n          </DraggableItem>\n        );\n      })}\n    </View>\n  );\n}\n\nexport default React.memo(DraggableList);\n\nconst styles = StyleSheet.create({\n  questionContainer: {\n    width: '100%',\n  },\n});\n"]}