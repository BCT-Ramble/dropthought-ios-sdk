{"version":3,"sources":["data.ts"],"names":["QuestionBrandType","Other","QuestionMetaDataType","Name","Email","Phone","Number","Date","String","getOptionsFromQuestion","question","options","map","option","index","isOther","title","placeholder","questionBrand","push","length","metaDataFormatValidator","value","metaDataType","reg","toLocaleLowerCase","test","mandatoryQuestionValidator","feedback","answers","otherFlag","type","mandatory","isAnswered","undefined","getRequiredType","optional","questionFeedbackValidator","isValid","metaDataTypeList","every","getPageIndexFromPageId","pageId","survey","transformFeedbacks","pageIndex","feedbacksMap","defaultPageIQAData","questionId","textOrIndexArr","defaultIQAData","s","toString","nextPage","defaultNextPage","pageOrder","pageRuleSet","rules","iQADataArr","nextPageId","scaleLogic","option4FaceTable","option3LoopFaceTable","Map","require","option4LoopFaceTable","option4TransformTable"],"mappings":"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","sourcesContent":["import {\n  isEmpty,\n  prop,\n  pipe,\n  findIndex,\n  equals,\n  curry,\n  nth,\n  map,\n  isNil,\n} from 'ramda';\nimport { EvaluateRuleSet } from './dt-common-lib';\nimport type {\n  Feedback,\n  Question,\n  Survey,\n  RequiredType,\n  QuestionMetaDataType as DataQuestionMetaDataType,\n} from '../data';\nimport { matrixRatingValidator } from '../hooks/useMatrixRating';\nimport { multipleOpenEndedValidator } from '../hooks/useMultipleOpenEnded';\n\n/** @enum {'other'} */\nexport const QuestionBrandType = {\n  Other: 'other',\n};\n\n/** @enum {'Date'|'Name'|'Email'|'Phone'|'Number'|'String'} */\nexport const QuestionMetaDataType = {\n  Name: 'name',\n  Email: 'email',\n  Phone: 'phone',\n  Number: 'number',\n  Date: 'date',\n  String: 'string',\n};\n\nexport type TransformOptionType = {\n  isOther: boolean;\n  title: string;\n  placeholder: string;\n  index: number;\n};\n\n/**\n * given a Question type, return ['option label1', 'option label2', 'option label3', true]\n * if the type is boolean at the last, it means it is an \"other\" option\n */\nexport const getOptionsFromQuestion = (\n  question: Question\n): TransformOptionType[] => {\n  // copy the original array\n  const options: TransformOptionType[] | [] = (question.options ?? []).map(\n    (option, index) => ({\n      isOther: false,\n      title: option,\n      placeholder: '',\n      index,\n    })\n  );\n  // add additional option when the question brand type is \"other\"\n  if (question.questionBrand === QuestionBrandType.Other) {\n    options.push({\n      isOther: true,\n      // @ts-ignore\n      title: '',\n      placeholder: '',\n      index: options.length,\n    });\n  }\n  // @ts-ignore\n  return options;\n};\n\n/**\n * validate if value match metaDataType question' rule\n */\nexport const metaDataFormatValidator = (\n  value: string,\n  metaDataType?: DataQuestionMetaDataType\n): boolean => {\n  // no need to check the value when no value or no type\n  if (!value || !metaDataType) return true;\n\n  let reg = null;\n\n  switch (metaDataType.toLocaleLowerCase()) {\n    case QuestionMetaDataType.Number:\n      reg = /^\\d+$/; // if need negative integer someday, reg = /^-?\\d+$/\n      return reg.test(value);\n    case QuestionMetaDataType.Date:\n      reg =\n        /^((?:\\d{4}-\\d{2}-\\d{2})|(?:\\d{4}\\/\\d{2}\\/\\d{2})|(?:\\d{4}:\\d{2}:\\d{2}))?( )?(\\d{2}:\\d{2}:\\d{2})?$/;\n      return reg.test(value);\n    case QuestionMetaDataType.Phone:\n      reg = /^\\+[1-9]\\d{1,14}$/;\n      return reg.test(value);\n    case QuestionMetaDataType.Email:\n      reg =\n        /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n      return reg.test(value);\n    default:\n      // no need to check the value\n      return true;\n  }\n};\n\n/**\n * if mandatory question has feedback\n */\nexport const mandatoryQuestionValidator = (\n  question: Question,\n  feedback: Feedback | {} = {}\n): boolean => {\n  // @ts-ignore\n  const { answers, otherFlag } = feedback;\n  if (question.type === 'matrixRating') {\n    // @ts-ignore\n    return matrixRatingValidator(question, feedback);\n  } else if (question.type === 'multipleOpenEnded') {\n    // @ts-ignore\n    return multipleOpenEndedValidator(question, feedback);\n  }\n  if (!question.mandatory) {\n    if (\n      otherFlag &&\n      answers.length > 0 &&\n      (isEmpty(answers[answers.length - 1]) ||\n        isNil(answers[answers.length - 1]))\n    ) {\n      return false;\n    }\n    return true;\n  }\n  // check if feedback has answer\n  const isAnswered =\n    answers !== undefined &&\n    answers.length > 0 &&\n    !isEmpty(answers[answers.length - 1]) &&\n    !isNil(answers[answers.length - 1]);\n\n  return isAnswered;\n};\n\nexport const getRequiredType = (question: Question): RequiredType => {\n  const { mandatory, optional } = question;\n  switch (true) {\n    case mandatory && !optional:\n      return 'all';\n    case !mandatory && optional:\n      return 'one';\n    case !mandatory && !optional:\n      return 'none';\n    default:\n      return 'none';\n  }\n};\n\n/**\n * validate if question's feedback is valid:\n * metadata type value check, mandatory check\n */\nexport const questionFeedbackValidator = (\n  question: Question,\n  feedback: Feedback\n): boolean => {\n  let isValid = false;\n  if (question.type === 'multipleOpenEnded' && question.metaDataTypeList) {\n    isValid = question.metaDataTypeList?.every((type, index) =>\n      // @ts-ignore\n      metaDataFormatValidator(feedback.answers?.[index], type)\n    );\n  } else {\n    isValid = metaDataFormatValidator(\n      // @ts-ignore\n      feedback.answers?.[0],\n      question.metaDataType\n    );\n  }\n  return (\n    // @ts-ignore\n    isValid &&\n    // @ts-ignore\n    mandatoryQuestionValidator(question, feedback)\n  );\n};\n\n/**\n * return -1 if not existed\n * @type {(pageId: string, survey: Survey) => number}\n */\nexport const getPageIndexFromPageId = curry((pageId: string, survey: Survey) =>\n  // @ts-ignore\n  pipe(prop('pageOrder'), findIndex(equals(pageId)))(survey)\n);\n\n/**\n * only keep the feedbacks that belongs to a certain page\n * if a question is not answered => textOrIndexArr: ['']\n * also convert the answers to 0-based\n * transform it to IQAData type\n * @type {(pageIndex: number, survey: Survey, feedbacksMap: {[questionId: string]: Feedback} ) => [IQAData]}\n */\nconst transformFeedbacks = (\n  pageIndex: number,\n  survey: Survey,\n  feedbacksMap: { [questionId: string]: Feedback }\n) => {\n  // get the default page IQAData\n  /** @type {IQAData[]} */\n  const defaultPageIQAData = pipe(\n    prop('pages'),\n    // @ts-ignore\n    nth(pageIndex),\n    prop('questions'),\n    map((question) => ({\n      // @ts-ignore\n      questionId: question.questionId,\n      textOrIndexArr: [''],\n    }))\n    // @ts-ignore\n  )(survey);\n\n  // if feedback has answers, use it to replace the default\n  return defaultPageIQAData.map((defaultIQAData) => {\n    const feedback = feedbacksMap[defaultIQAData.questionId];\n    if (feedback && !isEmpty(feedback.answers)) {\n      return {\n        questionId: defaultIQAData.questionId,\n        // @ts-ignore\n        textOrIndexArr: feedback.answers.map((s) => s.toString()),\n        otherFlag: feedback.otherFlag,\n        type: feedback.type,\n      };\n    }\n    return defaultIQAData;\n  });\n};\n\nexport function nextPage(\n  pageIndex: number,\n  pageId: string,\n  feedbacksMap: { [questionId: string]: Feedback },\n  survey: Survey\n): number {\n  const defaultNextPage = () =>\n    pageIndex >= survey.pageOrder.length - 1 ? -1 : pageIndex + 1;\n\n  // if there's no rule, go to default next page\n  const pageRuleSet = survey.rules[pageId];\n  if (!pageRuleSet || isEmpty(pageRuleSet)) {\n    return defaultNextPage();\n  }\n\n  // apply the rule\n  const iQADataArr = transformFeedbacks(pageIndex, survey, feedbacksMap);\n  const nextPageId = EvaluateRuleSet(pageRuleSet, iQADataArr);\n  if (!nextPageId) {\n    return defaultNextPage();\n  }\n\n  // next page index\n  return getPageIndexFromPageId(nextPageId, survey);\n}\n\nexport const scaleLogic: {\n  [name in string]: number[];\n} = {\n  '2': [0, 4],\n  '3': [1, 2, 3],\n  '4': [0, 1, 3, 4],\n  '5': [0, 1, 2, 3, 4],\n};\n\nexport const option4FaceTable = ['A', 'B', 'C', 'D', 'E'];\n\nexport const option3LoopFaceTable = new Map([\n  [\n    '1',\n    require('../assets/animations/smiley_option3/option3_smile_1_loop.json'),\n  ],\n  [\n    '2',\n    require('../assets/animations/smiley_option3/option3_smile_2_loop.json'),\n  ],\n  [\n    '3',\n    require('../assets/animations/smiley_option3/option3_smile_3_loop.json'),\n  ],\n  [\n    '4',\n    require('../assets/animations/smiley_option3/option3_smile_4_loop.json'),\n  ],\n  [\n    '5',\n    require('../assets/animations/smiley_option3/option3_smile_5_loop.json'),\n  ],\n]);\n\nexport const option4LoopFaceTable = new Map([\n  ['1A', require('../assets/animations/smiley_option4/1A.json')],\n  ['1B', require('../assets/animations/smiley_option4/1B.json')],\n  ['2B', require('../assets/animations/smiley_option4/2B.json')],\n  ['2C', require('../assets/animations/smiley_option4/2C.json')],\n  ['2E', require('../assets/animations/smiley_option4/2E.json')],\n  ['3C', require('../assets/animations/smiley_option4/3C.json')],\n  ['3D', require('../assets/animations/smiley_option4/3D.json')],\n  ['3E', require('../assets/animations/smiley_option4/3E.json')],\n  ['4D', require('../assets/animations/smiley_option4/4D.json')],\n  ['4E', require('../assets/animations/smiley_option4/4E.json')],\n  ['5E', require('../assets/animations/smiley_option4/5E.json')],\n]);\nexport const option4TransformTable = new Map([\n  ['1A-2B', require('../assets/animations/smiley_option4/1A-2B.json')],\n  ['1B-2C', require('../assets/animations/smiley_option4/1B-2C.json')],\n  ['2B-3C', require('../assets/animations/smiley_option4/2B-3C.json')],\n  ['2B-3D', require('../assets/animations/smiley_option4/2B-3D.json')],\n  ['3C-4D', require('../assets/animations/smiley_option4/3C-4D.json')],\n  ['4D-5E', require('../assets/animations/smiley_option4/4D-5E.json')],\n  ['1A-2E', require('../assets/animations/smiley_option4/1A-2E.json')],\n  ['1A-2C', require('../assets/animations/smiley_option4/1A-2C.json')],\n  ['2C-3E', require('../assets/animations/smiley_option4/2C-3E.json')],\n  ['2C-3D', require('../assets/animations/smiley_option4/2C-3D.json')],\n  ['3D-4E', require('../assets/animations/smiley_option4/3D-4E.json')],\n]);\n\n/** @typedef {import('./dt-common-lib/IfcRule').IQAData} IQAData */\n"]}