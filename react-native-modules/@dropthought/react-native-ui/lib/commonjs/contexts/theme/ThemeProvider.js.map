{"version":3,"sources":["ThemeProvider.tsx"],"names":["getColorScheme","appearance","systemColorScheme","colorScheme","APPEARANCE","SYSTEM","COLOR_SCHEMES","LIGHT","DARK","includes","light","getFontColor","customFontColor","dark","Colors","fontColorDark","fontColorLight","getBackgroundColor","customBackgroundColor","backgroundColorDark","backgroundColorLight","useTheme","themeOption","fontColor","backgroundColor","React","useMemo","ThemeProvider","children","themeValue"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;;;;;AAUA,SAASA,cAAT,CACEC,UADF,EAEEC,iBAFF,EAGqB;AAAA;;AACnB,MAAIC,WAAJ;;AACA,MAAIF,UAAU,KAAKG,kBAAWC,MAA9B,EAAsC;AACpC,QAAIH,iBAAJ,EAAuB;AACrBC,MAAAA,WAAW,GAAGG,qBAAcJ,iBAAd,CAAd;AACD;AACF,GAJD,MAIO,IAAI,CAACE,kBAAWG,KAAZ,EAAmBH,kBAAWI,IAA9B,EAAoCC,QAApC,CAA6CR,UAA7C,CAAJ,EAA8D;AACnEE,IAAAA,WAAW,GAAGG,qBAAcL,UAAd,CAAd;AACD;;AACD,yBAAOE,WAAP,uDAAsBG,qBAAcI,KAApC;AACD;;AAED,SAASC,YAAT,CACEC,eADF,EAEET,WAFF,EAGE;AACA,MAAIS,eAAJ,EAAqB;AACnB,WAAOA,eAAP;AACD;;AACD,MAAIT,WAAW,KAAKG,qBAAcO,IAAlC,EAAwC;AACtC,WAAOC,eAAOC,aAAd;AACD;;AACD,SAAOD,eAAOE,cAAd;AACD;;AAED,SAASC,kBAAT,CACEC,qBADF,EAEEf,WAFF,EAGE;AACA,MAAIe,qBAAJ,EAA2B;AACzB,WAAOA,qBAAP;AACD;;AACD,MAAIf,WAAW,KAAKG,qBAAcO,IAAlC,EAAwC;AACtC,WAAOC,eAAOK,mBAAd;AACD;;AACD,SAAOL,eAAOM,oBAAd;AACD;;AAED,SAASC,QAAT,CAAkB;AAChBC,EAAAA,WADgB;AAEhBrB,EAAAA,UAFgB;AAGhBsB,EAAAA,SAAS,EAAEX,eAHK;AAIhBY,EAAAA,eAAe,EAAEN;AAJD,CAAlB,EAUG;AACD,QAAMhB,iBAAiB,GAAG,kCAA1B;AACA,QAAMC,WAAW,GAAGH,cAAc,CAACC,UAAD,EAAaC,iBAAb,CAAlC;AACA,QAAMqB,SAAS,GAAGZ,YAAY,CAACC,eAAD,EAAkBT,WAAlB,CAA9B;AACA,QAAMqB,eAAe,GAAGP,kBAAkB,CACxCC,qBADwC,EAExCf,WAFwC,CAA1C;AAKA,SAAOsB,KAAK,CAACC,OAAN,CAAc,MAAM;AACzB,WAAO;AACLJ,MAAAA,WADK;AAELnB,MAAAA,WAFK;AAGLoB,MAAAA,SAHK;AAILC,MAAAA,eAJK;AAKLZ,MAAAA,eALK;AAMLM,MAAAA;AANK,KAAP;AAQD,GATM,EASJ,CACDI,WADC,EAEDnB,WAFC,EAGDoB,SAHC,EAIDC,eAJC,EAKDZ,eALC,EAMDM,qBANC,CATI,CAAP;AAiBD;;AAUM,SAASS,aAAT,CAAuB;AAC5BC,EAAAA,QAD4B;AAE5BN,EAAAA,WAF4B;AAG5BrB,EAAAA,UAH4B;AAI5BsB,EAAAA,SAJ4B;AAK5BC,EAAAA;AAL4B,CAAvB,EAMG;AACR,QAAMK,UAAU,GAAGR,QAAQ,CAAC;AAC1BC,IAAAA,WAD0B;AAE1BrB,IAAAA,UAF0B;AAG1BsB,IAAAA,SAH0B;AAI1BC,IAAAA;AAJ0B,GAAD,CAA3B;AAOA,sBACE,oBAAC,0BAAD,CAAc,QAAd;AAAuB,IAAA,KAAK,EAAEK;AAA9B,KAA2CD,QAA3C,CADF;AAGD","sourcesContent":["import * as React from 'react';\nimport { useColorScheme, ColorSchemeName } from 'react-native';\nimport { Colors } from '../../styles';\nimport { ThemeContext } from './ThemeContext';\nimport {\n  APPEARANCE,\n  COLOR_SCHEMES,\n  IAppearanceType,\n  IColorSchemesType,\n  FontColor,\n  BackgroundColor,\n  IThemeOptionType,\n} from './theme.const';\n\nfunction getColorScheme(\n  appearance: IAppearanceType,\n  systemColorScheme: ColorSchemeName\n): IColorSchemesType {\n  let colorScheme;\n  if (appearance === APPEARANCE.SYSTEM) {\n    if (systemColorScheme) {\n      colorScheme = COLOR_SCHEMES[systemColorScheme];\n    }\n  } else if ([APPEARANCE.LIGHT, APPEARANCE.DARK].includes(appearance)) {\n    colorScheme = COLOR_SCHEMES[appearance];\n  }\n  return colorScheme ?? COLOR_SCHEMES.light;\n}\n\nfunction getFontColor(\n  customFontColor: FontColor,\n  colorScheme: IColorSchemesType\n) {\n  if (customFontColor) {\n    return customFontColor;\n  }\n  if (colorScheme === COLOR_SCHEMES.dark) {\n    return Colors.fontColorDark;\n  }\n  return Colors.fontColorLight;\n}\n\nfunction getBackgroundColor(\n  customBackgroundColor: BackgroundColor,\n  colorScheme: IColorSchemesType\n) {\n  if (customBackgroundColor) {\n    return customBackgroundColor;\n  }\n  if (colorScheme === COLOR_SCHEMES.dark) {\n    return Colors.backgroundColorDark;\n  }\n  return Colors.backgroundColorLight;\n}\n\nfunction useTheme({\n  themeOption,\n  appearance,\n  fontColor: customFontColor,\n  backgroundColor: customBackgroundColor,\n}: {\n  themeOption: IThemeOptionType;\n  appearance: IAppearanceType;\n  fontColor: FontColor;\n  backgroundColor: BackgroundColor;\n}) {\n  const systemColorScheme = useColorScheme();\n  const colorScheme = getColorScheme(appearance, systemColorScheme);\n  const fontColor = getFontColor(customFontColor, colorScheme);\n  const backgroundColor = getBackgroundColor(\n    customBackgroundColor,\n    colorScheme\n  );\n\n  return React.useMemo(() => {\n    return {\n      themeOption,\n      colorScheme,\n      fontColor,\n      backgroundColor,\n      customFontColor,\n      customBackgroundColor,\n    };\n  }, [\n    themeOption,\n    colorScheme,\n    fontColor,\n    backgroundColor,\n    customFontColor,\n    customBackgroundColor,\n  ]);\n}\n\ntype Props = {\n  children: React.ReactNode;\n  themeOption: IThemeOptionType;\n  appearance: IAppearanceType;\n  fontColor: FontColor;\n  backgroundColor: BackgroundColor;\n};\n\nexport function ThemeProvider({\n  children,\n  themeOption,\n  appearance,\n  fontColor,\n  backgroundColor,\n}: Props) {\n  const themeValue = useTheme({\n    themeOption,\n    appearance,\n    fontColor,\n    backgroundColor,\n  });\n\n  return (\n    <ThemeContext.Provider value={themeValue}>{children}</ThemeContext.Provider>\n  );\n}\n"]}