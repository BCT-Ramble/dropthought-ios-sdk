{"version":3,"sources":["WheelPicker.tsx"],"names":["WheelPicker","selectedIndex","options","onChange","selectedIndicatorStyle","containerStyle","itemStyle","itemTextStyle","itemHeight","rotationFunction","x","Math","pow","opacityFunction","visibleRest","decelerationRate","containerProps","flatListRef","scrollY","Animated","Value","containerHeight","paddedOptions","array","i","unshift","push","offsets","Array","length","map","_","currentScrollIndex","add","divide","handleMomentumScrollEnd","event","offsetY","nativeEvent","contentOffset","y","index","floor","last","current","scrollToIndex","animated","styles","container","height","selectedIndicator","transform","translateY","scrollView","useNativeDriver","offset","toString","item"],"mappings":"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","sourcesContent":["import React, { useEffect, useMemo, useRef, useState } from 'react';\nimport {\n  StyleProp,\n  TextStyle,\n  NativeSyntheticEvent,\n  NativeScrollEvent,\n  Animated,\n  ViewStyle,\n  View,\n  ViewProps,\n  FlatList,\n} from 'react-native';\nimport styles from './WheelPicker.styles';\nimport WheelPickerItem from './WheelPickerItem';\n\ninterface Props {\n  selectedIndex: number;\n  options: string[];\n  onChange: (index: number) => void;\n  selectedIndicatorStyle?: StyleProp<ViewStyle>;\n  itemTextStyle?: StyleProp<TextStyle>;\n  itemStyle?: ViewStyle;\n  itemHeight?: number;\n  containerStyle?: ViewStyle;\n  containerProps?: Omit<ViewProps, 'style'>;\n  rotationFunction?: (x: number) => number;\n  opacityFunction?: (x: number) => number;\n  visibleRest?: number;\n  decelerationRate?: 'normal' | 'fast' | number;\n}\n\nconst WheelPicker: React.FC<Props> = ({\n  selectedIndex,\n  options,\n  onChange,\n  selectedIndicatorStyle = {},\n  containerStyle = {},\n  itemStyle = {},\n  itemTextStyle = {},\n  itemHeight = 40,\n  rotationFunction = (x: number) => 1 - Math.pow(1 / 2, x),\n  opacityFunction = (x: number) => Math.pow(1 / 3, x),\n  visibleRest = 2,\n  decelerationRate = 'fast',\n  containerProps = {},\n}) => {\n  const flatListRef = useRef<FlatList>(null);\n  const [scrollY] = useState(new Animated.Value(0));\n\n  const containerHeight = (1 + visibleRest * 2) * itemHeight;\n  const paddedOptions = useMemo(() => {\n    const array: (string | null)[] = [...options];\n    for (let i = 0; i < visibleRest; i++) {\n      array.unshift(null);\n      array.push(null);\n    }\n    return array;\n  }, [options, visibleRest]);\n\n  const offsets = useMemo(\n    () => [...Array(paddedOptions.length)].map((_, i) => i * itemHeight),\n    [paddedOptions, itemHeight]\n  );\n\n  const currentScrollIndex = useMemo(\n    () => Animated.add(Animated.divide(scrollY, itemHeight), visibleRest),\n    [visibleRest, scrollY, itemHeight]\n  );\n\n  const handleMomentumScrollEnd = (\n    event: NativeSyntheticEvent<NativeScrollEvent>\n  ) => {\n    const offsetY = event.nativeEvent.contentOffset.y;\n    let index = Math.floor(Math.floor(offsetY) / itemHeight);\n    const last = Math.floor(offsetY % itemHeight);\n    if (last > itemHeight / 2) index++;\n\n    if (index !== selectedIndex) {\n      onChange(index);\n    }\n  };\n\n  /**\n   * If selectedIndex is changed from outside (not via onChange) we need to scroll to the specified index.\n   * This ensures that what the user sees as selected in the picker always corresponds to the value state.\n   */\n  useEffect(() => {\n    flatListRef.current?.scrollToIndex({\n      index: selectedIndex,\n      animated: false,\n    });\n  }, [selectedIndex]);\n\n  return (\n    <View\n      style={[styles.container, { height: containerHeight }, containerStyle]}\n      {...containerProps}\n    >\n      <View\n        style={[\n          styles.selectedIndicator,\n          selectedIndicatorStyle,\n          {\n            transform: [{ translateY: -itemHeight / 2 }],\n            height: itemHeight,\n          },\n        ]}\n      />\n      <Animated.FlatList\n        ref={flatListRef}\n        style={styles.scrollView}\n        showsVerticalScrollIndicator={false}\n        onScroll={Animated.event(\n          [{ nativeEvent: { contentOffset: { y: scrollY } } }],\n          { useNativeDriver: true }\n        )}\n        onMomentumScrollEnd={handleMomentumScrollEnd}\n        snapToOffsets={offsets}\n        decelerationRate={decelerationRate}\n        initialScrollIndex={selectedIndex}\n        getItemLayout={(_: string, index: number) => ({\n          length: itemHeight,\n          offset: itemHeight * index,\n          index,\n        })}\n        data={paddedOptions}\n        keyExtractor={(_: string, index: number) => index.toString()}\n        renderItem={({ item, index }: { item: string; index: number }) => (\n          <WheelPickerItem\n            key={`option-${index}`}\n            index={index}\n            option={item}\n            style={itemStyle}\n            textStyle={itemTextStyle}\n            height={itemHeight}\n            currentScrollIndex={currentScrollIndex}\n            rotationFunction={rotationFunction}\n            opacityFunction={opacityFunction}\n            visibleRest={visibleRest}\n          />\n        )}\n      />\n    </View>\n  );\n};\n\nexport default WheelPicker;\n"]}