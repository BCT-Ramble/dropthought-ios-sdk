{"version":3,"sources":["OptionWithHighlight.tsx"],"names":["noop","_id","undefined","iconSource","radio","require","checkbox","CheckBoxIcon","type","checkedColor","checkedStyle","tintColor","styles","checkboxIcon","OptionWithHighlight","id","value","containerStyle","containerStyleFromProps","title","checked","Colors","purple","onPress","fontColor","backgroundColor","dimensionWidthType","onPressHandler","rtl","i18n","dir","GlobalStyle","row","container","flexRowReverse","content","textStyle","text","color","minHeight","language","checkedText","QuestionContentTextSize","checkboxPlaceholderStyle","checkboxPlaceholder","borderRadius","checkboxIconContainer","StyleSheet","create","white","borderWidth","marginBottom","marginTop","paddingBottom","paddingTop","paddingHorizontal","fontWeight","marginHorizontal","marginVertical","width","aspectRatio","borderColor","React","memo"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  StyleSheet,\n  Image,\n  View,\n  Text,\n  TouchableOpacity,\n  ViewStyle,\n} from 'react-native';\n\nimport { useDimensionWidthType } from '../hooks/useWindowDimensions';\nimport GlobalStyle, {\n  Colors,\n  QuestionContentTextSize,\n  opacity15,\n} from '../styles';\nimport i18n from '../translation';\nimport { useTheme } from '../contexts/theme';\n\nconst noop = (_id: any) => undefined;\n\nconst iconSource = {\n  radio: require('../assets/radio-on.png'),\n  checkbox: require('../assets/checkbox-on.png'),\n};\n\ntype CheckBoxIconProps = {\n  type: 'radio' | 'checkbox';\n  checkedColor: string;\n};\n\nconst CheckBoxIcon = ({ type, checkedColor }: CheckBoxIconProps) => {\n  const checkedStyle = {\n    tintColor: checkedColor,\n  };\n  return (\n    <Image\n      style={[styles.checkboxIcon, checkedStyle]}\n      source={iconSource[type]}\n    />\n  );\n};\n\nexport type Props = {\n  type?: 'radio' | 'checkbox';\n  id: any;\n  containerStyle?: ViewStyle;\n  title: string | React.ReactNode;\n  checked: boolean;\n  checkedColor?: string;\n  onPress: (id: any) => void;\n};\n\nfunction OptionWithHighlight({\n  type = 'radio',\n  id: value,\n  containerStyle: containerStyleFromProps,\n  title,\n  checked,\n  checkedColor = Colors.purple,\n  onPress = noop,\n}: Props) {\n  const { fontColor, backgroundColor } = useTheme();\n  const dimensionWidthType = useDimensionWidthType();\n\n  const onPressHandler = () => {\n    onPress && onPress(value);\n  };\n\n  const rtl = i18n.dir() === 'rtl';\n\n  const containerStyle = [\n    GlobalStyle.row,\n    styles.container,\n    {\n      // if checked, background color add opacity\n      // https://css-tricks.com/8-digit-hex-codes/\n      backgroundColor: checked ? opacity15(checkedColor) : backgroundColor,\n    },\n    containerStyleFromProps,\n    rtl && GlobalStyle.flexRowReverse,\n  ];\n\n  let content;\n  if (typeof title === 'string') {\n    const textStyle = [\n      styles.text,\n      { color: fontColor, minHeight: i18n.language === 'te' ? 30 : undefined },\n      checked ? styles.checkedText : {},\n      QuestionContentTextSize[dimensionWidthType],\n    ];\n    content = <Text style={textStyle}>{title}</Text>;\n  } else {\n    content = title;\n  }\n\n  const checkboxPlaceholderStyle = [\n    styles.checkboxPlaceholder,\n    { borderRadius: type === 'radio' ? 10 : 3 },\n  ];\n\n  return (\n    <TouchableOpacity onPress={onPressHandler}>\n      <View style={containerStyle}>\n        <View style={styles.checkboxIconContainer}>\n          {checked ? (\n            <CheckBoxIcon type={type} checkedColor={checkedColor} />\n          ) : (\n            <View style={checkboxPlaceholderStyle} />\n          )}\n        </View>\n        {content}\n      </View>\n    </TouchableOpacity>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: Colors.white,\n    borderRadius: 3,\n    borderWidth: 0,\n    marginBottom: 2,\n    marginTop: 2,\n    paddingBottom: 10,\n    paddingTop: 10,\n    paddingHorizontal: 15,\n  },\n  text: {\n    fontWeight: 'normal',\n    marginHorizontal: 12,\n  },\n  checkedText: {\n    fontWeight: '500',\n  },\n  checkboxIconContainer: {\n    marginVertical: 3,\n  },\n  checkboxIcon: {\n    width: 20,\n    aspectRatio: 1,\n  },\n  checkboxPlaceholder: {\n    width: 20,\n    aspectRatio: 1,\n    borderWidth: 1.5,\n    borderColor: Colors.borderColor,\n    borderRadius: 10,\n  },\n});\n\nexport default React.memo(OptionWithHighlight);\n"]}