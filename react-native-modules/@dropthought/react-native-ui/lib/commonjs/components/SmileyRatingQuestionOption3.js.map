{"version":3,"sources":["SmileyRatingQuestionOption3.tsx"],"names":["SmileyRatingQuestionOption3","survey","pageIndex","question","forgot","onClose","onPrevPage","onNextPage","onFeedback","feedback","answered","answers","answeredValue","parseInt","backgroundColor","themeBackgroundColor","fontColor","colorScheme","windowHeight","Dimensions","get","height","questionId","scale","options","selectedIndex","setSelectedIndex","React","useState","score","setScore","isLoop","setIsLoop","loopLotties","setLoopLotties","transformLotties","setTransformLotties","scoreContainerOpacity","useRef","Animated","Value","current","scoreOpacity","descriptionYAxis","lottieRef","totalScore","Number","renderScore","backgroundColorList","panResponder","PanResponder","create","onStartShouldSetPanResponder","onMoveShouldSetPanResponder","onPanResponderRelease","_","dy","direction","Math","sign","isActionActive","abs","updateScore","scaleLogicList","scaleLogic","scaledIndex","loopList","map","value","scaleKey","String","loopFaceTable","transformList","index","array","fromScale","toScale","key","transformTable","useCallback","number","isAtCoverScreen","newScore","setTimeout","play","setValue","sequence","timing","toValue","duration","useNativeDriver","start","type","dimensionWidthType","isPhone","DimensionWidthType","phone","styles","phoneStyles","tabletStyles","animationBackgroundColor","Colors","white","COLOR_SCHEMES","dark","scoreSelectedStyle","scoreSelected","opacity","color","descStyle","desc","transform","translateY","slashStyle","slash","marginBottom","Platform","OS","scoreTotalStyle","scoreTotal","containerStyle","commonStyles","container","hintContainerStyle","hintContainer","initHintContainer","hintTextStyle","hintText","lottieContainer","lottieContent","scoreContainer","scoreText","panHandlers","contentContainer","i18n","t","surveyProperty","hexCode","pageOrder","length","StyleSheet","flex","flexDirection","justifyContent","alignItems","paddingBottom","width","paddingHorizontal","fontSize","fontWeight","textAlign","marginTop","smileyRatingScoreGray"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\nimport {\n  View,\n  StyleSheet,\n  Text,\n  Animated,\n  Dimensions,\n  PanResponder,\n  Platform,\n} from 'react-native';\nimport { Colors } from '../styles';\nimport i18n from '../translation';\nimport {\n  DimensionWidthType,\n  useDimensionWidthType,\n} from '../hooks/useWindowDimensions';\nimport type {\n  Feedback as OriginFeedback,\n  Question as OriginQuestion,\n  Survey,\n} from '../data';\nimport LottieView from 'lottie-react-native';\nimport SurveyFooter from '../containers/SurveyFooter';\nimport SurveyHeader from '../containers/SurveyHeader';\nimport MandatoryTitle from './MandatoryTitle';\nimport { useTheme, COLOR_SCHEMES } from '../contexts/theme';\nimport {\n  scaleLogic,\n  option3LoopFaceTable as loopFaceTable,\n  option3TransformTable as transformTable,\n} from '../utils/data';\nimport { isNil } from 'ramda';\n\ntype Feedback = OriginFeedback & {\n  answers: string[];\n};\n\ntype Question = OriginQuestion & {\n  options: string[];\n  scale: string;\n};\n\ntype Props = {\n  survey: Survey;\n  pageIndex: number;\n  question: Question;\n  forgot: boolean;\n  onClose: () => void;\n  onPrevPage: () => void;\n  onNextPage: () => void;\n  onFeedback: ({\n    questionId,\n    answers,\n    type,\n  }: {\n    questionId: string;\n    answers: number[];\n    type: string;\n  }) => void;\n  feedback: Feedback;\n};\n\nconst SmileyRatingQuestionOption3 = ({\n  survey,\n  pageIndex,\n  question,\n  forgot,\n  onClose,\n  onPrevPage,\n  onNextPage,\n  onFeedback,\n  feedback,\n}: Props) => {\n  const answered =\n    feedback &&\n    feedback.answers &&\n    !isNil(feedback.answers[0]) &&\n    typeof feedback.answers[0] === 'number';\n  const answeredValue: number = answered\n    ? parseInt(feedback.answers[0], 10)\n    : 0;\n\n  const {\n    backgroundColor: themeBackgroundColor,\n    fontColor,\n    colorScheme,\n  } = useTheme();\n\n  const windowHeight = Dimensions.get('window').height;\n  const { questionId, scale, options } = question;\n\n  const [selectedIndex, setSelectedIndex] = React.useState<number>(\n    answered ? answeredValue : 0\n  );\n  const [score, setScore] = React.useState<number>(\n    answered ? answeredValue : -1\n  );\n  const [isLoop, setIsLoop] = React.useState<boolean>(true);\n  const [loopLotties, setLoopLotties] = React.useState<string[]>([]);\n  const [transformLotties, setTransformLotties] = React.useState<string[]>([]);\n\n  const scoreContainerOpacity = React.useRef(\n    new Animated.Value(answered ? 1 : 0)\n  ).current;\n  const scoreOpacity = React.useRef(\n    new Animated.Value(answered ? 1 : 0)\n  ).current;\n  const descriptionYAxis = React.useRef(\n    new Animated.Value(answered ? 1 : windowHeight / 2 - 246 + 37)\n  ).current;\n  // 37 -> one text line height\n  // 246 -> Padding Vertical 123\n\n  const lottieRef = React.useRef<LottieView>();\n\n  const totalScore = Number(scale);\n  const renderScore = score + 1;\n\n  const backgroundColorList = [\n    '#fef6f6', //red\n    '#fff9f9', //red\n    '#f3f9fe', //blue\n    '#f5fdfb', //green\n    '#f3fcfa', //green\n  ];\n\n  const panResponder = PanResponder.create({\n    onStartShouldSetPanResponder: () => true,\n    onMoveShouldSetPanResponder: () => true,\n    onPanResponderRelease: (_, { dy }) => {\n      const direction = Math.sign(dy);\n      const isActionActive = Math.abs(dy) > 100;\n      if (isActionActive) {\n        // Add isLoop to avoid when animation transform and user tap the LottieView.\n        if (direction === 1 && score > 0 && isLoop) {\n          updateScore(-1);\n        } else if (direction !== 1 && renderScore < totalScore) {\n          updateScore(1);\n        }\n      }\n    },\n  });\n  // choose which scale logic we want to use.\n  const scaleLogicList = scaleLogic[scale];\n  const scaledIndex = scaleLogicList[selectedIndex];\n\n  useEffect(() => {\n    const loopList = scaleLogicList.map((value) => {\n      const scaleKey = String(value + 1);\n      return loopFaceTable.get(scaleKey);\n    });\n\n    const transformList = scaleLogicList.map((value, index, array) => {\n      if (index === 0) return '';\n      const fromScale = String(array[index - 1] + 1);\n      const toScale = String(value + 1);\n      const key = `${fromScale}-${toScale}`;\n      return transformTable.get(key);\n    });\n\n    setLoopLotties(loopList);\n    setTransformLotties(transformList);\n  }, [scaleLogicList]);\n\n  const updateScore = React.useCallback(\n    (number) => {\n      const isAtCoverScreen = score === -1;\n      const newScore = score + number;\n      setScore(newScore);\n\n      if (!isAtCoverScreen) {\n        setSelectedIndex(newScore);\n        if (number > 0) {\n          setIsLoop(false);\n        } else {\n          setIsLoop(true);\n          setTimeout(() => {\n            lottieRef.current?.play();\n          }, 100);\n        }\n      }\n\n      //animtaion--\n      scoreOpacity.setValue(0);\n      if (isAtCoverScreen) {\n        Animated.sequence([\n          Animated.timing(descriptionYAxis, {\n            toValue: 0,\n            duration: 500,\n            useNativeDriver: true,\n          }),\n          Animated.timing(scoreContainerOpacity, {\n            toValue: 1,\n            duration: 500,\n            useNativeDriver: true,\n          }),\n          Animated.timing(scoreOpacity, {\n            toValue: 1,\n            duration: 500,\n            useNativeDriver: true,\n          }),\n        ]).start();\n      } else {\n        Animated.timing(scoreOpacity, {\n          toValue: 1,\n          duration: 500,\n          useNativeDriver: true,\n        }).start();\n      }\n      //animtaion--\n\n      onFeedback({\n        questionId,\n        answers: [newScore],\n        type: 'rating',\n      });\n    },\n    [\n      score,\n      scoreOpacity,\n      onFeedback,\n      questionId,\n      descriptionYAxis,\n      scoreContainerOpacity,\n    ]\n  );\n\n  const dimensionWidthType = useDimensionWidthType();\n  const isPhone = dimensionWidthType === DimensionWidthType.phone;\n  const styles = isPhone ? phoneStyles : tabletStyles;\n\n  const animationBackgroundColor =\n    score >= 0 ? backgroundColorList[scaledIndex] : Colors.white;\n\n  const backgroundColor =\n    colorScheme === COLOR_SCHEMES.dark\n      ? themeBackgroundColor\n      : animationBackgroundColor;\n\n  const scoreSelectedStyle = [\n    styles.scoreSelected,\n    { opacity: scoreOpacity, color: fontColor },\n  ];\n\n  const descStyle = [\n    styles.desc,\n    {\n      transform: [{ translateY: descriptionYAxis }],\n      opacity: scoreContainerOpacity,\n      color: fontColor,\n    },\n  ];\n\n  const slashStyle = [\n    styles.slash,\n    {\n      opacity: scoreContainerOpacity,\n      marginBottom: Platform.OS === 'ios' ? 10 : -1,\n    },\n  ];\n\n  const scoreTotalStyle = [\n    styles.scoreTotal,\n    {\n      opacity: scoreContainerOpacity,\n      marginBottom: Platform.OS === 'ios' ? 4 : -3,\n    },\n  ];\n\n  const containerStyle = [\n    commonStyles.container,\n    {\n      backgroundColor,\n    },\n  ];\n\n  const hintContainerStyle =\n    score >= 0 ? commonStyles.hintContainer : commonStyles.initHintContainer;\n\n  const hintTextStyle = [commonStyles.hintText, { color: fontColor }];\n\n  useEffect(() => {\n    if (isLoop) {\n      setTimeout(() => {\n        lottieRef.current?.play();\n      }, 100);\n    }\n  }, [isLoop]);\n\n  const lottieContainer = isLoop ? (\n    <View style={commonStyles.lottieContainer}>\n      <LottieView\n        // @ts-ignore\n        ref={lottieRef}\n        source={loopLotties[selectedIndex]}\n        autoPlay\n        style={commonStyles.lottieContent}\n        loop\n        speed={0.5}\n      />\n    </View>\n  ) : (\n    <View style={commonStyles.lottieContainer}>\n      <LottieView\n        source={transformLotties[selectedIndex]}\n        autoPlay\n        style={commonStyles.lottieContent}\n        loop={false}\n        onAnimationFinish={() => setIsLoop(true)}\n        speed={0.5}\n      />\n    </View>\n  );\n\n  const scoreContainer = (\n    <View style={commonStyles.scoreContainer}>\n      <View style={commonStyles.scoreText}>\n        <Animated.Text style={scoreSelectedStyle}>{renderScore}</Animated.Text>\n        <Animated.Text style={slashStyle}>{'/'}</Animated.Text>\n        <Animated.Text style={scoreTotalStyle}>{totalScore}</Animated.Text>\n      </View>\n      <Animated.Text style={descStyle}>{options[selectedIndex]}</Animated.Text>\n    </View>\n  );\n\n  return (\n    <>\n      <SurveyHeader\n        survey={survey}\n        pageIndex={pageIndex}\n        backgroundColor={backgroundColor}\n        onClose={onClose}\n      />\n      <View style={containerStyle} {...panResponder.panHandlers}>\n        <View style={commonStyles.contentContainer}>\n          <MandatoryTitle question={question} forgot={forgot} />\n          {score >= 0 ? (\n            <>\n              {lottieContainer}\n              {scoreContainer}\n            </>\n          ) : null}\n          <View style={hintContainerStyle}>\n            <Text style={hintTextStyle}>\n              {i18n.t('option3HintDescription:title')}\n            </Text>\n          </View>\n        </View>\n      </View>\n      <SurveyFooter\n        surveyColor={survey.surveyProperty.hexCode}\n        isFirstPage={pageIndex === 0}\n        isLastPage={pageIndex === survey.pageOrder.length - 1}\n        onPrevPage={onPrevPage}\n        onNextPage={onNextPage}\n        backgroundColor={backgroundColor}\n      />\n    </>\n  );\n};\n\nexport default SmileyRatingQuestionOption3;\n\nconst commonStyles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: Colors.white,\n    flexDirection: 'column',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    paddingBottom: 28,\n  },\n  contentContainer: {\n    flex: 1,\n    width: '100%',\n    paddingHorizontal: 42,\n    flexDirection: 'column',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n  },\n  hintContainer: {\n    width: '100%',\n  },\n  initHintContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    width: '100%',\n  },\n  hintText: {\n    fontSize: 16,\n    fontWeight: '500',\n    textAlign: 'center',\n  },\n  lottieContainer: {\n    width: '100%',\n    alignItems: 'center',\n    justifyContent: 'center',\n    marginTop: 42,\n  },\n  lottieContent: {\n    width: '60%',\n  },\n  scoreContainer: {\n    flex: 1,\n    width: '100%',\n    alignItems: 'center',\n    justifyContent: 'center',\n    height: '100%',\n  },\n  scoreText: {\n    flexDirection: 'row',\n    alignItems: 'flex-end',\n    height: 61,\n    marginBottom: 10,\n  },\n});\n\nconst phoneStyles = StyleSheet.create({\n  desc: {\n    fontSize: 20,\n    fontWeight: '600',\n    textAlign: 'center',\n  },\n  scoreSelected: {\n    fontSize: 50,\n    textAlign: 'center',\n    alignItems: 'baseline',\n  },\n  scoreTotal: {\n    fontSize: 37,\n    color: Colors.smileyRatingScoreGray,\n  },\n  slash: {\n    fontSize: 37,\n    color: Colors.smileyRatingScoreGray,\n  },\n});\n\nconst tabletStyles = StyleSheet.create({\n  desc: {\n    fontSize: 20,\n    fontWeight: '600',\n    textAlign: 'center',\n  },\n  scoreSelected: {\n    fontSize: 74,\n    textAlign: 'center',\n    alignItems: 'baseline',\n  },\n  scoreTotal: {\n    fontSize: 55,\n    color: Colors.smileyRatingScoreGray,\n  },\n  slash: {\n    fontSize: 37,\n    color: Colors.smileyRatingScoreGray,\n  },\n});\n"]}