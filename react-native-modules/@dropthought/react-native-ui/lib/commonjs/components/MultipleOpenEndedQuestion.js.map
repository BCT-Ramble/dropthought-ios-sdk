{"version":3,"sources":["MultipleOpenEndedQuestion.tsx"],"names":["ScrollView","Platform","OS","KeyboardAvoidingScrollView","RNScrollView","RowComponent","question","questionRow","feedback","selectedAnswerState","updateFeedback","themeColor","index","questionTitle","exampleMetadataText","metaDataType","responseErrorText","scale","phiData","setSelectedAnswer","metadataTypeKeyboard","metadataTypeAutoCapitalize","text","isFocus","hasEdited","onChangeTextHandler","onEndEditingHandler","onFocus","onBlur","colorScheme","fontColor","backgroundColor","opacityThemeColor","isDark","COLOR_SCHEMES","dark","isValid","metaDataTypeList","isFoucsAndInValid","onChangeText","textInput","previous","answers","map","value","i","rowContainerStyle","styles","rowContainer","Colors","rankingContainerBgDark","white","rowTitleTextStyle","rowTitleText","color","hippaText","i18n","t","inputBorderColor","warningRed","rankingBorderDark","bottomTextComponent","responseTextWarning","responseText","inputStyle","input","borderColor","rowContent","rowSubTitleText","rowBottomContent","GlobalStyle","flex1","inputLengthText","textAlignRight","length","MultipleOpenEndedQuestion","survey","onFeedback","forgot","questionRows","handleErrorHint","rowList","toString","container","mandatoryErrorMessage","title","React","memo","StyleSheet","create","flex","paddingHorizontal","marginBottom","marginHorizontal","paddingVertical","borderRadius","fontSize","fontWeight","openQuestionSubTitle","flexDirection","justifyContent","borderWidth","height","marginLeft"],"mappings":"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","sourcesContent":["import React, { useMemo } from 'react';\nimport {\n  View,\n  StyleSheet,\n  Text,\n  TextInput,\n  Platform,\n  ScrollView as RNScrollView,\n} from 'react-native';\nimport { KeyboardAvoidingScrollView } from './KeyboardAvoidingView';\nimport GlobalStyle, { Colors, addOpacityToColor } from '../styles';\nimport MandatoryTitle from './MandatoryTitle';\nimport type { Question, Feedback, Survey } from '../data';\nimport useMultipleOpenEnded from '../hooks/useMultipleOpenEnded';\nimport useOpenEnded from '../hooks/useOpenEnded';\nimport { metaDataFormatValidator } from '../utils/data';\nimport type { QuestionRowItem } from '../hooks/useMultipleOpenEnded';\nimport i18n from '../translation';\nimport { useTheme, COLOR_SCHEMES } from '../contexts/theme';\n\nconst ScrollView =\n  Platform.OS === 'ios' ? KeyboardAvoidingScrollView : RNScrollView;\n\ntype Props = {\n  survey: Survey;\n  question: Question;\n  onFeedback: (feedback: Feedback) => void;\n  feedback: Feedback;\n  forgot: boolean;\n  themeColor: string;\n};\n\ntype RowComponentProps = {\n  question: Question;\n  questionRow: QuestionRowItem;\n  feedback: Feedback;\n  selectedAnswerState: [\n    string[],\n    React.Dispatch<React.SetStateAction<string[]>>\n  ];\n  updateFeedback: (answers: string[]) => void;\n  themeColor: string;\n  index: number;\n};\n\nconst RowComponent = ({\n  question,\n  questionRow,\n  feedback,\n  selectedAnswerState,\n  updateFeedback,\n  themeColor,\n  index,\n}: RowComponentProps) => {\n  const {\n    questionTitle,\n    exampleMetadataText,\n    metaDataType = 'String',\n    responseErrorText,\n    scale,\n    phiData,\n  } = questionRow;\n  const [, setSelectedAnswer] = selectedAnswerState;\n  const {\n    metadataTypeKeyboard,\n    metadataTypeAutoCapitalize,\n    text,\n    isFocus,\n    hasEdited,\n    onChangeTextHandler,\n    onEndEditingHandler,\n    onFocus,\n    onBlur,\n  } = useOpenEnded(feedback, index);\n  const { colorScheme, fontColor, backgroundColor } = useTheme();\n  const opacityThemeColor = addOpacityToColor(themeColor, 0.1);\n  const isDark = colorScheme === COLOR_SCHEMES.dark;\n\n  const isValid = metaDataFormatValidator(\n    text,\n    question?.metaDataTypeList?.[index]\n  );\n\n  const isFoucsAndInValid = useMemo(\n    () => isFocus || (!isValid && hasEdited),\n    [hasEdited, isFocus, isValid]\n  );\n\n  const onChangeText = (textInput: string) => {\n    onChangeTextHandler(textInput);\n    setSelectedAnswer((previous) => {\n      const answers = previous.map((value, i) =>\n        i === index ? textInput : value\n      );\n      updateFeedback(answers);\n      return answers;\n    });\n  };\n\n  const rowContainerStyle = [\n    styles.rowContainer,\n    {\n      backgroundColor: isFocus\n        ? isDark\n          ? Colors.rankingContainerBgDark\n          : addOpacityToColor(themeColor || Colors.white, 0.1)\n        : backgroundColor,\n    },\n  ];\n  const rowTitleTextStyle = [styles.rowTitleText, { color: fontColor }];\n\n  const hippaText = i18n.t('survey:hippa-hint');\n\n  const inputBorderColor = useMemo(() => {\n    if (!isValid && hasEdited) {\n      return Colors.warningRed;\n    } else if (isFocus) {\n      return themeColor;\n    } else {\n      return isDark ? Colors.rankingBorderDark : Colors.white;\n    }\n  }, [hasEdited, isDark, isFocus, isValid, themeColor]);\n\n  const bottomTextComponent = useMemo(() => {\n    if (!isValid && hasEdited) {\n      return (\n        <Text style={styles.responseTextWarning}>{responseErrorText}</Text>\n      );\n    } else if (isFocus) {\n      return (\n        <Text style={styles.responseText}>{phiData ? hippaText : ''}</Text>\n      );\n    } else {\n      return null;\n    }\n  }, [hasEdited, hippaText, isFocus, isValid, phiData, responseErrorText]);\n\n  const inputStyle = [\n    styles.input,\n    {\n      backgroundColor: isDark ? Colors.rankingBorderDark : opacityThemeColor,\n      borderColor: inputBorderColor,\n      color: fontColor,\n    },\n  ];\n\n  return (\n    <View style={rowContainerStyle}>\n      <Text style={rowTitleTextStyle}>{questionTitle}</Text>\n      <View style={styles.rowContent}>\n        {exampleMetadataText && isFoucsAndInValid ? (\n          <Text style={styles.rowSubTitleText}>{exampleMetadataText}</Text>\n        ) : null}\n        <TextInput\n          style={inputStyle}\n          onChangeText={onChangeText}\n          onEndEditing={onEndEditingHandler}\n          value={text}\n          onFocus={onFocus}\n          onBlur={onBlur}\n          maxLength={scale}\n          keyboardType={metadataTypeKeyboard(metaDataType)}\n          autoCapitalize={metadataTypeAutoCapitalize(metaDataType)}\n        />\n        <View style={styles.rowBottomContent}>\n          <View style={GlobalStyle.flex1}>{bottomTextComponent}</View>\n          {isFoucsAndInValid ? (\n            <Text style={[styles.inputLengthText, GlobalStyle.textAlignRight]}>\n              {`${scale - text.length}/${scale}`}\n            </Text>\n          ) : null}\n        </View>\n      </View>\n    </View>\n  );\n};\n\nconst MultipleOpenEndedQuestion = ({\n  survey,\n  question,\n  onFeedback,\n  feedback,\n  forgot,\n  themeColor,\n}: Props) => {\n  const { questionRows, selectedAnswerState, handleErrorHint, updateFeedback } =\n    useMultipleOpenEnded(question, feedback, onFeedback);\n  const rowList = questionRows.map((questionRow, index) => (\n    <RowComponent\n      question={question}\n      questionRow={questionRow}\n      feedback={feedback}\n      selectedAnswerState={selectedAnswerState}\n      updateFeedback={updateFeedback}\n      index={index}\n      themeColor={themeColor}\n      key={index.toString()}\n    />\n  ));\n\n  return (\n    <ScrollView extraAvoidingSpace={30} style={styles.container}>\n      <MandatoryTitle\n        forgot={false}\n        mandatoryErrorMessage={survey.mandatoryErrorMessage}\n        question={question}\n        style={styles.title}\n        invalidMessage={handleErrorHint(forgot)}\n      />\n      {rowList}\n    </ScrollView>\n  );\n};\n\nexport default React.memo(MultipleOpenEndedQuestion);\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    paddingHorizontal: 19,\n  },\n  title: {\n    marginBottom: 16,\n    marginHorizontal: 11,\n  },\n  rowContainer: {\n    flex: 1,\n    paddingVertical: 16,\n    paddingHorizontal: 24,\n    borderRadius: 4,\n  },\n  rowTitleText: {\n    fontSize: 15,\n    fontWeight: '400',\n    marginBottom: 12,\n  },\n  rowSubTitleText: {\n    fontSize: 12,\n    fontWeight: '500',\n    color: Colors.openQuestionSubTitle,\n    marginBottom: 8,\n  },\n  rowContent: {\n    flex: 8,\n  },\n  rowBottomContent: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n  },\n  input: {\n    borderColor: Colors.borderColor,\n    borderWidth: 1,\n    height: 50,\n    paddingHorizontal: 14,\n    borderRadius: 8,\n    fontSize: 15,\n    fontWeight: '400',\n    marginBottom: 8,\n  },\n  inputLengthText: {\n    fontSize: 12,\n    fontWeight: '500',\n    color: Colors.openQuestionSubTitle,\n    marginLeft: 16,\n  },\n  responseText: {\n    fontSize: 12,\n    fontWeight: '500',\n    color: Colors.openQuestionSubTitle,\n  },\n  responseTextWarning: {\n    fontSize: 12,\n    fontWeight: '500',\n    color: Colors.warningRed,\n  },\n});\n"]}