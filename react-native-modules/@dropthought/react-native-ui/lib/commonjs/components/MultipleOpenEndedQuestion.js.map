{"version":3,"sources":["MultipleOpenEndedQuestion.tsx"],"names":["ScrollView","Platform","OS","KeyboardAvoidingScrollView","RNScrollView","RowComponent","question","questionRow","feedback","selectedAnswerState","updateFeedback","themeColor","index","questionTitle","exampleMetadataText","metaDataType","responseErrorText","scale","phiData","setSelectedAnswer","metadataTypeKeyboard","metadataTypeAutoCapitalize","text","isFocus","hasEdited","onChangeTextHandler","onEndEditingHandler","onFocus","onBlur","colorScheme","fontColor","opacityThemeColor","isDark","COLOR_SCHEMES","dark","isValid","metaDataTypeList","isFoucsAndInValid","onChangeText","textInput","previous","answers","map","value","i","rowContainerStyle","styles","rowContainer","backgroundColor","Colors","rankingContainerBgDark","white","undefined","rowTitleTextStyle","rowTitleText","color","hippaText","i18n","t","inputBorderColor","bottomTextComponent","warningRed","errorTextStyle","responseText","descTextStyle","openQuestionSubTitle","rankingBorderDark","inputStyle","input","borderColor","rowContent","rowSubTitleText","rowBottomContent","GlobalStyle","flex1","inputLengthText","textAlignRight","length","MultipleOpenEndedQuestion","onFeedback","forgot","questionRows","handleErrorHint","rowList","toString","container","title","React","memo","StyleSheet","create","flex","paddingHorizontal","marginBottom","flexDirection","paddingVertical","marginHorizontal","borderRadius","fontSize","fontWeight","justifyContent","borderWidth","height"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {\n  View,\n  StyleSheet,\n  Text,\n  TextInput,\n  Platform,\n  ScrollView as RNScrollView,\n} from 'react-native';\nimport { KeyboardAvoidingScrollView } from './KeyboardAvoidingView';\nimport GlobalStyle, { Colors, addOpacityToColor } from '../styles';\nimport MandatoryTitle from './MandatoryTitle';\nimport type { Question, Feedback } from '../data';\nimport useMultipleOpenEnded from '../hooks/useMultipleOpenEnded';\nimport useOpenEnded from '../hooks/useOpenEnded';\nimport { metaDataFormatValidator } from '../utils/data';\nimport type { QuestionRowItem } from '../hooks/useMultipleOpenEnded';\nimport i18n from '../translation';\nimport { useTheme, COLOR_SCHEMES } from '../contexts/theme';\n\nconst ScrollView =\n  Platform.OS === 'ios' ? KeyboardAvoidingScrollView : RNScrollView;\n\ntype Props = {\n  question: Question;\n  onFeedback: (feedback: Feedback) => void;\n  feedback: Feedback;\n  forgot: boolean;\n  themeColor: string;\n};\n\ntype RowComponentProps = {\n  question: Question;\n  questionRow: QuestionRowItem;\n  feedback: Feedback;\n  selectedAnswerState: [\n    string[],\n    React.Dispatch<React.SetStateAction<string[]>>\n  ];\n  updateFeedback: (answers: string[]) => void;\n  themeColor: string;\n  index: number;\n};\n\nconst RowComponent = ({\n  question,\n  questionRow,\n  feedback,\n  selectedAnswerState,\n  updateFeedback,\n  themeColor,\n  index,\n}: RowComponentProps) => {\n  const {\n    questionTitle,\n    exampleMetadataText,\n    metaDataType = 'String',\n    responseErrorText,\n    scale,\n    phiData,\n  } = questionRow;\n  const [, setSelectedAnswer] = selectedAnswerState;\n  const {\n    metadataTypeKeyboard,\n    metadataTypeAutoCapitalize,\n    text,\n    isFocus,\n    hasEdited,\n    onChangeTextHandler,\n    onEndEditingHandler,\n    onFocus,\n    onBlur,\n  } = useOpenEnded(feedback, index);\n  const { colorScheme, fontColor } = useTheme();\n  const opacityThemeColor = addOpacityToColor(themeColor, 0.1);\n  const isDark = colorScheme === COLOR_SCHEMES.dark;\n\n  const isValid = metaDataFormatValidator(\n    text,\n    question?.metaDataTypeList?.[index]\n  );\n\n  const isFoucsAndInValid = isFocus || (!isValid && hasEdited);\n  const onChangeText = (textInput: string) => {\n    onChangeTextHandler(textInput);\n    setSelectedAnswer((previous) => {\n      const answers = previous.map((value, i) =>\n        i === index ? textInput : value\n      );\n      updateFeedback(answers);\n      return answers;\n    });\n  };\n\n  const rowContainerStyle = [\n    styles.rowContainer,\n    {\n      backgroundColor: isFocus\n        ? isDark\n          ? Colors.rankingContainerBgDark\n          : addOpacityToColor(themeColor || Colors.white, 0.1)\n        : undefined,\n    },\n  ];\n  const rowTitleTextStyle = [styles.rowTitleText, { color: fontColor }];\n\n  const hippaText = i18n.t('survey:hippa-hint');\n\n  let inputBorderColor;\n  let bottomTextComponent;\n  if (!isValid && hasEdited) {\n    inputBorderColor = Colors.warningRed;\n    const errorTextStyle = [\n      styles.responseText,\n      {\n        color: Colors.warningRed,\n      },\n    ];\n    bottomTextComponent = (\n      <Text style={errorTextStyle}>{responseErrorText}</Text>\n    );\n  } else if (isFocus) {\n    inputBorderColor = themeColor;\n    const descTextStyle = [\n      styles.responseText,\n      {\n        color: Colors.openQuestionSubTitle,\n      },\n    ];\n    bottomTextComponent = (\n      <Text style={descTextStyle}>{phiData ? hippaText : ''}</Text>\n    );\n  } else {\n    inputBorderColor = isDark ? Colors.rankingBorderDark : Colors.white;\n    bottomTextComponent = null;\n  }\n  const inputStyle = [\n    styles.input,\n    {\n      backgroundColor: isDark ? Colors.rankingBorderDark : opacityThemeColor,\n      borderColor: inputBorderColor,\n      color: fontColor,\n    },\n  ];\n  return (\n    <View style={rowContainerStyle}>\n      <View>\n        <Text style={rowTitleTextStyle}>{questionTitle}</Text>\n      </View>\n      <View style={styles.rowContent}>\n        {exampleMetadataText && isFoucsAndInValid ? (\n          <Text style={styles.rowSubTitleText}>{exampleMetadataText}</Text>\n        ) : null}\n        <TextInput\n          style={inputStyle}\n          onChangeText={onChangeText}\n          onEndEditing={onEndEditingHandler}\n          value={text}\n          onFocus={onFocus}\n          onBlur={onBlur}\n          maxLength={scale}\n          keyboardType={metadataTypeKeyboard(metaDataType)}\n          autoCapitalize={metadataTypeAutoCapitalize(metaDataType)}\n        />\n        <View style={styles.rowBottomContent}>\n          <View style={GlobalStyle.flex1}>{bottomTextComponent}</View>\n          {isFoucsAndInValid ? (\n            <Text style={[styles.inputLengthText, GlobalStyle.textAlignRight]}>\n              {`${scale - text.length}/${scale}`}\n            </Text>\n          ) : null}\n        </View>\n      </View>\n    </View>\n  );\n};\n\nconst MultipleOpenEndedQuestion = ({\n  question,\n  onFeedback,\n  feedback,\n  forgot,\n  themeColor,\n}: Props) => {\n  const { questionRows, selectedAnswerState, handleErrorHint, updateFeedback } =\n    useMultipleOpenEnded(question, feedback, onFeedback);\n  const rowList = questionRows.map((questionRow, index) => (\n    <RowComponent\n      question={question}\n      questionRow={questionRow}\n      feedback={feedback}\n      selectedAnswerState={selectedAnswerState}\n      updateFeedback={updateFeedback}\n      index={index}\n      themeColor={themeColor}\n      key={index.toString()}\n    />\n  ));\n\n  return (\n    <ScrollView extraAvoidingSpace={30} style={styles.container}>\n      <MandatoryTitle\n        forgot={false}\n        question={question}\n        style={styles.title}\n        invalidMessage={handleErrorHint(forgot)}\n      />\n      {rowList}\n    </ScrollView>\n  );\n};\n\nexport default React.memo(MultipleOpenEndedQuestion);\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    paddingHorizontal: 30,\n  },\n  title: {\n    marginBottom: 16,\n  },\n  rowContainer: {\n    flexDirection: 'column',\n    flex: 1,\n    paddingVertical: 16,\n    paddingHorizontal: 20,\n    marginHorizontal: -20,\n    borderRadius: 4,\n  },\n  rowTitleText: {\n    fontSize: 15,\n    fontWeight: '400',\n    marginBottom: 12,\n  },\n  rowSubTitleText: {\n    fontSize: 12,\n    fontWeight: '500',\n    color: Colors.openQuestionSubTitle,\n    marginBottom: 8,\n  },\n  rowContent: {\n    flex: 8,\n  },\n  rowBottomContent: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n  },\n  input: {\n    borderColor: Colors.borderColor,\n    borderWidth: 1,\n    height: 50,\n    paddingHorizontal: 14,\n    borderRadius: 8,\n    fontSize: 15,\n    fontWeight: '400',\n    marginBottom: 8,\n  },\n  inputLengthText: {\n    fontSize: 12,\n    fontWeight: '500',\n    color: Colors.openQuestionSubTitle,\n  },\n  responseText: {\n    fontSize: 12,\n    fontWeight: '500',\n  },\n});\n"]}