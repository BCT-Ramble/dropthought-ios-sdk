{"version":3,"sources":["OtherOptionWithHighlight.tsx"],"names":["useFocus","onBlur","onFocus","isFocused","setIsFocused","React","useState","onFocusHandler","useCallback","onBlurHandler","OtherOptionWithHighlightProps","props","id","checked","textValue","onChangeValue","checkedColor","question","otherText","otherTextLabel","questionBrand","fontColor","dimensionWidthType","inputRef","useRef","value","trim","length","focusProps","onPressHandler","current","focus","onChangeTextHandler","text","rtl","i18n","dir","useEffect","hideSubscription","Keyboard","addListener","blur","remove","inputStyle","styles","textInput","color","minHeight","language","undefined","Platform","select","ios","paddingVertical","GlobalStyles","textAlignRight","borderBottomColor","QuestionContentTextSize","textInputContainer","flexRowReverse","checkedOtherText","Colors","inputPlaceholder","transparent","container","StyleSheet","create","paddingBottom","paddingTop","fontWeight","marginHorizontal","flex","fontStyle","letterSpacing","textAlign","textAlignVertical","borderBottomWidth","alignItems","flexDirection"],"mappings":"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","sourcesContent":["/**\n * @description Option with a TextInput, this is for other option in multi-choice/single-choice question\n */\nimport * as React from 'react';\nimport {\n  StyleSheet,\n  TextInput,\n  View,\n  Text,\n  Platform,\n  Keyboard,\n} from 'react-native';\n\nimport GlobalStyles, { Colors, QuestionContentTextSize } from '../styles';\nimport i18n from '../translation';\nimport OptionWithHighlight, {\n  Props as OptionWithHighlightProps,\n} from './OptionWithHighlight';\nimport { useDimensionWidthType } from '../hooks/useWindowDimensions';\nimport { useTheme } from '../contexts/theme';\nimport type { Question } from '../data';\n\nconst useFocus = (onBlur: () => void, onFocus: () => void) => {\n  const [isFocused, setIsFocused] = React.useState(false);\n  const onFocusHandler = React.useCallback(() => {\n    onFocus && onFocus();\n    setIsFocused(true);\n  }, [onFocus]);\n  const onBlurHandler = React.useCallback(() => {\n    onBlur && onBlur();\n    setIsFocused(false);\n  }, [onBlur]);\n  return {\n    isFocused,\n    onFocus: onFocusHandler,\n    onBlur: onBlurHandler,\n  };\n};\n\ntype Props = OptionWithHighlightProps & {\n  textValue: string | undefined;\n  onChangeValue: (\n    id: any,\n    value: { checked: boolean; value: string | undefined }\n  ) => void;\n  question: Question;\n};\n\nfunction OtherOptionWithHighlightProps(props: Props) {\n  const { id, checked, textValue, onChangeValue, checkedColor, question } =\n    props;\n  const { otherText = '', otherTextLabel, questionBrand = '' } = question;\n  const { fontColor } = useTheme();\n\n  const dimensionWidthType = useDimensionWidthType();\n  const inputRef = React.useRef<TextInput>(null);\n\n  // return checked as true when focus\n  const onFocusHandler = () => {\n    onChangeValue(id, {\n      value: textValue,\n      checked: true,\n    });\n  };\n\n  // return checked as false, if the textValue is empty\n  const onBlurHandler = () => {\n    if (!textValue || textValue.trim().length <= 0) {\n      onChangeValue(id, {\n        value: '',\n        checked: false,\n      });\n    }\n  };\n  const { isFocused, ...focusProps } = useFocus(onBlurHandler, onFocusHandler);\n\n  // when the option is pressed, call focus if current checked is false\n  const onPressHandler = () => {\n    if (inputRef.current && !checked) {\n      inputRef.current.focus();\n    } else {\n      // toggle checked value when pressing\n      onChangeValue(id, {\n        value: textValue,\n        checked: !checked,\n      });\n    }\n  };\n\n  // when text input is changed, return the text\n  const onChangeTextHandler = (text: string) =>\n    onChangeValue &&\n    onChangeValue(id, {\n      checked: true,\n      value: text,\n    });\n\n  const rtl = i18n.dir() === 'rtl';\n\n  React.useEffect(() => {\n    const hideSubscription = Keyboard.addListener('keyboardDidHide', () => {\n      inputRef.current?.blur();\n    });\n\n    return () => {\n      hideSubscription.remove();\n    };\n  }, []);\n\n  const inputStyle = [\n    styles.textInput,\n    {\n      color: fontColor,\n      minHeight: i18n.language === 'te' ? 50 : undefined,\n      ...Platform.select({\n        ios: {\n          paddingVertical: i18n.language === 'te' ? undefined : 13,\n        },\n      }),\n    },\n    rtl && GlobalStyles.textAlignRight,\n    isFocused\n      ? {\n          borderBottomColor: checkedColor,\n        }\n      : {},\n    QuestionContentTextSize[dimensionWidthType],\n  ];\n\n  const textInput = (\n    <View\n      style={[styles.textInputContainer, rtl && GlobalStyles.flexRowReverse]}\n    >\n      <Text\n        style={[\n          styles.otherText,\n          { color: fontColor },\n          checked ? styles.checkedOtherText : {},\n          QuestionContentTextSize[dimensionWidthType],\n        ]}\n      >\n        {otherTextLabel}\n      </Text>\n      <TextInput\n        ref={inputRef}\n        style={inputStyle}\n        placeholder={\n          otherText.length > 0\n            ? otherText\n            : questionBrand.length > 0\n            ? questionBrand\n            : otherText\n        }\n        placeholderTextColor={Colors.inputPlaceholder}\n        onChangeText={onChangeTextHandler}\n        underlineColorAndroid={Colors.transparent}\n        selectionColor={checkedColor}\n        value={textValue}\n        maxLength={50}\n        {...focusProps}\n      />\n    </View>\n  );\n\n  return (\n    <OptionWithHighlight\n      {...props}\n      onPress={onPressHandler}\n      title={textInput}\n      containerStyle={styles.container}\n    />\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    paddingBottom: 0,\n    paddingTop: 0,\n  },\n  otherText: {\n    fontWeight: 'normal',\n    marginHorizontal: 12,\n  },\n  checkedOtherText: {\n    fontWeight: '500',\n  },\n  textInput: {\n    flex: 1,\n    fontStyle: 'normal',\n    fontWeight: 'normal',\n    letterSpacing: 0,\n    textAlign: 'left',\n    textAlignVertical: 'center',\n    borderBottomWidth: 1,\n    borderBottomColor: Colors.inputPlaceholder,\n  },\n  textInputContainer: {\n    flex: 1,\n    alignItems: 'center',\n    flexDirection: 'row',\n  },\n});\n\nexport default OtherOptionWithHighlightProps;\n"]}