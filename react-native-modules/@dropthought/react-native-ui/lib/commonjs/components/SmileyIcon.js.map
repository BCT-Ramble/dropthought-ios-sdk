{"version":3,"sources":["SmileyIcon.tsx"],"names":["SmileyIcon","props","fontColor","dimensionWidthType","isPhone","DimensionWidthType","phone","styles","phoneStyles","tabletStyles","rtl","i18n","dir","containerStyle","container","GlobalStyle","flexRowReverse","textStyle","label","selected","labelSelected","color","minHeight","language","undefined","onPress","source","emoji","StyleSheet","create","alignItems","flex","flexDirection","height","width","marginLeft","fontSize","marginRight","fontWeight","borderRadius","maxWidth","marginTop","alignSelf","textAlign"],"mappings":";;;;;;;AAAA;;AAOA;;AACA;;AAIA;;AACA;;AACA;;;;AASA,MAAMA,UAAU,GAAIC,KAAD,IAAkB;AACnC,QAAM;AAAEC,IAAAA;AAAF,MAAgB,sBAAtB;AACA,QAAMC,kBAAkB,GAAG,iDAA3B;AACA,QAAMC,OAAO,GAAGD,kBAAkB,KAAKE,wCAAmBC,KAA1D;AACA,QAAMC,MAAM,GAAGH,OAAO,GAAGI,WAAH,GAAiBC,YAAvC;AACA,QAAMC,GAAG,GAAGC,qBAAKC,GAAL,OAAe,KAA3B;AACA,QAAMC,cAAc,GAAGT,OAAO,GAC1B,CAACG,MAAM,CAACO,SAAR,EAAmBJ,GAAG,IAAIK,gBAAYC,cAAtC,CAD0B,GAE1BT,MAAM,CAACO,SAFX;AAIA,QAAMG,SAAS,GAAG,CAChBV,MAAM,CAACW,KADS,EAEhBjB,KAAK,CAACkB,QAAN,GAAiBZ,MAAM,CAACa,aAAxB,GAAwC,EAFxB,EAGhB;AACEC,IAAAA,KAAK,EAAEnB,SADT;AAEEoB,IAAAA,SAAS,EAAEX,qBAAKY,QAAL,KAAkB,IAAlB,GAAyB,EAAzB,GAA8BC;AAF3C,GAHgB,CAAlB;AAQA,sBACE,6BAAC,qCAAD;AAA0B,IAAA,OAAO,EAAEvB,KAAK,CAACwB;AAAzC,kBACE,6BAAC,iBAAD;AAAM,IAAA,KAAK,EAAEZ;AAAb,KACGZ,KAAK,CAACyB,MAAN,gBACC,yEACE,6BAAC,kBAAD;AACE,IAAA,UAAU,EAAC,SADb;AAEE,IAAA,KAAK,EAAEnB,MAAM,CAACoB,KAFhB;AAGE,IAAA,MAAM,EAAE1B,KAAK,CAACyB;AAHhB,IADF,eAME,6BAAC,iBAAD;AAAM,IAAA,KAAK,EAAET;AAAb,KAAyBhB,KAAK,CAACiB,KAA/B,CANF,CADD,GASG,IAVN,CADF,CADF;AAgBD,CAlCD;;eAoCelB,U;;;AAEf,MAAMQ,WAAW,GAAGoB,wBAAWC,MAAX,CAAkB;AACpCf,EAAAA,SAAS,EAAE;AACTgB,IAAAA,UAAU,EAAE,QADH;AAETC,IAAAA,IAAI,EAAE,CAFG;AAGTC,IAAAA,aAAa,EAAE,KAHN;AAITC,IAAAA,MAAM,EAAE;AAJC,GADyB;AAOpCN,EAAAA,KAAK,EAAE;AACLM,IAAAA,MAAM,EAAE,EADH;AAELC,IAAAA,KAAK,EAAE;AAFF,GAP6B;AAWpChB,EAAAA,KAAK,EAAE;AACLiB,IAAAA,UAAU,EAAE,EADP;AAELC,IAAAA,QAAQ,EAAE,EAFL;AAGLC,IAAAA,WAAW,EAAE,EAHR;AAILN,IAAAA,IAAI,EAAE;AAJD,GAX6B;AAiBpCX,EAAAA,aAAa,EAAE;AACbkB,IAAAA,UAAU,EAAE;AADC;AAjBqB,CAAlB,CAApB;;AAsBA,MAAM7B,YAAY,GAAGmB,wBAAWC,MAAX,CAAkB;AACrCf,EAAAA,SAAS,EAAE;AACTgB,IAAAA,UAAU,EAAE,QADH;AAETS,IAAAA,YAAY,EAAE,EAFL;AAGTR,IAAAA,IAAI,EAAE,CAHG;AAITS,IAAAA,QAAQ,EAAE;AAJD,GAD0B;AAOrCb,EAAAA,KAAK,EAAE;AACLM,IAAAA,MAAM,EAAE,EADH;AAELQ,IAAAA,SAAS,EAAE,EAFN;AAGLP,IAAAA,KAAK,EAAE;AAHF,GAP8B;AAYrChB,EAAAA,KAAK,EAAE;AACLwB,IAAAA,SAAS,EAAE,QADN;AAELD,IAAAA,SAAS,EAAE,EAFN;AAGLE,IAAAA,SAAS,EAAE;AAHN,GAZ8B;AAiBrCvB,EAAAA,aAAa,EAAE;AAjBsB,CAAlB,CAArB","sourcesContent":["import {\n  View,\n  Image,\n  TouchableWithoutFeedback,\n  StyleSheet,\n  Text,\n} from 'react-native';\nimport React from 'react';\nimport {\n  DimensionWidthType,\n  useDimensionWidthType,\n} from '../hooks/useWindowDimensions';\nimport GlobalStyle from '../styles';\nimport i18n from '../translation';\nimport { useTheme } from '../contexts/theme';\n\ntype Props = {\n  source?: number;\n  onPress: () => void;\n  selected: boolean;\n  label: string;\n};\n\nconst SmileyIcon = (props: Props) => {\n  const { fontColor } = useTheme();\n  const dimensionWidthType = useDimensionWidthType();\n  const isPhone = dimensionWidthType === DimensionWidthType.phone;\n  const styles = isPhone ? phoneStyles : tabletStyles;\n  const rtl = i18n.dir() === 'rtl';\n  const containerStyle = isPhone\n    ? [styles.container, rtl && GlobalStyle.flexRowReverse]\n    : styles.container;\n\n  const textStyle = [\n    styles.label,\n    props.selected ? styles.labelSelected : {},\n    {\n      color: fontColor,\n      minHeight: i18n.language === 'te' ? 30 : undefined,\n    },\n  ];\n  return (\n    <TouchableWithoutFeedback onPress={props.onPress}>\n      <View style={containerStyle}>\n        {props.source ? (\n          <>\n            <Image\n              resizeMode=\"contain\"\n              style={styles.emoji}\n              source={props.source}\n            />\n            <Text style={textStyle}>{props.label}</Text>\n          </>\n        ) : null}\n      </View>\n    </TouchableWithoutFeedback>\n  );\n};\n\nexport default SmileyIcon;\n\nconst phoneStyles = StyleSheet.create({\n  container: {\n    alignItems: 'center',\n    flex: 1,\n    flexDirection: 'row',\n    height: 65,\n  },\n  emoji: {\n    height: 51,\n    width: 51,\n  },\n  label: {\n    marginLeft: 20,\n    fontSize: 17,\n    marginRight: 20,\n    flex: 1,\n  },\n  labelSelected: {\n    fontWeight: '500',\n  },\n});\n\nconst tabletStyles = StyleSheet.create({\n  container: {\n    alignItems: 'center',\n    borderRadius: 50,\n    flex: 1,\n    maxWidth: 70,\n  },\n  emoji: {\n    height: 68,\n    marginTop: 20,\n    width: 68,\n  },\n  label: {\n    alignSelf: 'center',\n    marginTop: 11,\n    textAlign: 'center',\n  },\n  labelSelected: {},\n});\n"]}