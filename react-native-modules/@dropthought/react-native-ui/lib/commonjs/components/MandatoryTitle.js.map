{"version":3,"sources":["MandatoryTitle.tsx"],"names":["MandatoryTitle","forgot","invalidMessage","question","style","rtl","i18n","dir","dimensionWidthType","fontColor","themeOption","customFontColor","questionId","questionTitle","mandatory","type","subType","optional","ref","React","useRef","addMandatoryRef","useEffect","current","color","isOption6Smiley","THEME_OPTION","OPTION6","undefined","Colors","white","styles","horizontal","GlobalStyle","flexRowReverse","questionTitleSize","hint","t","StyleSheet","create","DimensionWidthType","phone","fontSize","tablet","mandatoryRed","flexDirection","flexWrap","justifyContent","marginBottom","fontWeight","textAlign"],"mappings":"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","sourcesContent":["import { View, Text, StyleSheet, ViewStyle } from 'react-native';\nimport * as React from 'react';\n\nimport { useAddMandatoryRef } from '../contexts/survey-page';\nimport GlobalStyle, { Colors } from '../styles';\nimport QuestionWarningMessage from './QuestionWarningMessage';\nimport i18n from '../translation';\nimport {\n  DimensionWidthType,\n  useDimensionWidthType,\n} from '../hooks/useWindowDimensions';\nimport { useTheme, THEME_OPTION } from '../contexts/theme';\nimport type { Question } from '../data';\n\ntype Props = {\n  forgot?: boolean;\n  invalidMessage?: string;\n  question: Question;\n  style?: ViewStyle;\n};\n\nconst MandatoryTitle = ({\n  forgot,\n  invalidMessage = '',\n  question,\n  style,\n}: Props) => {\n  const rtl = i18n.dir() === 'rtl';\n  const dimensionWidthType = useDimensionWidthType();\n  const { fontColor, themeOption, customFontColor } = useTheme();\n  const { questionId, questionTitle, mandatory, type, subType, optional } =\n    question;\n\n  const ref = React.useRef<View>(null);\n  const addMandatoryRef = useAddMandatoryRef();\n\n  React.useEffect(() => {\n    if (ref.current) {\n      addMandatoryRef(questionId, ref.current);\n    }\n  }, [addMandatoryRef, questionId]);\n\n  let color = fontColor;\n\n  const isOption6Smiley =\n    themeOption === THEME_OPTION.OPTION6 &&\n    type === 'rating' &&\n    subType === 'smiley';\n\n  if (\n    (customFontColor === undefined || customFontColor === '') &&\n    isOption6Smiley\n  ) {\n    color = Colors.white;\n  }\n\n  return (\n    <View\n      ref={ref}\n      style={[styles.horizontal, style, rtl && GlobalStyle.flexRowReverse]}\n    >\n      <Text\n        style={[\n          styles.questionTitle,\n          questionTitleSize[dimensionWidthType],\n          { color },\n        ]}\n      >\n        {questionTitle}\n        {\n          //optional was been used on matrix question\n          (mandatory || optional) && <Text style={styles.hint}>*</Text>\n        }\n      </Text>\n      <QuestionWarningMessage\n        // forgot message has higher priority than custom invalid message\n        message={forgot ? i18n.t('survey:mandatory') : invalidMessage}\n      />\n    </View>\n  );\n};\n\nexport default MandatoryTitle;\n\nconst questionTitleSize = StyleSheet.create({\n  [DimensionWidthType.phone]: {\n    fontSize: 26,\n  },\n  [DimensionWidthType.tablet]: {\n    fontSize: 26,\n  },\n});\n\nconst styles = StyleSheet.create({\n  hint: {\n    color: Colors.mandatoryRed,\n    fontSize: 18,\n  },\n  horizontal: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    justifyContent: 'center',\n    marginBottom: 24,\n  },\n  questionTitle: {\n    fontSize: 26,\n    fontWeight: '600',\n    textAlign: 'center',\n  },\n});\n"]}