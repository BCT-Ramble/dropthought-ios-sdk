{"version":3,"sources":["ClassicOpenQuestion.tsx"],"names":["MAX_CHARACTER","metadataTypeKeyboard","metadataType","toLocaleLowerCase","QuestionMetaDataType","Email","Phone","Number","Platform","select","ios","default","Date","metadataTypeAutoCapitalize","Name","OpenQuestion","mandatoryErrorMessage","anonymous","question","onFeedback","feedback","forgot","themeColor","colorScheme","fontColor","text","setText","React","useState","answers","focus","setFocus","hasEdited","setHasEdited","dimensionWidthType","styles","DimensionWidthType","phone","phoneStyles","onEndEditingHandler","questionId","type","getBackgroundColorStyle","borderColor","rtl","i18n","dir","showAnonymousWarning","metaDataType","maxCharacterLength","scale","parseInt","characterLeft","length","isValid","tempFeedback","hasForgot","upperView","responseErrorText","t","title","inputView","inputBG","COLOR_SCHEMES","dark","inputBGDark","input","color","GlobalStyle","textAlignRight","questionBrand","Colors","inputPlaceholder","bottomView","subTextRow","flexRowReverse","descText","questionContainer","StyleSheet","create","openQuestionSubTitle","fontSize","fontStyle","fontWeight","letterSpacing","lineHeight","borderWidth","borderRadius","height","marginVertical","paddingHorizontal","borderColorDark","flex","textAlignVertical","paddingVertical15","paddingVertical","android","metaDataTypeInput","flexDirection","justifyContent","width","marginBottom"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {\n  View,\n  StyleSheet,\n  Text,\n  TextInput,\n  Platform,\n  KeyboardTypeOptions,\n} from 'react-native';\nimport {\n  QuestionMetaDataType,\n  metaDataFormatValidator,\n  mandatoryQuestionValidator,\n} from '../utils/data';\nimport GlobalStyle, { Colors } from '../styles';\nimport ClassicMandatoryTitle from './ClassicMandatoryTitle';\nimport MetadataDesc from './MetadataDesc';\nimport i18n from '../translation';\nimport {\n  DimensionWidthType,\n  useDimensionWidthType,\n} from '../hooks/useWindowDimensions';\nimport { useTheme, COLOR_SCHEMES } from '../contexts/theme';\nimport type {\n  QuestionMetaDataType as TypeQuestionMetaDataType,\n  Question,\n  Feedback,\n} from '../data';\n\nconst MAX_CHARACTER = 4000;\n\nexport const metadataTypeKeyboard = (\n  metadataType: TypeQuestionMetaDataType | undefined\n): KeyboardTypeOptions | undefined => {\n  switch (metadataType?.toLocaleLowerCase()) {\n    case QuestionMetaDataType.Email:\n      return 'default';\n    case QuestionMetaDataType.Phone:\n      return 'phone-pad';\n    case QuestionMetaDataType.Number:\n      return Platform.select({\n        ios: 'numbers-and-punctuation',\n        default: 'default',\n      });\n    case QuestionMetaDataType.Date:\n    default:\n      return 'default';\n  }\n};\n\nexport const metadataTypeAutoCapitalize = (\n  metadataType: TypeQuestionMetaDataType | undefined\n) => {\n  switch (metadataType?.toLocaleLowerCase()) {\n    case QuestionMetaDataType.Name:\n      return 'words';\n    case QuestionMetaDataType.Email:\n    case QuestionMetaDataType.Phone:\n    case QuestionMetaDataType.Date:\n    case QuestionMetaDataType.Number:\n      return 'none';\n    default:\n      return 'sentences';\n  }\n};\n\ntype Props = {\n  mandatoryErrorMessage: string;\n  anonymous: boolean;\n  question: Question;\n  onFeedback: (feedback: Feedback) => void;\n  feedback: Feedback;\n  forgot: boolean;\n  themeColor: string;\n};\n\nconst OpenQuestion = ({\n  mandatoryErrorMessage,\n  anonymous,\n  question,\n  onFeedback,\n  // onValueChange, // Keep it for Kiosk usage\n  feedback,\n  forgot,\n  themeColor,\n}: Props) => {\n  const { colorScheme, fontColor } = useTheme();\n  const [text, setText] = React.useState<string>(\n    feedback?.answers[0] ? `${feedback?.answers[0]}` : ''\n  );\n  const [focus, setFocus] = React.useState(false);\n  const [hasEdited, setHasEdited] = React.useState(false);\n\n  const dimensionWidthType = useDimensionWidthType();\n  const styles =\n    dimensionWidthType === DimensionWidthType.phone ? phoneStyles : phoneStyles;\n\n  const onEndEditingHandler = () => {\n    setHasEdited(true);\n    onFeedback({\n      questionId: question.questionId,\n      answers: [text],\n      type: 'open',\n    });\n  };\n\n  const getBackgroundColorStyle = () => {\n    return { borderColor: themeColor };\n  };\n\n  const rtl = i18n.dir() === 'rtl';\n  const showAnonymousWarning =\n    anonymous &&\n    question.metaDataType &&\n    (question.metaDataType === 'Email' ||\n      question.metaDataType === 'Name' ||\n      question.metaDataType === 'Phone');\n\n  const maxCharacterLength = question.scale\n    ? parseInt(question.scale, 10)\n    : MAX_CHARACTER;\n  const characterLeft = maxCharacterLength - text.length;\n\n  const isValid = metaDataFormatValidator(text, question.metaDataType);\n\n  /** @type {Feedback} */\n  const tempFeedback = {\n    questionId: question.questionId,\n    answers: [text],\n    type: 'open',\n  };\n  const hasForgot =\n    forgot && !mandatoryQuestionValidator(question, tempFeedback);\n\n  const upperView = (\n    <>\n      <ClassicMandatoryTitle\n        forgot={hasForgot}\n        invalidMessage={\n          // show the error message after the user has done edited\n          hasEdited && !isValid\n            ? question.responseErrorText ??\n              i18n.t('metadata-invalid-message', question.metaDataType)\n            : ''\n        }\n        mandatoryErrorMessage={mandatoryErrorMessage}\n        question={question}\n        style={styles.title}\n      />\n      <MetadataDesc question={question} rtl={rtl} />\n    </>\n  );\n\n  const inputView = (\n    <View\n      style={[\n        styles.inputBG,\n        colorScheme === COLOR_SCHEMES.dark ? styles.inputBGDark : {},\n        focus && getBackgroundColorStyle(),\n        // question.metaDataType && styles.metaDataTypeInput,\n        // !question.metaDataType && styles.paddingVertical15,\n      ]}\n    >\n      <TextInput\n        style={[\n          styles.input,\n          { color: fontColor },\n          rtl && GlobalStyle.textAlignRight,\n        ]}\n        multiline={true}\n        onChangeText={(t) => {\n          if (focus) {\n            // [DK-3756] if the text is close to the maxLength it will be rendered twice in the iOS, so we add the focus to prevent the issue.\n            setText(t);\n          }\n          // onValueChange(text) // Keep it for Kiosk usage\n        }}\n        placeholder={question.questionBrand}\n        placeholderTextColor={Colors.inputPlaceholder}\n        onEndEditing={onEndEditingHandler}\n        value={text}\n        onFocus={() => {\n          setFocus(true);\n        }}\n        onBlur={() => {\n          setFocus(false);\n        }}\n        maxLength={maxCharacterLength}\n        keyboardType={metadataTypeKeyboard(question.metaDataType)}\n        autoCapitalize={metadataTypeAutoCapitalize(question.metaDataType)}\n      />\n    </View>\n  );\n\n  const bottomView = (\n    <View style={[styles.subTextRow, rtl && GlobalStyle.flexRowReverse]}>\n      <Text style={styles.descText}>\n        {showAnonymousWarning && i18n.t('survey:metadata-anonymous-warning')}\n      </Text>\n      <Text style={styles.descText}>\n        {characterLeft} / {maxCharacterLength}\n      </Text>\n    </View>\n  );\n\n  return (\n    <View style={GlobalStyle.questionContainer}>\n      {upperView}\n      {inputView}\n      {bottomView}\n    </View>\n  );\n};\n\nexport default OpenQuestion;\n\nconst phoneStyles = StyleSheet.create({\n  descText: {\n    color: Colors.openQuestionSubTitle,\n    fontSize: 12,\n    fontStyle: 'normal',\n    fontWeight: 'normal',\n    letterSpacing: 0,\n    lineHeight: 17,\n  },\n  inputBG: {\n    borderColor: Colors.borderColor,\n    borderWidth: 1,\n    borderRadius: 4,\n    height: 101,\n    marginVertical: 10,\n    paddingHorizontal: 15,\n  },\n  inputBGDark: {\n    borderColor: Colors.borderColorDark,\n  },\n  input: {\n    flex: 1,\n\n    // when multi=true, it is important to note that this aligns the text to the top on iOS,\n    // and centers it on Android. Use with textAlignVertical set to top for the same behavior in both platforms.\n    textAlignVertical: 'top', // this is an android only props, won't affect ios\n  },\n  paddingVertical15: {\n    ...Platform.select({\n      ios: {\n        paddingVertical: 15,\n      },\n      android: {\n        paddingVertical: 5,\n      },\n    }),\n  },\n  metaDataTypeInput: {\n    fontSize: 14,\n    height: 40,\n  },\n  subTextRow: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    width: '100%',\n  },\n  title: {\n    marginBottom: 6,\n  },\n});\n"]}