{"version":3,"sources":["PictureChoiceQuestion.tsx"],"names":["ScrollView","Platform","OS","KeyboardAvoidingScrollView","RNScrollView","PictureChoiceQuestion","survey","question","feedback","onFeedback","forgot","themeColor","onUpload","preview","otherText","images","otherPictureEnable","otherPictureAnswer","setOtherPictureAnswerText","setOtherPictureAnswerUrl","otherPictureSelected","setOtherPictureSelected","selectIndex","onSelectIndex","replaceSelectIndex","isMultipleChoice","resetOtherPicture","invalidMessage","setInvalidMessage","rtl","i18n","dir","imageItems","map","uri","option","index","selected","includes","onPress","undefined","toString","otherImageItem","length","t","file","url","msg","text","styles","container","mandatoryErrorMessage","mandatoryTitle","pictureGridContainer","GlobalStyle","flexRowReverse","React","memo","StyleSheet","create","paddingHorizontal","flex1","marginBottom","flexDirection","flexWrap"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {\n  View,\n  StyleSheet,\n  ScrollView as RNScrollView,\n  Platform,\n} from 'react-native';\nimport GlobalStyle from '../styles';\nimport PictureChoiceItem from './PictureChoiceItem';\nimport PictureChoiceOtherItem from './PictureChoiceOtherItem';\nimport { usePictureChoice } from '../hooks/usePictureChoice';\nimport type { Question, Feedback, ImageFileProps, Survey } from '../data';\nimport MandatoryTitle from './MandatoryTitle';\nimport { KeyboardAvoidingScrollView } from './KeyboardAvoidingView';\nimport i18n from '../translation';\n\nconst ScrollView =\n  Platform.OS === 'ios' ? KeyboardAvoidingScrollView : RNScrollView;\n\ntype Props = {\n  survey: Survey;\n  question: Question;\n  onFeedback: (feedback: Feedback) => void;\n  onUpload: (file: ImageFileProps) => Promise<string | undefined>;\n  isUploading: boolean;\n  feedback?: Feedback;\n  forgot: boolean;\n  themeColor: string;\n  preview: boolean;\n};\n\nconst PictureChoiceQuestion = ({\n  survey,\n  question,\n  feedback,\n  onFeedback,\n  forgot,\n  themeColor,\n  onUpload,\n  preview,\n}: Props) => {\n  const { otherText = '' } = question;\n\n  const {\n    images,\n    otherPictureEnable,\n    otherPictureAnswer,\n    setOtherPictureAnswerText,\n    setOtherPictureAnswerUrl,\n    otherPictureSelected,\n    setOtherPictureSelected,\n    selectIndex,\n    onSelectIndex,\n    replaceSelectIndex,\n    isMultipleChoice,\n    resetOtherPicture,\n    invalidMessage,\n    setInvalidMessage,\n  } = usePictureChoice(question, onFeedback, feedback);\n  const rtl = i18n.dir() === 'rtl';\n\n  const imageItems = images.map(({ uri, option }, index) => {\n    const selected = selectIndex.includes(index);\n\n    const onPress = () => {\n      setInvalidMessage(undefined);\n      if (isMultipleChoice) {\n        onSelectIndex(index);\n      } else {\n        replaceSelectIndex([index]);\n        resetOtherPicture();\n      }\n    };\n    return (\n      <PictureChoiceItem\n        title={option}\n        uri={uri}\n        isMultipleChoice={isMultipleChoice}\n        selected={selected}\n        columnGap={24}\n        onPress={onPress}\n        index={index}\n        themeColor={themeColor}\n        key={index.toString()}\n      />\n    );\n  });\n\n  const otherImageItem = otherPictureEnable ? (\n    <PictureChoiceOtherItem\n      otherPicture={otherPictureAnswer}\n      isMultipleChoice={isMultipleChoice}\n      selected={otherPictureSelected}\n      placeholder={\n        otherText.length > 0 ? otherText : i18n.t('survey:other-placeholder')\n      }\n      columnGap={24}\n      onChooseImage={() => {\n        if (!isMultipleChoice) {\n          replaceSelectIndex([]);\n        }\n        setOtherPictureSelected(true);\n      }}\n      onSelect={() => {\n        if (otherPictureSelected) {\n          setInvalidMessage(undefined);\n          resetOtherPicture();\n        } else {\n          if (!isMultipleChoice) {\n            replaceSelectIndex([]);\n          }\n          setOtherPictureSelected(true);\n        }\n      }}\n      onUpload={async (file) => {\n        setInvalidMessage(undefined);\n        const url = await onUpload(file);\n        if (typeof url !== 'string') {\n          setInvalidMessage(`${i18n.t('picture-choice:uploadFailed')}`);\n        } else if (url) {\n          setOtherPictureAnswerUrl(url);\n        }\n      }}\n      onError={(msg) => {\n        setInvalidMessage(msg);\n      }}\n      onChangeText={(text) => {\n        setOtherPictureAnswerText(text);\n      }}\n      themeColor={themeColor}\n      preview={preview}\n    />\n  ) : null;\n\n  return (\n    <ScrollView extraAvoidingSpace={30} style={styles.container}>\n      <MandatoryTitle\n        forgot={forgot}\n        mandatoryErrorMessage={survey.mandatoryErrorMessage}\n        question={question}\n        style={styles.mandatoryTitle}\n        invalidMessage={invalidMessage}\n      />\n      <View\n        style={[styles.pictureGridContainer, rtl && GlobalStyle.flexRowReverse]}\n      >\n        {imageItems}\n        {otherImageItem}\n      </View>\n    </ScrollView>\n  );\n};\n\nexport default React.memo(PictureChoiceQuestion);\n\nconst styles = StyleSheet.create({\n  container: {\n    paddingHorizontal: 30,\n    ...GlobalStyle.flex1,\n  },\n  mandatoryTitle: {\n    marginBottom: 12,\n  },\n  pictureGridContainer: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n  },\n});\n"]}