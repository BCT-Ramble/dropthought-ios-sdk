{"version":3,"sources":["ClassicIconRatingQuestion.tsx"],"names":["FakeSmiley","ClassicIconRatingQuestion","question","feedback","forgot","onFeedback","colorScheme","rtl","i18n","dir","dimensionWidthType","isPhone","DimensionWidthType","phone","styles","phoneStyles","tabletStyles","options","subType","questionId","optionAmount","length","fakeSmileyAmount","selectedIndex","setSelectedIndex","baseIcon","icons","selectedIcons","getInitialSelectedValueFromFeedbackProps","prevAnswer","answers","parseInt","setSelectedAndFeedback","index","result","type","iconRow","horizontal","GlobalStyle","flexRowReverse","map","option","isSelected","source","RatingIconType","star","heart","undefined","toString","Array","_","questionContainer","smileyRowContainer","flexEnd","React","memo","StyleSheet","create","flex","flexDirection","maxWidth","paddingLeft","justifyContent","paddingTop"],"mappings":"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","sourcesContent":["import React, { useEffect, useMemo, useState } from 'react';\nimport { View, StyleSheet } from 'react-native';\nimport SmileyIcon from './SmileyIcon';\nimport { isNil } from 'ramda';\nimport ClassicMandatoryTitle from './ClassicMandatoryTitle';\nimport GlobalStyle from '../styles';\nimport i18n from '../translation';\nimport {\n  defaultIcon,\n  getIcons,\n  getSelectedIcons,\n  RatingIconType,\n} from '../constants/RatingQuestionConstants';\nimport type { Feedback as OriginFeedback, Question } from '../data';\nimport {\n  DimensionWidthType,\n  useDimensionWidthType,\n} from '../hooks/useWindowDimensions';\nimport { useTheme } from '../contexts/theme';\n\ntype Feedback = OriginFeedback & {\n  answers: string[];\n};\n\ntype Props = {\n  question: Question;\n  onFeedback: ({\n    questionId,\n    answers,\n    type,\n  }: {\n    questionId: string;\n    answers: number[];\n    type: string;\n  }) => void;\n  feedback: Feedback;\n  forgot: boolean;\n  themeColor: string;\n};\n\nconst FakeSmiley = () => {\n  return <SmileyIcon selected={false} onPress={() => {}} label=\"\" />;\n};\n\nconst ClassicIconRatingQuestion = ({\n  question,\n  feedback,\n  forgot,\n  onFeedback,\n}: Props) => {\n  const { colorScheme } = useTheme();\n  const rtl = i18n.dir() === 'rtl';\n\n  const dimensionWidthType = useDimensionWidthType();\n  const isPhone = dimensionWidthType === DimensionWidthType.phone;\n  const styles = isPhone ? phoneStyles : tabletStyles;\n\n  const { options = [], subType = 'smiley', questionId } = question;\n  const optionAmount = options.length;\n  const fakeSmileyAmount = 5 - optionAmount;\n\n  const [selectedIndex, setSelectedIndex] = useState<number>();\n\n  const baseIcon = useMemo(\n    () => defaultIcon(subType, colorScheme),\n    [colorScheme, subType]\n  );\n  const icons = useMemo(\n    () => getIcons(subType, optionAmount),\n    [subType, optionAmount]\n  );\n  const selectedIcons = useMemo(\n    () => getSelectedIcons(subType, optionAmount),\n    [subType, optionAmount]\n  );\n\n  useEffect(() => {\n    getInitialSelectedValueFromFeedbackProps();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const getInitialSelectedValueFromFeedbackProps = () => {\n    let prevAnswer;\n    if (feedback && feedback.answers && !isNil(feedback.answers[0])) {\n      prevAnswer = parseInt(feedback.answers[0], 10);\n      setSelectedIndex(prevAnswer);\n    }\n  };\n\n  const setSelectedAndFeedback = (index: number) => {\n    setSelectedIndex(index);\n\n    const result = {\n      questionId,\n      answers: [index],\n      type: 'rating',\n    };\n    onFeedback(result);\n  };\n\n  const iconRow = (\n    <View style={[styles.horizontal, rtl && GlobalStyle.flexRowReverse]}>\n      {options.map((option, index) => {\n        const isSelected = selectedIndex === index;\n        let source;\n        if (\n          subType === RatingIconType.star ||\n          subType === RatingIconType.heart\n        ) {\n          if (selectedIndex !== undefined) {\n            source = selectedIndex >= index ? icons[selectedIndex] : baseIcon;\n          } else {\n            source = baseIcon;\n          }\n        } else {\n          source = isSelected ? selectedIcons[index] : icons[index];\n        }\n        return (\n          <SmileyIcon\n            selected={isSelected}\n            source={source}\n            label={option}\n            onPress={() => setSelectedAndFeedback(index)}\n            key={index.toString()}\n          />\n        );\n      })}\n      {Array(fakeSmileyAmount).map((_, index) => (\n        <FakeSmiley key={index.toString()} />\n      ))}\n    </View>\n  );\n\n  return (\n    <View style={GlobalStyle.questionContainer}>\n      <ClassicMandatoryTitle forgot={forgot} question={question} />\n      <View style={[styles.smileyRowContainer, rtl && GlobalStyle.flexEnd]}>\n        {iconRow}\n      </View>\n    </View>\n  );\n};\n\nexport default React.memo(ClassicIconRatingQuestion);\n\nconst phoneStyles = StyleSheet.create({\n  horizontal: {\n    flex: 1,\n    flexDirection: 'column',\n    maxWidth: 560,\n    paddingLeft: 10,\n    justifyContent: 'space-between',\n  },\n  smileyRowContainer: {\n    flex: 1,\n    flexDirection: 'row',\n    paddingTop: 6,\n  },\n});\nconst tabletStyles = StyleSheet.create({\n  horizontal: {\n    flex: 1,\n    flexDirection: 'row',\n    maxWidth: 560,\n    paddingLeft: 10,\n    justifyContent: 'space-between',\n  },\n  smileyRowContainer: {\n    flex: 1,\n    flexDirection: 'row',\n    paddingTop: 6,\n  },\n});\n"]}