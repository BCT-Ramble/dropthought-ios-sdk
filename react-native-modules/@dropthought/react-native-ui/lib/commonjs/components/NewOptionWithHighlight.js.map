{"version":3,"sources":["NewOptionWithHighlight.tsx"],"names":["noop","_id","undefined","Icon","type","checked","themeColor","fontColor","colorScheme","backgroundColor","checkboxContainerStyle","styles","checkboxBorderBox","borderColor","COLOR_SCHEMES","dark","checkboxContentStyle","checkboxContent","opacity","radioContainerStyle","radioBorderBox","radioContentStyle","radioContent","content","require","NewOptionWithHighlight","id","value","title","onPress","appearanceBackgroundColor","Colors","appearanceSubBlack","buttonContainerSelected","color","buttonContainerStyle","containerStyle","buttonContainer","textStyle","lineHeight","i18n","language","dummyComponent","StyleSheet","create","marginBottom","paddingVertical","flexDirection","borderWidth","borderRadius","overflow","justifyContent","alignItems","paddingHorizontal","width","height","position","top","left","React","memo"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { StyleSheet, Image, View, Text, TouchableOpacity } from 'react-native';\n\nimport { Colors, addOpacityToColor } from '../styles';\nimport { useTheme, COLOR_SCHEMES } from '../contexts/theme';\nimport i18n from '../translation';\n\nconst noop = (_id: any) => undefined;\n\ntype IconProps = {\n  type: 'radio' | 'checkbox';\n  checked: boolean;\n  themeColor: string;\n};\n\nconst Icon = ({ type, checked, themeColor }: IconProps) => {\n  const { fontColor, colorScheme, backgroundColor } = useTheme();\n\n  const checkboxContainerStyle = [\n    styles.checkboxBorderBox,\n    {\n      borderColor: colorScheme === COLOR_SCHEMES.dark ? fontColor : themeColor,\n      backgroundColor: addOpacityToColor(\n        colorScheme === COLOR_SCHEMES.dark ? backgroundColor : themeColor,\n        0.1\n      ),\n    },\n  ];\n\n  const checkboxContentStyle = [\n    styles.checkboxContent,\n    {\n      backgroundColor: themeColor,\n      opacity: checked ? 1 : 0,\n    },\n  ];\n\n  const radioContainerStyle = [\n    styles.radioBorderBox,\n    {\n      borderColor: themeColor,\n      backgroundColor: addOpacityToColor(\n        colorScheme === COLOR_SCHEMES.dark ? themeColor : backgroundColor,\n        0.1\n      ),\n    },\n  ];\n\n  const radioContentStyle = [\n    styles.radioContent,\n    {\n      backgroundColor:\n        colorScheme === COLOR_SCHEMES.dark ? fontColor : themeColor,\n      opacity: checked ? 1 : 0,\n    },\n  ];\n\n  let content: React.ReactElement;\n  if (type === 'checkbox') {\n    content = checked ? (\n      <View style={checkboxContentStyle}>\n        <Image source={require('../assets/ic-check.png')} />\n      </View>\n    ) : (\n      <View style={checkboxContainerStyle} />\n    );\n  } else {\n    content = (\n      <View>\n        <View style={radioContainerStyle} />\n        {checked ? <View style={radioContentStyle} /> : null}\n      </View>\n    );\n  }\n\n  return <View>{content}</View>;\n};\n\nexport type Props = {\n  type?: 'radio' | 'checkbox';\n  id: any;\n  title: string | React.ReactNode;\n  checked: boolean;\n  themeColor: string;\n  onPress: (id: any) => void;\n};\n\nfunction NewOptionWithHighlight({\n  type = 'radio',\n  id: value,\n  title,\n  checked,\n  themeColor,\n  onPress = noop,\n}: Props) {\n  const { fontColor, colorScheme, backgroundColor } = useTheme();\n\n  const appearanceBackgroundColor = addOpacityToColor(\n    colorScheme === COLOR_SCHEMES.dark ? Colors.appearanceSubBlack : themeColor,\n    0.08\n  );\n\n  const buttonContainerSelected = {\n    backgroundColor:\n      colorScheme === COLOR_SCHEMES.dark\n        ? addOpacityToColor(themeColor, 0.3)\n        : appearanceBackgroundColor,\n    borderColor: themeColor,\n    color: colorScheme === COLOR_SCHEMES.dark ? fontColor : themeColor,\n  };\n\n  const buttonContainerStyle = {\n    backgroundColor: appearanceBackgroundColor,\n    borderColor: backgroundColor,\n    color: fontColor,\n  };\n\n  const containerStyle = checked\n    ? [styles.buttonContainer, buttonContainerStyle, buttonContainerSelected]\n    : [styles.buttonContainer, buttonContainerStyle];\n\n  const textStyle = checked\n    ? { color: colorScheme === COLOR_SCHEMES.dark ? fontColor : themeColor }\n    : { color: fontColor, lineHeight: i18n.language === 'te' ? 22 : undefined };\n\n  let content;\n  if (typeof title === 'string') {\n    content = <Text style={textStyle}>{title}</Text>;\n  } else {\n    content = title;\n  }\n\n  return (\n    <TouchableOpacity onPress={() => onPress(value)}>\n      <View style={containerStyle}>\n        <Icon type={type} checked={checked} themeColor={themeColor} />\n        {content}\n        <View style={styles.dummyComponent} />\n      </View>\n    </TouchableOpacity>\n  );\n}\n\nconst styles = StyleSheet.create({\n  buttonContainer: {\n    marginBottom: 10,\n    paddingVertical: 9,\n    flexDirection: 'row',\n    borderWidth: 1,\n    borderRadius: 20,\n    overflow: 'hidden',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    paddingHorizontal: 13,\n  },\n  checkboxContent: {\n    width: 18,\n    height: 18,\n    borderRadius: 3,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  checkboxBorderBox: {\n    width: 18,\n    height: 18,\n    borderRadius: 3,\n    borderWidth: 1,\n  },\n  radioContent: {\n    position: 'absolute',\n    top: 4,\n    left: 4,\n    width: 10,\n    height: 10,\n    borderRadius: 8,\n  },\n  radioBorderBox: {\n    width: 18,\n    height: 18,\n    borderRadius: 10,\n    borderWidth: 2,\n  },\n  dummyComponent: {\n    width: 18,\n    height: 18,\n  },\n});\n\nexport default React.memo(NewOptionWithHighlight);\n"]}