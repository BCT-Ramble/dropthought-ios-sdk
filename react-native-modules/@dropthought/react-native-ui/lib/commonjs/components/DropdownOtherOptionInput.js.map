{"version":3,"sources":["DropdownOtherOptionInput.tsx"],"names":["useFocus","onBlur","onFocus","isFocused","setIsFocused","React","useState","onFocusHandler","useCallback","onBlurHandler","DropdownOtherOptionInput","visible","question","placeholder","value","onChangeText","themeColor","rtl","i18n","dir","inputRef","fontColor","focusProps","inputTextColorStyle","color","inputTextBorderStyle","borderColor","borderWidth","backgroundColor","undefined","styles","textInputContainer","GlobalStyle","flexRowReverse","textInput","textAlignRight","Colors","inputPlaceholder","transparent","metaDataType","descText","textAlignLeft","length","StyleSheet","create","height","marginTop","width","textAlign","textAlignVertical","borderRadius","rankingContainerBorder","paddingTop","paddingBottom","paddingHorizontal","openQuestionSubTitle"],"mappings":"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","sourcesContent":["import React, { useRef } from 'react';\nimport { StyleSheet, TextInput, View, Text } from 'react-native';\n\nimport GlobalStyle, { Colors, addOpacityToColor } from '../styles';\nimport i18n from '../translation';\nimport {\n  metadataTypeKeyboard,\n  metadataTypeAutoCapitalize,\n} from './MultiLineTextInput/MultiLineTextInput';\nimport MetadataDesc from './MetadataDesc';\nimport type { Question } from '../data';\nimport { useTheme } from '../contexts/theme';\n\ntype Props = {\n  visible: boolean;\n  question: Question;\n  placeholder: string;\n  value: string;\n  onChangeText: (text: string) => void;\n  themeColor: string;\n};\n\nconst useFocus = (onBlur: () => void, onFocus: () => void) => {\n  const [isFocused, setIsFocused] = React.useState(false);\n  const onFocusHandler = React.useCallback(() => {\n    onFocus && onFocus();\n    setIsFocused(true);\n  }, [onFocus]);\n  const onBlurHandler = React.useCallback(() => {\n    onBlur && onBlur();\n    setIsFocused(false);\n  }, [onBlur]);\n  return {\n    isFocused,\n    onFocus: onFocusHandler,\n    onBlur: onBlurHandler,\n  };\n};\n\nconst DropdownOtherOptionInput: React.FC<Props> = ({\n  visible,\n  question,\n  placeholder,\n  value,\n  onChangeText,\n  themeColor,\n}) => {\n  const rtl = i18n.dir() === 'rtl';\n  const inputRef = useRef(null);\n  const { fontColor } = useTheme();\n\n  const onFocusHandler = () => {};\n  const onBlurHandler = () => {};\n  const { isFocused, ...focusProps } = useFocus(onBlurHandler, onFocusHandler);\n  const inputTextColorStyle = { color: fontColor };\n  const inputTextBorderStyle = isFocused\n    ? {\n        borderColor: themeColor,\n        borderWidth: 1,\n        backgroundColor: addOpacityToColor(themeColor, 0.05),\n      }\n    : undefined;\n\n  if (!visible) return null;\n  return (\n    <>\n      <MetadataDesc question={question} rtl={rtl} />\n      <View\n        style={[styles.textInputContainer, rtl && GlobalStyle.flexRowReverse]}\n      >\n        <TextInput\n          ref={inputRef}\n          style={[\n            styles.textInput,\n            rtl && GlobalStyle.textAlignRight,\n            inputTextBorderStyle,\n            inputTextColorStyle,\n          ]}\n          placeholder={placeholder}\n          placeholderTextColor={Colors.inputPlaceholder}\n          multiline\n          onChangeText={onChangeText}\n          underlineColorAndroid={Colors.transparent}\n          selectionColor={themeColor}\n          value={value}\n          maxLength={100}\n          keyboardType={metadataTypeKeyboard(question.metaDataType)}\n          autoCapitalize={metadataTypeAutoCapitalize(question.metaDataType)}\n          {...focusProps}\n        />\n      </View>\n      <Text style={[styles.descText, rtl && GlobalStyle.textAlignLeft]}>\n        {value.length}/100\n      </Text>\n    </>\n  );\n};\n\nconst styles = StyleSheet.create({\n  textInputContainer: {\n    height: 80,\n    marginTop: 10,\n  },\n  textInput: {\n    width: '100%',\n    height: '100%',\n    textAlign: 'left',\n    textAlignVertical: 'top',\n    borderWidth: 1,\n    borderRadius: 6,\n    borderColor: Colors.rankingContainerBorder,\n    paddingTop: 16,\n    paddingBottom: 16,\n    paddingHorizontal: 12,\n  },\n  descText: {\n    color: Colors.openQuestionSubTitle,\n    textAlign: 'right',\n    width: '100%',\n    marginTop: 6,\n  },\n});\n\nexport default DropdownOtherOptionInput;\n"]}