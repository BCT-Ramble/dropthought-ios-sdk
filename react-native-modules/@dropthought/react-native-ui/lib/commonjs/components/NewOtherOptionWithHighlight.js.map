{"version":3,"sources":["NewOtherOptionWithHighlight.tsx"],"names":["useFocus","onBlur","onFocus","isFocused","setIsFocused","React","useState","onFocusHandler","useCallback","onBlurHandler","NewOtherOptionWithHighlight","props","id","checked","themeColor","textValue","onChangeValue","feedback","question","anonymous","inputRef","useRef","value","trim","length","focusProps","onPressHandler","current","focus","onChangeTextHandler","text","otherTextLabel","memo"],"mappings":";;;;;;;AAAA;;AAEA;;AAEA;;;;;;;;;;AAGA,MAAMA,QAAQ,GAAG,CAACC,MAAD,EAAqBC,OAArB,KAA6C;AAC5D,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BC,KAAK,CAACC,QAAN,CAAe,KAAf,CAAlC;AACA,QAAMC,cAAc,GAAGF,KAAK,CAACG,WAAN,CAAkB,MAAM;AAC7CN,IAAAA,OAAO,IAAIA,OAAO,EAAlB;AACAE,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACD,GAHsB,EAGpB,CAACF,OAAD,CAHoB,CAAvB;AAIA,QAAMO,aAAa,GAAGJ,KAAK,CAACG,WAAN,CAAkB,MAAM;AAC5CP,IAAAA,MAAM,IAAIA,MAAM,EAAhB;AACAG,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,GAHqB,EAGnB,CAACH,MAAD,CAHmB,CAAtB;AAIA,SAAO;AACLE,IAAAA,SADK;AAELD,IAAAA,OAAO,EAAEK,cAFJ;AAGLN,IAAAA,MAAM,EAAEQ;AAHH,GAAP;AAKD,CAfD;;AA4BA,SAASC,2BAAT,CAAqCC,KAArC,EAAmD;AACjD,QAAM;AACJC,IAAAA,EADI;AAEJC,IAAAA,OAFI;AAGJC,IAAAA,UAHI;AAIJC,IAAAA,SAJI;AAKJC,IAAAA,aALI;AAMJC,IAAAA,QANI;AAOJC,IAAAA,QAPI;AAQJC,IAAAA;AARI,MASFR,KATJ;AAWA,QAAMS,QAAQ,GAAGf,KAAK,CAACgB,MAAN,CAAwB,IAAxB,CAAjB,CAZiD,CAcjD;;AACA,QAAMd,cAAc,GAAG,MAAM;AAC3BS,IAAAA,aAAa,CAACJ,EAAD,EAAK;AAChBU,MAAAA,KAAK,EAAEP,SADS;AAEhBF,MAAAA,OAAO,EAAE;AAFO,KAAL,CAAb;AAID,GALD,CAfiD,CAsBjD;;;AACA,QAAMJ,aAAa,GAAG,MAAM;AAC1B,QAAI,CAACM,SAAD,IAAcA,SAAS,CAACQ,IAAV,GAAiBC,MAAjB,IAA2B,CAA7C,EAAgD;AAC9CR,MAAAA,aAAa,CAACJ,EAAD,EAAK;AAChBU,QAAAA,KAAK,EAAE,EADS;AAEhBT,QAAAA,OAAO,EAAEA;AAFO,OAAL,CAAb;AAID;AACF,GAPD;;AAQA,QAAM,EAAE,GAAGY;AAAL,MAAoBzB,QAAQ,CAACS,aAAD,EAAgBF,cAAhB,CAAlC,CA/BiD,CAiCjD;;AACA,QAAMmB,cAAc,GAAG,MAAM;AAC3B,QAAIN,QAAQ,CAACO,OAAT,IAAoB,CAACd,OAAzB,EAAkC;AAChCO,MAAAA,QAAQ,CAACO,OAAT,CAAiBC,KAAjB;AACD,KAFD,MAEO;AACL;AACAZ,MAAAA,aAAa,CAACJ,EAAD,EAAK;AAChBU,QAAAA,KAAK,EAAEP,SADS;AAEhBF,QAAAA,OAAO,EAAE,CAACA;AAFM,OAAL,CAAb;AAID;AACF,GAVD,CAlCiD,CA8CjD;;;AACA,QAAMgB,mBAAmB,GAAIC,IAAD,IAC1Bd,aAAa,IACbA,aAAa,CAACJ,EAAD,EAAK;AAChBC,IAAAA,OAAO,EAAE,IADO;AAEhBS,IAAAA,KAAK,EAAEQ;AAFS,GAAL,CAFf;;AAOA,sBACE,uDACE,oBAAC,+BAAD,eACMnB,KADN;AAEE,IAAA,OAAO,EAAEe,cAFX;AAGE,IAAA,KAAK,EAAER,QAAQ,CAACa;AAHlB,KADF,eAME,oBAAC,2BAAD;AACE,IAAA,mBAAmB,EAAE,MAAM,CAAE,CAD/B;AAEE,IAAA,mBAAmB,EAAEF,mBAFvB;AAGE,IAAA,UAAU,EAAEf,UAHd;AAIE,IAAA,QAAQ,EAAEG,QAJZ;AAKE,IAAA,QAAQ,EAAEC,QALZ;AAME,IAAA,QAAQ,EAAEE,QANZ;AAOE,IAAA,OAAO,EAAEP,OAPX;AAQE,IAAA,SAAS,EAAEM,SARb;AASE,IAAA,cAAc,EAAEM,UAAU,CAACvB,OAT7B;AAUE,IAAA,aAAa,EAAEuB,UAAU,CAACxB;AAV5B,IANF,CADF;AAqBD;;4BAEcI,KAAK,CAAC2B,IAAN,CAAWtB,2BAAX,C","sourcesContent":["import * as React from 'react';\nimport type { TextInput } from 'react-native';\nimport NewOptionWithHighlight from './NewOptionWithHighlight';\nimport type { Props as NewOptionWithHighlightProps } from './NewOptionWithHighlight';\nimport MultiLineTextInput from './MultiLineTextInput';\nimport type { Question, Feedback } from '../data';\n\nconst useFocus = (onBlur: () => void, onFocus: () => void) => {\n  const [isFocused, setIsFocused] = React.useState(false);\n  const onFocusHandler = React.useCallback(() => {\n    onFocus && onFocus();\n    setIsFocused(true);\n  }, [onFocus]);\n  const onBlurHandler = React.useCallback(() => {\n    onBlur && onBlur();\n    setIsFocused(false);\n  }, [onBlur]);\n  return {\n    isFocused,\n    onFocus: onFocusHandler,\n    onBlur: onBlurHandler,\n  };\n};\n\ntype Props = NewOptionWithHighlightProps & {\n  textValue: string | undefined;\n  onChangeValue: (\n    id: any,\n    value: { checked: boolean; value: string | undefined }\n  ) => void;\n  feedback: Feedback;\n  question: Question;\n  anonymous: boolean;\n};\n\nfunction NewOtherOptionWithHighlight(props: Props) {\n  const {\n    id,\n    checked,\n    themeColor,\n    textValue,\n    onChangeValue,\n    feedback,\n    question,\n    anonymous,\n  } = props;\n\n  const inputRef = React.useRef<TextInput>(null);\n\n  // return checked as true when focus\n  const onFocusHandler = () => {\n    onChangeValue(id, {\n      value: textValue,\n      checked: true,\n    });\n  };\n\n  // return checked as false, if the textValue is empty\n  const onBlurHandler = () => {\n    if (!textValue || textValue.trim().length <= 0) {\n      onChangeValue(id, {\n        value: '',\n        checked: checked,\n      });\n    }\n  };\n  const { ...focusProps } = useFocus(onBlurHandler, onFocusHandler);\n\n  // when the option is pressed, call focus if current checked is false\n  const onPressHandler = () => {\n    if (inputRef.current && !checked) {\n      inputRef.current.focus();\n    } else {\n      // toggle checked value when pressing\n      onChangeValue(id, {\n        value: textValue,\n        checked: !checked,\n      });\n    }\n  };\n\n  // when text input is changed, return the text\n  const onChangeTextHandler = (text: string) =>\n    onChangeValue &&\n    onChangeValue(id, {\n      checked: true,\n      value: text,\n    });\n\n  return (\n    <>\n      <NewOptionWithHighlight\n        {...props}\n        onPress={onPressHandler}\n        title={question.otherTextLabel}\n      />\n      <MultiLineTextInput\n        onEndEditingHandler={() => {}}\n        onChangeTextHandler={onChangeTextHandler}\n        themeColor={themeColor}\n        feedback={feedback}\n        question={question}\n        inputRef={inputRef}\n        checked={checked}\n        anonymous={anonymous}\n        onFocusHandler={focusProps.onFocus}\n        onBlurHandler={focusProps.onBlur}\n      />\n    </>\n  );\n}\n\nexport default React.memo(NewOtherOptionWithHighlight);\n"]}