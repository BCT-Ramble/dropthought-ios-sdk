{"version":3,"sources":["SmileyRatingQuestionOption2.tsx"],"names":["lotties","require","SmileyRatingQuestionOption2","survey","pageIndex","question","forgot","onClose","onPrevPage","onNextPage","onFeedback","feedback","backgroundColor","themeBackgroundColor","fontColor","colorScheme","questionId","options","scale","selectedIndex","setSelectedIndex","React","useState","hasSelected","scaleLogicList","scaleLogic","lottieSelectedIndex","setSelectedAndFeedback","useCallback","index","answers","type","handleSelected","descriptions","map","_","dummyDescroptions","dimensionWidthType","isPhone","DimensionWidthType","phone","styles","phoneStyles","tabletStyles","selectedBackgroundColor","COLOR_SCHEMES","dark","Option1BackgroundColorDark","Option1BackgroundColor","unselectedBackgroundColor","questionContainerStyle","commonStyles","container","hintTextStyle","hintText","color","itemTextStyle","infoContainer","lottieContainer","lottieContent","initInfoContainer","i18n","t","selectedIndicatorStyle","surveyProperty","hexCode","pageOrder","length","memo","StyleSheet","create","flex","paddingHorizontal","justifyContent","height","alignItems","flexDirection","width","opacity","fontSize","paddingVertical","fontWeight"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { View, StyleSheet, Text } from 'react-native';\nimport { Option1BackgroundColor, Option1BackgroundColorDark } from '../styles';\nimport i18n from '../translation';\nimport {\n  DimensionWidthType,\n  useDimensionWidthType,\n} from '../hooks/useWindowDimensions';\nimport type {\n  Feedback as OriginFeedback,\n  Question as OriginQuestion,\n  Survey,\n} from '../data';\nimport { scaleLogic } from '../utils/data';\nimport WheelPicker from './WheelPicker';\nimport SurveyFooter from '../containers/SurveyFooter';\nimport SurveyHeader from '../containers/SurveyHeader';\nimport LottieView from 'lottie-react-native';\nimport { useTheme, COLOR_SCHEMES } from '../contexts/theme';\nimport MandatoryTitle from './MandatoryTitle';\n\nconst lotties = [\n  require('../assets/animations/smiley_option1/option1_1.json'),\n  require('../assets/animations/smiley_option1/option1_2.json'),\n  require('../assets/animations/smiley_option1/option1_3.json'),\n  require('../assets/animations/smiley_option1/option1_4.json'),\n  require('../assets/animations/smiley_option1/option1_5.json'),\n];\n\ntype Feedback = OriginFeedback & {\n  answers: string[];\n};\n\ntype Question = OriginQuestion & {\n  options: string[];\n  scale: string;\n};\n\ntype Props = {\n  survey: Survey;\n  question: Question;\n  pageIndex: number;\n  forgot: boolean;\n  onClose: () => void;\n  onPrevPage: () => void;\n  onNextPage: () => void;\n  onFeedback: ({\n    questionId,\n    answers,\n    type,\n  }: {\n    questionId: string;\n    answers: number[];\n    type: string;\n  }) => void;\n  feedback: Feedback;\n};\n\nconst SmileyRatingQuestionOption2 = ({\n  survey,\n  pageIndex,\n  question,\n  forgot,\n  onClose,\n  onPrevPage,\n  onNextPage,\n  onFeedback,\n  feedback,\n}: Props) => {\n  const {\n    backgroundColor: themeBackgroundColor,\n    fontColor,\n    colorScheme,\n  } = useTheme();\n  const { questionId, options, scale } = question;\n  const [selectedIndex, setSelectedIndex] = React.useState<number>(-1);\n  const hasSelected = selectedIndex > -1;\n\n  const scaleLogicList = scaleLogic[scale];\n  const lottieSelectedIndex = scaleLogicList[selectedIndex];\n\n  const setSelectedAndFeedback = React.useCallback(\n    (index) => {\n      onFeedback({\n        questionId,\n        answers: [index],\n        type: 'rating',\n      });\n    },\n    [onFeedback, questionId]\n  );\n\n  const handleSelected = (index: number) => {\n    setSelectedIndex(index);\n    setSelectedAndFeedback(index);\n  };\n\n  const descriptions = scaleLogicList.map((_, index) => options[index]);\n  const dummyDescroptions = ['Select', ...descriptions];\n\n  const dimensionWidthType = useDimensionWidthType();\n  const isPhone = dimensionWidthType === DimensionWidthType.phone;\n  const styles = isPhone ? phoneStyles : tabletStyles;\n\n  const selectedBackgroundColor =\n    colorScheme === COLOR_SCHEMES.dark\n      ? Option1BackgroundColorDark\n      : Option1BackgroundColor;\n\n  const unselectedBackgroundColor = themeBackgroundColor;\n\n  const backgroundColor = hasSelected\n    ? selectedBackgroundColor[lottieSelectedIndex]\n    : unselectedBackgroundColor;\n\n  const questionContainerStyle = [commonStyles.container, { backgroundColor }];\n\n  const hintTextStyle = [styles.hintText, { color: fontColor }];\n  const itemTextStyle = [commonStyles.itemTextStyle, { color: fontColor }];\n\n  return (\n    <>\n      <SurveyHeader\n        survey={survey}\n        pageIndex={pageIndex}\n        backgroundColor={backgroundColor}\n        onClose={onClose}\n      />\n      <View style={questionContainerStyle}>\n        {feedback && hasSelected ? (\n          <View style={commonStyles.infoContainer}>\n            <MandatoryTitle question={question} forgot={forgot} />\n            <View style={commonStyles.lottieContainer}>\n              <LottieView\n                source={lotties[lottieSelectedIndex]}\n                autoPlay\n                style={commonStyles.lottieContent}\n                speed={0.5}\n              />\n            </View>\n          </View>\n        ) : (\n          <View style={commonStyles.initInfoContainer}>\n            <MandatoryTitle question={question} forgot={forgot} />\n            <Text style={hintTextStyle}>\n              {i18n.t('option1HintDescription:title')}\n            </Text>\n            <View />\n          </View>\n        )}\n        {hasSelected ? (\n          <WheelPicker\n            selectedIndex={selectedIndex}\n            options={descriptions}\n            onChange={(index) => {\n              if (index > -1) handleSelected(index);\n            }}\n            itemTextStyle={itemTextStyle}\n            selectedIndicatorStyle={commonStyles.selectedIndicatorStyle}\n            key={'WheelPicker-descriptions'}\n          />\n        ) : (\n          <WheelPicker\n            selectedIndex={0}\n            options={dummyDescroptions}\n            onChange={(index) => {\n              handleSelected(index - 1);\n            }}\n            itemTextStyle={itemTextStyle}\n            selectedIndicatorStyle={commonStyles.selectedIndicatorStyle}\n            key={'WheelPicker-dummyDescroptions'}\n          />\n        )}\n      </View>\n      <SurveyFooter\n        surveyColor={survey.surveyProperty.hexCode}\n        isFirstPage={pageIndex === 0}\n        isLastPage={pageIndex === survey.pageOrder.length - 1}\n        onPrevPage={onPrevPage}\n        onNextPage={onNextPage}\n        backgroundColor={backgroundColor}\n      />\n    </>\n  );\n};\n\nexport default React.memo(SmileyRatingQuestionOption2);\n\nconst commonStyles = StyleSheet.create({\n  container: {\n    flex: 1,\n    paddingHorizontal: 42,\n    justifyContent: 'space-between',\n  },\n  infoContainer: {\n    flex: 1,\n    height: '100%',\n    alignItems: 'center',\n    justifyContent: 'space-around',\n  },\n  initInfoContainer: {\n    flex: 1,\n    flexDirection: 'column',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n  },\n  lottieContainer: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    height: '100%',\n  },\n  lottieContent: {\n    width: '100%',\n  },\n  selectedIndicatorStyle: {\n    opacity: 0,\n  },\n  itemTextStyle: {\n    fontSize: 24,\n    paddingVertical: 9,\n  },\n});\n\nconst phoneStyles = StyleSheet.create({\n  hintText: {\n    fontSize: 16,\n    fontWeight: '500',\n  },\n});\n\nconst tabletStyles = StyleSheet.create({\n  hintText: {\n    fontSize: 16,\n    fontWeight: '500',\n  },\n});\n"]}