{"version":3,"sources":["SingleChoiceQuestion.tsx"],"names":["ScrollView","Platform","OS","KeyboardAvoidingScrollView","RNScrollView","SingleChoiceQuestion","anonymous","question","onFeedback","forgot","feedback","themeColor","questionId","options","getInitialValueFromFeedbackProps","value","otherText","answers","answer","Number","isInteger","length","initialSelected","selected","setSelected","React","useState","handleFeedback","id","type","onChangeValueHandler","index","newValue","checked","undefined","otherFlag","buttonList","map","title","isOther","isActive","toString","commonStyles","container","memo","StyleSheet","create","flex","paddingHorizontal","fontSize","fontWeight","lineHeight","textAlign","marginBottom"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AAKA;;AACA;;AACA;;AACA;;;;AAEA,MAAMA,UAAU,GACdC,sBAASC,EAAT,KAAgB,KAAhB,GAAwBC,gDAAxB,GAAqDC,uBADvD;;AAqBA,MAAMC,oBAAoB,GAAG,CAAC;AAC5BC,EAAAA,SAD4B;AAE5BC,EAAAA,QAF4B;AAG5BC,EAAAA,UAH4B;AAI5B;AACAC,EAAAA,MAL4B;AAM5BC,EAAAA,QAN4B;AAO5BC,EAAAA;AAP4B,CAAD,KAQhB;AACX,QAAM;AAAEC,IAAAA;AAAF,MAAiBL,QAAvB;AACA,QAAMM,OAAO,GAAG,kCAAuBN,QAAvB,CAAhB;;AAEA,WAASO,gCAAT,GAA4C;AAC1C,QAAIC,KAAJ;AACA,QAAIC,SAAJ;;AACA,QAAIN,QAAQ,IAAIA,QAAQ,CAACO,OAArB,IAAgC,CAAC,kBAAMP,QAAQ,CAACO,OAAT,CAAiB,CAAjB,CAAN,CAArC,EAAiE;AAC/D,YAAMC,MAAM,GAAGR,QAAQ,CAACO,OAAT,CAAiB,CAAjB,CAAf;;AAEA,UAAIE,MAAM,CAACC,SAAP,CAAiBF,MAAjB,CAAJ,EAA8B;AAC5BH,QAAAA,KAAK,GAAGG,MAAR;AACD,OAFD,MAEO;AACL;AACA;AACA;AACAF,QAAAA,SAAS,GAAGE,MAAZ;AACAH,QAAAA,KAAK,GAAGR,QAAQ,CAACM,OAAT,CAAiBQ,MAAzB;AACD;AACF;;AACD,WAAO;AACLN,MAAAA,KAAK,EAAEA,KADF;AAELC,MAAAA;AAFK,KAAP;AAID;;AACD,QAAMM,eAAe,GAAGR,gCAAgC,EAAxD;;AAEA,QAAM,CAACS,QAAD,EAAWC,WAAX,IAA0BC,eAAMC,QAAN,CAAeJ,eAAf,CAAhC;;AAEA,QAAMK,cAAc,GAAIC,EAAD,IAAgB;AACrCJ,IAAAA,WAAW,CAAC;AACVT,MAAAA,KAAK,EAAEa,EADG;AAEVZ,MAAAA,SAAS,EAAEO,QAAQ,CAACP;AAFV,KAAD,CAAX;AAIAR,IAAAA,UAAU,CAAC;AACTI,MAAAA,UAAU,EAAEA,UADH;AAETK,MAAAA,OAAO,EAAE,CAACW,EAAD,CAFA;AAGTC,MAAAA,IAAI,EAAE;AAHG,KAAD,CAAV;AAKD,GAVD,CA7BW,CAyCX;;;AACA,QAAMC,oBAAoB,GAAG,CAC3BC,KAD2B,EAE3BC,QAF2B,KAGxB;AACHR,IAAAA,WAAW,CAAC;AACV;AACAT,MAAAA,KAAK,EAAEiB,QAAQ,CAACC,OAAT,GAAmBF,KAAnB,GAA2BG,SAFxB;AAGVlB,MAAAA,SAAS,EAAEgB,QAAQ,CAACC,OAAT,GAAmBD,QAAQ,CAACjB,KAA5B,GAAoC;AAHrC,KAAD,CAAX;AAKAP,IAAAA,UAAU,CAAC;AACTI,MAAAA,UAAU,EAAEA,UADH;AAET;AACA;AACAK,MAAAA,OAAO,EAAEe,QAAQ,CAACC,OAAT,GAAmB,CAACD,QAAQ,CAACjB,KAAV,CAAnB,GAAsC,EAJtC;AAKTc,MAAAA,IAAI,EAAE,cALG;AAOT;AACAM,MAAAA,SAAS,EAAEH,QAAQ,CAACC;AARX,KAAD,CAAV;AAUD,GAnBD;;AAqBA,QAAMG,UAAU,GAAGvB,OAAO,CAACwB,GAAR,CAAY,CAAC;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT,GAAD,EAAqBR,KAArB,KAA+B;AAAA;;AAC5D,UAAMS,QAAQ,GAAGjB,QAAQ,CAACR,KAAT,KAAmBgB,KAApC;AAEA,WAAOQ,OAAO,gBACZ,6BAAC,oCAAD;AACE,MAAA,GAAG,EAAER,KADP;AAEE,MAAA,EAAE,EAAEA,KAFN;AAGE,MAAA,IAAI,EAAE,OAHR;AAIE,MAAA,KAAK,EAAEO,KAJT;AAKE,MAAA,OAAO,EAAEE,QALX;AAME,MAAA,UAAU,EAAE7B,UANd;AAOE,MAAA,OAAO,EAAEgB,cAPX;AAQE,MAAA,aAAa,EAAEG,oBARjB;AASE,MAAA,SAAS,yBAAEP,QAAQ,CAACP,SAAX,wDAAE,oBAAoByB,QAApB,EATb;AAUE,MAAA,QAAQ,EAAElC,QAVZ;AAWE,MAAA,QAAQ,EAAEG,QAXZ;AAYE,MAAA,SAAS,EAAEJ;AAZb,MADY,gBAgBZ,6BAAC,+BAAD;AACE,MAAA,GAAG,EAAEyB,KADP;AAEE,MAAA,EAAE,EAAEA,KAFN;AAGE,MAAA,IAAI,EAAE,OAHR;AAIE,MAAA,KAAK,EAAEO,KAJT;AAKE,MAAA,OAAO,EAAEE,QALX;AAME,MAAA,UAAU,EAAE7B,UANd;AAOE,MAAA,OAAO,EAAEgB;AAPX,MAhBF;AA0BD,GA7BkB,CAAnB;AA+BA;AAAA;AACE;AACA,iCAAC,UAAD;AAAY,MAAA,kBAAkB,EAAE,EAAhC;AAAoC,MAAA,KAAK,EAAEe,YAAY,CAACC;AAAxD,oBACE,6BAAC,uBAAD;AAAgB,MAAA,MAAM,EAAElC,MAAxB;AAAgC,MAAA,QAAQ,EAAEF;AAA1C,MADF,EAEG6B,UAFH;AAFF;AAOD,CA7GD;;4BA+GeX,eAAMmB,IAAN,CAAWvC,oBAAX,C;;;;AAEf,MAAMqC,YAAY,GAAGG,wBAAWC,MAAX,CAAkB;AACrCH,EAAAA,SAAS,EAAE;AACTI,IAAAA,IAAI,EAAE,CADG;AAETC,IAAAA,iBAAiB,EAAE;AAFV,GAD0B;AAKrCV,EAAAA,KAAK,EAAE;AACLW,IAAAA,QAAQ,EAAE,EADL;AAELC,IAAAA,UAAU,EAAE,KAFP;AAGLC,IAAAA,UAAU,EAAE,EAHP;AAILC,IAAAA,SAAS,EAAE,QAJN;AAKLC,IAAAA,YAAY,EAAE;AALT;AAL8B,CAAlB,CAArB","sourcesContent":["import React from 'react';\nimport { StyleSheet, Platform, ScrollView as RNScrollView } from 'react-native';\nimport { KeyboardAvoidingScrollView } from './KeyboardAvoidingView';\nimport MandatoryTitle from './MandatoryTitle';\nimport type {\n  Feedback as OriginFeedback,\n  Question as OriginQuestion,\n} from '../data';\nimport { getOptionsFromQuestion } from '../utils/data';\nimport { isNil } from 'ramda';\nimport NewOtherOptionWithHighlight from './NewOtherOptionWithHighlight';\nimport NewOptionWithHighlight from './NewOptionWithHighlight';\n\nconst ScrollView =\n  Platform.OS === 'ios' ? KeyboardAvoidingScrollView : RNScrollView;\n\ntype Question = OriginQuestion & {\n  options: string[];\n  otherText: string;\n};\n\ntype Feedback = OriginFeedback & {\n  answers: (string | number)[];\n};\n\ntype Props = {\n  anonymous: boolean;\n  question: Question;\n  onFeedback: (feedback: Feedback) => void;\n  forgot: boolean;\n  feedback: Feedback;\n  themeColor: string;\n};\n\nconst SingleChoiceQuestion = ({\n  anonymous,\n  question,\n  onFeedback,\n  // need add new design about if user forgot answer\n  forgot,\n  feedback,\n  themeColor,\n}: Props) => {\n  const { questionId } = question;\n  const options = getOptionsFromQuestion(question);\n\n  function getInitialValueFromFeedbackProps() {\n    let value;\n    let otherText;\n    if (feedback && feedback.answers && !isNil(feedback.answers[0])) {\n      const answer = feedback.answers[0];\n\n      if (Number.isInteger(answer)) {\n        value = answer;\n      } else {\n        // if the answer is not a number type,\n        // it is for other label, return the last index\n        // @ts-ignore\n        otherText = answer;\n        value = question.options.length;\n      }\n    }\n    return {\n      value: value,\n      otherText,\n    };\n  }\n  const initialSelected = getInitialValueFromFeedbackProps();\n\n  const [selected, setSelected] = React.useState(initialSelected);\n\n  const handleFeedback = (id: number) => {\n    setSelected({\n      value: id,\n      otherText: selected.otherText,\n    });\n    onFeedback({\n      questionId: questionId,\n      answers: [id],\n      type: 'singleChoice',\n    });\n  };\n\n  // when other option's value is changed, newValues is {checked: boolean, value: string}\n  const onChangeValueHandler = (\n    index: any,\n    newValue: { checked: boolean; value: string | undefined }\n  ) => {\n    setSelected({\n      // if newValues is checked, set value to this index\n      value: newValue.checked ? index : undefined,\n      otherText: newValue.checked ? newValue.value : '',\n    });\n    onFeedback({\n      questionId: questionId,\n      // the answer of this feedback is the text value\n      // @ts-ignore\n      answers: newValue.checked ? [newValue.value] : [],\n      type: 'singleChoice',\n\n      // set otherFlag if newValue is checked\n      otherFlag: newValue.checked,\n    });\n  };\n\n  const buttonList = options.map(({ title, isOther }, index) => {\n    const isActive = selected.value === index;\n\n    return isOther ? (\n      <NewOtherOptionWithHighlight\n        key={index}\n        id={index}\n        type={'radio'}\n        title={title}\n        checked={isActive}\n        themeColor={themeColor}\n        onPress={handleFeedback}\n        onChangeValue={onChangeValueHandler}\n        textValue={selected.otherText?.toString()}\n        question={question}\n        feedback={feedback}\n        anonymous={anonymous}\n      />\n    ) : (\n      <NewOptionWithHighlight\n        key={index}\n        id={index}\n        type={'radio'}\n        title={title}\n        checked={isActive}\n        themeColor={themeColor}\n        onPress={handleFeedback}\n      />\n    );\n  });\n\n  return (\n    // @ts-ignore\n    <ScrollView extraAvoidingSpace={30} style={commonStyles.container}>\n      <MandatoryTitle forgot={forgot} question={question} />\n      {buttonList}\n    </ScrollView>\n  );\n};\n\nexport default React.memo(SingleChoiceQuestion);\n\nconst commonStyles = StyleSheet.create({\n  container: {\n    flex: 1,\n    paddingHorizontal: 42,\n  },\n  title: {\n    fontSize: 26,\n    fontWeight: '600',\n    lineHeight: 32,\n    textAlign: 'center',\n    marginBottom: 54,\n  },\n});\n"]}