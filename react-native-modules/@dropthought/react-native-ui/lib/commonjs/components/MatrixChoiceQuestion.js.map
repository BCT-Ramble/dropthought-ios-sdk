{"version":3,"sources":["MatrixChoiceQuestion.tsx"],"names":["MatrixColoum","title","rowIndex","coloumIndex","themeColor","selectedAnswer","onColoumPress","colorScheme","fontColor","isSelected","some","value","isDark","COLOR_SCHEMES","dark","containerBackgroundColor","borderColor","Colors","rankingContainerBgDark","white","optionContainerStyle","styles","optionContainer","optionShadow","backgroundColor","textStyle","color","checkBoxIconStyle","checkBoxIcon","tintColor","unCheckBoxStyle","unCheckBox","rankingCheckBoxBorder","coloumButton","require","GlobalStyle","flex1","optionText","MatrixRow","question","collapseList","onRowPress","questionId","optionsForMatrix","optionsMatrix","isCollapse","rowSelectedAnswer","icon","containerStyle","rowContainer","rankingBGDark","rankingBorderDark","rankingBorder","optionsList","map","index","optionSelectedText","optionOtherText","length","join","selectedTextStyle","selectedText","titleButton","titleButtonText","titleButtonContent","selectedOtherText","titleContent","MatrixChoiceQuestion","onFeedback","feedback","forgot","questionTitles","handleMatrixChoiceErrorHint","container","scrollViewContainer","constent","item","React","memo","StyleSheet","create","questionContainer","marginBottom","paddingHorizontal","borderRadius","borderWidth","flexDirection","justifyContent","alignItems","paddingVertical","flex","row","paddingBottom","shadowColor","shadowOffset","width","height","shadowOpacity","shadowRadius","elevation","fontSize","fontWeight","borderStyle","marginRight"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {\n  View,\n  StyleSheet,\n  Text,\n  Image,\n  TouchableOpacity,\n  FlatList,\n  ScrollView,\n} from 'react-native';\nimport GlobalStyle, { Colors, addOpacityToColor } from '../styles';\nimport MandatoryTitle from './MandatoryTitle';\nimport type { Question } from '../data';\nimport useMatrixChoice from '../hooks/useMatrixChoice';\nimport type { MatrixChoiceFeedback } from '../hooks/useMatrixChoice';\nimport { useTheme, COLOR_SCHEMES } from '../contexts/theme';\n\ntype ColoumProps = {\n  title: string;\n  rowIndex: number;\n  coloumIndex: number;\n  themeColor: string;\n  selectedAnswer: number[][];\n  onColoumPress: (rowIndex: number, coloumIndex: number) => void;\n};\n\ntype RowProps = {\n  title: string;\n  rowIndex: number;\n  question: Question;\n  themeColor: string;\n  selectedAnswer: number[][];\n  collapseList: boolean[];\n  onRowPress: (rowIndex: number) => void;\n  onColoumPress: (rowIndex: number, coloumIndex: number) => void;\n};\n\ntype Props = {\n  question: Question;\n  onFeedback: (feedback: MatrixChoiceFeedback) => void;\n  feedback: MatrixChoiceFeedback;\n  forgot: boolean;\n  themeColor: string;\n};\n\nconst MatrixColoum = ({\n  title,\n  rowIndex,\n  coloumIndex,\n  themeColor,\n  selectedAnswer,\n  onColoumPress,\n}: ColoumProps) => {\n  const { colorScheme, fontColor } = useTheme();\n  const isSelected = selectedAnswer[rowIndex].some(\n    (value) => value === coloumIndex\n  );\n  const isDark = colorScheme === COLOR_SCHEMES.dark;\n  let containerBackgroundColor;\n  let borderColor;\n\n  if (isDark && isSelected) {\n    containerBackgroundColor = addOpacityToColor(themeColor, 0.1);\n    borderColor = themeColor;\n  } else if (isDark && !isSelected) {\n    containerBackgroundColor = Colors.rankingContainerBgDark;\n    borderColor = Colors.rankingContainerBgDark;\n  } else if (!isDark && isSelected) {\n    containerBackgroundColor = addOpacityToColor(themeColor, 0.1);\n    borderColor = themeColor;\n  } else if (!isDark && !isSelected) {\n    containerBackgroundColor = Colors.white;\n    borderColor = Colors.white;\n  }\n\n  const optionContainerStyle = [\n    styles.optionContainer,\n    isSelected ? null : styles.optionShadow,\n    {\n      backgroundColor: containerBackgroundColor,\n      borderColor: borderColor,\n    },\n  ];\n  const textStyle = {\n    color: fontColor,\n  };\n  const checkBoxIconStyle = [\n    styles.checkBoxIcon,\n    {\n      tintColor: themeColor,\n    },\n  ];\n  const unCheckBoxStyle = [\n    styles.unCheckBox,\n    {\n      borderColor: isDark ? Colors.white : Colors.rankingCheckBoxBorder,\n      backgroundColor: isDark ? Colors.rankingContainerBgDark : Colors.white,\n    },\n  ];\n\n  return (\n    <View style={optionContainerStyle}>\n      <TouchableOpacity\n        style={styles.coloumButton}\n        onPress={() => onColoumPress(rowIndex, coloumIndex)}\n      >\n        {isSelected ? (\n          <Image\n            style={checkBoxIconStyle}\n            // @ts-ignore\n            source={require('../assets/icCheckBox24Px.png')}\n          />\n        ) : (\n          <View style={unCheckBoxStyle} />\n        )}\n        <View style={GlobalStyle.flex1}>\n          <Text numberOfLines={2} style={[styles.optionText, textStyle]}>\n            {title}\n          </Text>\n        </View>\n      </TouchableOpacity>\n    </View>\n  );\n};\n\nconst MatrixRow = ({\n  title,\n  rowIndex,\n  question,\n  themeColor,\n  selectedAnswer,\n  collapseList,\n  onRowPress,\n  onColoumPress,\n}: RowProps) => {\n  const { questionId, optionsForMatrix } = question;\n  const optionsMatrix = optionsForMatrix[0];\n  const { colorScheme, fontColor } = useTheme();\n  const isDark = colorScheme === COLOR_SCHEMES.dark;\n  const isCollapse = collapseList[rowIndex];\n  const rowSelectedAnswer = selectedAnswer[rowIndex];\n\n  const icon = isCollapse\n    ? require('../assets/ic-extand-down.png')\n    : require('../assets/ic-extand-up.png');\n\n  const containerStyle = [\n    styles.rowContainer,\n    {\n      backgroundColor: isDark\n        ? Colors.rankingBGDark\n        : addOpacityToColor(themeColor, 0.05),\n      borderColor: isDark ? Colors.rankingBorderDark : Colors.rankingBorder,\n    },\n  ];\n  const textStyle = {\n    color: fontColor,\n  };\n\n  const optionsList = !isCollapse\n    ? optionsMatrix.map((value, index) => (\n        <MatrixColoum\n          title={value}\n          rowIndex={rowIndex}\n          coloumIndex={index}\n          themeColor={themeColor}\n          selectedAnswer={selectedAnswer}\n          onColoumPress={onColoumPress}\n          key={`${questionId}-${value}-${index}`}\n        />\n      ))\n    : null;\n\n  let optionSelectedText = '';\n  let optionOtherText = '';\n  if (rowSelectedAnswer[0] !== -1) {\n    if (rowSelectedAnswer.length > 1) {\n      optionSelectedText = `${optionsMatrix[rowSelectedAnswer[0]]}`;\n      optionOtherText = ` +${rowSelectedAnswer.length - 1} Other`;\n    } else {\n      optionSelectedText = rowSelectedAnswer\n        .map((value) => optionsMatrix[value])\n        .join();\n    }\n  }\n  const selectedTextStyle = [\n    styles.selectedText,\n    {\n      color: fontColor,\n    },\n  ];\n\n  return (\n    <View style={containerStyle}>\n      <TouchableOpacity\n        style={styles.titleButton}\n        onPress={() => onRowPress(rowIndex)}\n      >\n        <View style={styles.titleButtonText}>\n          <Text style={[styles.optionText, textStyle]}>{title}</Text>\n        </View>\n        <View style={styles.titleButtonContent}>\n          <Text style={selectedTextStyle}>\n            <Text>{optionSelectedText}</Text>\n            <Text style={styles.selectedOtherText}>{optionOtherText}</Text>\n          </Text>\n        </View>\n        <Image source={icon} />\n      </TouchableOpacity>\n      {!isCollapse ? (\n        <View style={styles.titleContent}>{optionsList}</View>\n      ) : null}\n    </View>\n  );\n};\n\nconst MatrixChoiceQuestion = ({\n  question,\n  onFeedback,\n  feedback,\n  forgot,\n  themeColor,\n}: Props) => {\n  const { questionTitles } = question;\n  const {\n    collapseList,\n    selectedAnswer,\n    handleMatrixChoiceErrorHint,\n    onRowPress,\n    onColoumPress,\n  } = useMatrixChoice(question, feedback, onFeedback);\n\n  return (\n    <View style={styles.container}>\n      <MandatoryTitle\n        forgot={false}\n        question={question}\n        style={styles.title}\n        invalidMessage={handleMatrixChoiceErrorHint(forgot)}\n      />\n      {/* keep the ScrollView below to prevent error => \"VirtualizedLists\n          should never be nested inside plain ScrollViews with the same\n          orientation because it can break windowing and other functionality\n          - use another VirtualizedList-backed container instead\" */}\n      <ScrollView\n        horizontal\n        scrollEnabled={false}\n        contentContainerStyle={styles.scrollViewContainer}\n      >\n        <FlatList\n          data={questionTitles}\n          style={GlobalStyle.flex1}\n          contentContainerStyle={styles.constent}\n          renderItem={({ item, index }) => (\n            <MatrixRow\n              title={item}\n              rowIndex={index}\n              question={question}\n              themeColor={themeColor}\n              selectedAnswer={selectedAnswer}\n              collapseList={collapseList}\n              onRowPress={onRowPress}\n              onColoumPress={onColoumPress}\n            />\n          )}\n          keyExtractor={(title, index) => `${title}-${index}`}\n        />\n      </ScrollView>\n    </View>\n  );\n};\n\nexport default React.memo(MatrixChoiceQuestion);\n\nconst styles = StyleSheet.create({\n  container: {\n    ...GlobalStyle.questionContainer,\n    ...GlobalStyle.flex1,\n  },\n  title: {\n    marginBottom: 16,\n    paddingHorizontal: 30,\n  },\n  constent: {\n    paddingHorizontal: 30,\n  },\n  rowContainer: {\n    marginBottom: 8,\n    borderRadius: 8,\n    borderWidth: 1,\n  },\n  titleButton: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    paddingHorizontal: 12,\n    paddingVertical: 16,\n  },\n  titleButtonText: {\n    flex: 6,\n  },\n  titleButtonContent: {\n    ...GlobalStyle.row,\n    flex: 4,\n    justifyContent: 'flex-end',\n    paddingHorizontal: 8,\n  },\n  titleContent: {\n    paddingHorizontal: 12,\n    paddingBottom: 16,\n  },\n  optionContainer: {\n    borderRadius: 8,\n    borderWidth: 1,\n    marginBottom: 8,\n  },\n  optionShadow: {\n    shadowColor: 'black',\n    shadowOffset: { width: 0, height: 1 },\n    shadowOpacity: 0.1,\n    shadowRadius: 4,\n    elevation: 4,\n  },\n  coloumButton: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingVertical: 8,\n    paddingHorizontal: 12,\n  },\n  optionText: {\n    fontSize: 15,\n  },\n  selectedText: {\n    width: '100%',\n  },\n  selectedOtherText: {\n    fontWeight: '500',\n  },\n  unCheckBox: {\n    width: 20,\n    height: 20,\n    borderStyle: 'solid',\n    borderWidth: 1,\n    borderColor: Colors.rankingCheckBoxBorder,\n    marginRight: 18,\n    borderRadius: 3,\n  },\n  checkBoxIcon: {\n    width: 20,\n    height: 20,\n    backgroundColor: '#ffffff',\n    marginRight: 18,\n    borderRadius: 3,\n  },\n  scrollViewContainer: {\n    width: '100%',\n  },\n});\n"]}