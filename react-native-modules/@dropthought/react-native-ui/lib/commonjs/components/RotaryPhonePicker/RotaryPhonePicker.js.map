{"version":3,"sources":["RotaryPhonePicker.tsx"],"names":["RotaryPhonePicker","list","scale","selectedIndex","updateScore","numberScale","Number","listLength","length","deltaTheta","radiusOfOrbiting","radiusOfCenter","setRadiusOfCenter","container","setContainer","height","width","renderAnim","Animated","Value","current","renderAnimValue","tempAnim","offset","Math","trunc","panResponder","PanResponder","create","onStartShouldSetPanResponder","onMoveShouldSetPanResponderCapture","onMoveShouldSetPanResponder","onPanResponderGrant","onPanResponderMove","_event","gestureState","dx","setValue","onPanResponderRelease","flattenOffset","selectedCircle","round","circleValue","panSelectedIndex","isOutOfScoreRange","isAtCoverPage","resetValue","spring","toValue","velocity","friction","tension","useNativeDriver","start","handleLayout","nativeEvent","layout","rotateInterpolate","interpolate","inputRange","outputRange","animatedStyles","transform","rotate","itemStyle","index","left","sin","PI","top","cos","opacity","styles","panHandlers","content","map","value","item","cursor","require"],"mappings":"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","sourcesContent":["import React, { useState, useRef } from 'react';\nimport {\n  View,\n  PanResponder,\n  Animated,\n  LayoutChangeEvent,\n  Image,\n} from 'react-native';\nimport styles from './RotaryPhonePicker.styles';\nimport LottieView from 'lottie-react-native';\n\ninterface Props {\n  list: string[];\n  scale?: string;\n  selectedIndex: number;\n  updateScore: (currentIndex: number) => void;\n}\n\nconst RotaryPhonePicker = ({\n  list,\n  scale = '5',\n  selectedIndex,\n  updateScore,\n}: Props) => {\n  const numberScale = Number(scale);\n  const listLength = list.length;\n  const deltaTheta = -360 / listLength;\n\n  const radiusOfOrbiting = 30;\n  const [radiusOfCenter, setRadiusOfCenter] = useState(0);\n  const [container, setContainer] = useState({ height: 0, width: 0 });\n\n  let renderAnim = useRef(new Animated.Value(0)).current;\n  const renderAnimValue = useRef(0);\n  let tempAnim = useRef(0).current;\n\n  const offset = () => Math.trunc(container.width / 2) - radiusOfOrbiting;\n\n  const panResponder = PanResponder.create({\n    onStartShouldSetPanResponder: () => true,\n    onMoveShouldSetPanResponderCapture: () => true,\n    onMoveShouldSetPanResponder: () => true,\n    onPanResponderGrant: () => {\n      tempAnim = renderAnimValue.current;\n    },\n    onPanResponderMove: (_event, gestureState) => {\n      renderAnimValue.current = tempAnim + gestureState.dx;\n      renderAnim.setValue(tempAnim + gestureState.dx);\n    },\n    onPanResponderRelease: () => {\n      renderAnim.flattenOffset();\n\n      const selectedCircle = Math.round(\n        renderAnimValue.current / (360 / listLength)\n      );\n      const circleValue = (selectedCircle * 360) / listLength;\n      const panSelectedIndex = selectedCircle * -1;\n\n      const isOutOfScoreRange =\n        panSelectedIndex <= 0 || panSelectedIndex > numberScale;\n      const isAtCoverPage = selectedIndex === 0;\n\n      if (isAtCoverPage && panSelectedIndex > 0) {\n        updateScore(panSelectedIndex);\n      } else if (!isOutOfScoreRange) {\n        updateScore(panSelectedIndex);\n      }\n\n      let resetValue = 0;\n      if (panSelectedIndex <= 0) {\n        updateScore(1);\n        resetValue = -45;\n        renderAnimValue.current = resetValue;\n      } else if (panSelectedIndex > numberScale) {\n        updateScore(numberScale);\n        resetValue = -45 * numberScale;\n        renderAnimValue.current = resetValue;\n      }\n\n      Animated.spring(renderAnim, {\n        toValue: isOutOfScoreRange ? resetValue : circleValue,\n        velocity: 5,\n        friction: 10,\n        tension: 20,\n        useNativeDriver: false,\n      }).start();\n    },\n  });\n\n  const handleLayout = ({ nativeEvent }: LayoutChangeEvent) => {\n    setRadiusOfCenter(nativeEvent.layout.width * 0.65);\n    setContainer({\n      height: nativeEvent.layout.height,\n      width: nativeEvent.layout.width,\n    });\n  };\n\n  const rotateInterpolate = renderAnim.interpolate({\n    inputRange: [-45, 0, 45],\n    outputRange: ['-45deg', '0deg', '45deg'],\n  });\n\n  const animatedStyles = {\n    transform: [{ rotate: rotateInterpolate }],\n  };\n\n  const itemStyle = (index: number) => {\n    return {\n      left:\n        Math.sin((index * deltaTheta * Math.PI) / 180 + Math.PI) *\n          radiusOfCenter +\n        offset(),\n      top:\n        Math.cos((index * deltaTheta * Math.PI) / 180 + Math.PI) *\n          radiusOfCenter +\n        offset(),\n      transform: [{ rotate: `${45 * index}deg` }],\n      opacity: selectedIndex === index ? 1 : 0.3,\n    };\n  };\n\n  return (\n    <View style={styles.container} {...panResponder.panHandlers}>\n      <Animated.View\n        onLayout={handleLayout}\n        style={[styles.content, animatedStyles]}\n      >\n        {list.map((value, index) => {\n          return (\n            <View style={[styles.item, itemStyle(index)]} key={index}>\n              {index <= numberScale ? (\n                <LottieView source={value} autoPlay />\n              ) : null}\n            </View>\n          );\n        })}\n      </Animated.View>\n      <Image\n        style={styles.cursor}\n        source={require('../../assets/icOption6Cursor.png')}\n      />\n    </View>\n  );\n};\n\nexport default RotaryPhonePicker;\n"]}