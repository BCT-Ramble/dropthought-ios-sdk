{"version":3,"sources":["MultiLineTextInput.tsx"],"names":["metadataTypeKeyboard","metadataType","QuestionMetaDataType","Email","Phone","Number","Platform","select","ios","default","Date","metadataTypeAutoCapitalize","Name","MultiLineTextInput","onEndEditingHandler","onChangeTextHandler","themeColor","feedback","question","anonymous","inputRef","showErrorHint","checked","props","colorScheme","fontColor","metaDataType","questionBrand","scale","type","MAX_CHARACTER","appearanceTextColorStyle","color","hasEdited","setHasEdited","React","useState","text","setText","answers","rtl","i18n","dir","showAnonymousWarning","onEndEditing","onChangeText","t","characterLeft","length","AT_LEAST_CHARACTER","isInputInValid","bottomText","bottomTextColor","Colors","warningRed","count","black","appearanceSubBackgroundColorStyle","backgroundColor","COLOR_SCHEMES","dark","appearanceSubBlack","inputValidStyle","borderWidth","borderColor","textInputStyle","styles","inputContainer","GlobalStyle","textAlignRight","rightDescTextStyle","descText","descRight","opacity","leftDescTextStyle","descLeft","inputView","inputPlaceholder","bottomView","subTextRow","flexRowReverse"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {\n  View,\n  Text,\n  TextInput,\n  KeyboardTypeOptions,\n  Platform,\n} from 'react-native';\nimport styles from './MultiLineTextInput.styles';\nimport { QuestionMetaDataType } from '../../utils/data';\nimport i18n from '../../translation';\nimport type {\n  Question,\n  QuestionMetaDataType as TypeQuestionMetaDataType,\n  Feedback,\n} from '../../data';\nimport { Colors, addOpacityToColor, GlobalStyle } from '../../styles';\nimport { useTheme } from '../../contexts/theme';\nimport { COLOR_SCHEMES } from '../../contexts/theme/theme.const';\n\nconst metadataTypeKeyboard = (\n  metadataType: TypeQuestionMetaDataType | undefined\n): KeyboardTypeOptions | undefined => {\n  switch (metadataType) {\n    case QuestionMetaDataType.Email:\n      return 'email-address';\n    case QuestionMetaDataType.Phone:\n      return 'phone-pad';\n    case QuestionMetaDataType.Number:\n      return Platform.select({\n        ios: 'numbers-and-punctuation',\n        default: 'default',\n      });\n    case QuestionMetaDataType.Date:\n    default:\n      return 'default';\n  }\n};\n\nconst metadataTypeAutoCapitalize = (\n  metadataType: TypeQuestionMetaDataType | undefined\n) => {\n  switch (metadataType) {\n    case QuestionMetaDataType.Name:\n      return 'words';\n    case QuestionMetaDataType.Email:\n    case QuestionMetaDataType.Phone:\n    case QuestionMetaDataType.Date:\n    case QuestionMetaDataType.Number:\n      return 'none';\n    default:\n      return 'sentences';\n  }\n};\n\ninterface Props {\n  onEndEditingHandler?: () => void;\n  onChangeTextHandler?: (t: string) => void;\n  themeColor: string;\n  feedback: Feedback;\n  question: Question;\n  anonymous?: boolean;\n  inputRef?: React.RefObject<TextInput>;\n  showErrorHint?: boolean;\n  checked?: boolean;\n}\n\nconst MultiLineTextInput: React.FC<Props> = ({\n  onEndEditingHandler,\n  onChangeTextHandler,\n  themeColor,\n  feedback,\n  question,\n  anonymous,\n  inputRef,\n  showErrorHint = true,\n  checked = true,\n  ...props\n}) => {\n  const { colorScheme, fontColor } = useTheme();\n  const { metaDataType, questionBrand, scale = 64, type } = question;\n  const MAX_CHARACTER = type === 'open' ? Number(scale) : 100;\n  const appearanceTextColorStyle = { color: fontColor };\n  const [hasEdited, setHasEdited] = React.useState(false);\n  const [text, setText] = React.useState<string>(\n    feedback?.answers[0] ? `${feedback?.answers[0]}` : ''\n  );\n\n  const rtl = i18n.dir() === 'rtl';\n  const showAnonymousWarning =\n    anonymous &&\n    metaDataType &&\n    (metaDataType === 'Email' ||\n      metaDataType === 'Name' ||\n      metaDataType === 'Phone');\n\n  const onEndEditing = () => {\n    setHasEdited(true);\n    onEndEditingHandler && onEndEditingHandler();\n  };\n\n  const onChangeText = (t: string) => {\n    setText(t);\n    onChangeTextHandler && onChangeTextHandler(t);\n  };\n\n  const characterLeft = MAX_CHARACTER - text.length;\n  const AT_LEAST_CHARACTER = 3;\n  const isInputInValid = hasEdited && text.length < AT_LEAST_CHARACTER;\n\n  let bottomText = '';\n  let bottomTextColor = Colors.warningRed;\n  if (isInputInValid && showErrorHint) {\n    bottomText = i18n.t('open-question-invalid-message:characters', {\n      count: AT_LEAST_CHARACTER,\n    });\n  } else if (showAnonymousWarning) {\n    bottomText = i18n.t('survey:metadata-anonymous-warning');\n    bottomTextColor = addOpacityToColor(Colors.black, 0.6);\n  }\n\n  const appearanceSubBackgroundColorStyle = {\n    backgroundColor: addOpacityToColor(\n      colorScheme === COLOR_SCHEMES.dark\n        ? Colors.appearanceSubBlack\n        : themeColor,\n      0.08\n    ),\n  };\n  const inputValidStyle = {\n    borderWidth: 1,\n    borderColor: Colors.warningRed,\n  };\n  const textInputStyle = [\n    styles.inputContainer,\n    appearanceTextColorStyle,\n    appearanceSubBackgroundColorStyle,\n    isInputInValid && showErrorHint ? inputValidStyle : null,\n    rtl && GlobalStyle.textAlignRight,\n  ];\n  const rightDescTextStyle = [\n    styles.descText,\n    styles.descRight,\n    appearanceTextColorStyle,\n    { opacity: 0.8 },\n  ];\n  const leftDescTextStyle = [\n    styles.descText,\n    styles.descLeft,\n    {\n      color: bottomTextColor,\n    },\n  ];\n\n  const inputView = (\n    <TextInput\n      ref={inputRef}\n      style={textInputStyle}\n      multiline={true}\n      onChangeText={onChangeText}\n      placeholder={questionBrand}\n      placeholderTextColor={Colors.inputPlaceholder}\n      onEndEditing={onEndEditing}\n      value={text}\n      maxLength={MAX_CHARACTER}\n      keyboardType={metadataTypeKeyboard(metaDataType)}\n      autoCapitalize={metadataTypeAutoCapitalize(metaDataType)}\n      {...props}\n    />\n  );\n\n  const bottomView = (\n    <View style={[styles.subTextRow, rtl && GlobalStyle.flexRowReverse]}>\n      <Text style={leftDescTextStyle} numberOfLines={2}>\n        {bottomText}\n      </Text>\n      <Text style={rightDescTextStyle}>\n        {characterLeft + ' / ' + MAX_CHARACTER}\n      </Text>\n    </View>\n  );\n\n  return (\n    <>\n      {checked ? (\n        <View>\n          {inputView}\n          {bottomView}\n        </View>\n      ) : null}\n    </>\n  );\n};\n\nexport default MultiLineTextInput;\n"]}