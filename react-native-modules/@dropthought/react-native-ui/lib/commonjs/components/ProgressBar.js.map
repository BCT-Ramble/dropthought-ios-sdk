{"version":3,"sources":["ProgressBar.tsx"],"names":["ProgressBar","value","maxValue","themeColor","color","rtl","percentage","Math","round","containerStyle","styles","container","GlobalStyle","flexRowReverse","trackStyle","track","backgroundColor","progressBarStyle","progressBar","width","textStyle","title","textAlignRight","i18n","t","StyleSheet","create","marginTop","fontSize","fontWeight","borderRadius","height","position","React","memo"],"mappings":";;;;;;;AAAA;;AACA;;AAEA;;AACA;;;;;;;;AAeA,MAAMA,WAAW,GAAG,CAAC;AAAEC,EAAAA,KAAF;AAASC,EAAAA,QAAT;AAAmBC,EAAAA,UAAnB;AAA+BC,EAAAA,KAA/B;AAAsCC,EAAAA;AAAtC,CAAD,KAAwD;AAC1E;AACA,QAAMC,UAAU,GAAGC,IAAI,CAACC,KAAL,CAAYP,KAAK,GAAG,GAAT,GAAgBC,QAA3B,CAAnB;AAEA,QAAMO,cAAc,GAAG,CAACC,MAAM,CAACC,SAAR,EAAmBN,GAAG,IAAIO,oBAAYC,cAAtC,CAAvB;AAEA,QAAMC,UAAU,GAAG,CACjBJ,MAAM,CAACK,KADU,EAEjB;AACEC,IAAAA,eAAe,EAAE,uBAAUb,UAAV;AADnB,GAFiB,CAAnB;AAOA,QAAMc,gBAAgB,GAAG,CACvBP,MAAM,CAACQ,WADgB,EAEvBR,MAAM,CAACK,KAFgB,EAGvB;AACEI,IAAAA,KAAK,EAAG,GAAEb,UAAW,GADvB;AAEEU,IAAAA,eAAe,EAAEb;AAFnB,GAHuB,CAAzB;AASA,QAAMiB,SAAS,GAAG,CAChBV,MAAM,CAACW,KADS,EAEhBhB,GAAG,IAAIO,oBAAYU,cAFH,EAGhB;AAAElB,IAAAA;AAAF,GAHgB,CAAlB;AAMA,sBACE,oBAAC,iBAAD;AAAM,IAAA,KAAK,EAAEK;AAAb,kBACE,oBAAC,iBAAD;AAAM,IAAA,KAAK,EAAEK;AAAb,IADF,eAEE,oBAAC,iBAAD;AAAM,IAAA,KAAK,EAAEG;AAAb,IAFF,eAGE,oBAAC,iBAAD;AAAM,IAAA,KAAK,EAAEG;AAAb,KACI,GAAEG,qBAAKC,CAAL,CAAO,yBAAP,CAAkC,IAAGvB,KAAM,IAAGC,QAAS,EAD7D,CAHF,CADF;AASD,CArCD;;AAuCA,MAAMQ,MAAM,GAAGe,wBAAWC,MAAX,CAAkB;AAC/Bf,EAAAA,SAAS,EAAE;AACTgB,IAAAA,SAAS,EAAE;AADF,GADoB;AAI/BN,EAAAA,KAAK,EAAE;AACLO,IAAAA,QAAQ,EAAE,EADL;AAELC,IAAAA,UAAU,EAAE,KAFP;AAGLF,IAAAA,SAAS,EAAE;AAHN,GAJwB;AAS/BZ,EAAAA,KAAK,EAAE;AACLe,IAAAA,YAAY,EAAE,CADT;AAELC,IAAAA,MAAM,EAAE;AAFH,GATwB;AAa/Bb,EAAAA,WAAW,EAAE;AACXc,IAAAA,QAAQ,EAAE;AADC;AAbkB,CAAlB,CAAf;;4BAkBeC,KAAK,CAACC,IAAN,CAAWlC,WAAX,C","sourcesContent":["import * as React from 'react';\nimport { StyleSheet, View, Text } from 'react-native';\n\nimport { GlobalStyle, opacity30 } from '../styles';\nimport i18n from '../translation';\n\n/**\n * The ProgressBar will use `value` and `maxValue` to\n * compute the percentage\n */\n\ntype Props = {\n  value: number; // the current value\n  maxValue: number; // the max\n  themeColor: string; // the bar color\n  color: string; // the bar text color\n  rtl: boolean;\n};\n\nconst ProgressBar = ({ value, maxValue, themeColor, color, rtl }: Props) => {\n  // compute the percentage value: (value/maxValue)*100\n  const percentage = Math.round((value * 100) / maxValue);\n\n  const containerStyle = [styles.container, rtl && GlobalStyle.flexRowReverse];\n\n  const trackStyle = [\n    styles.track,\n    {\n      backgroundColor: opacity30(themeColor),\n    },\n  ];\n\n  const progressBarStyle = [\n    styles.progressBar,\n    styles.track,\n    {\n      width: `${percentage}%`,\n      backgroundColor: themeColor,\n    },\n  ];\n\n  const textStyle = [\n    styles.title,\n    rtl && GlobalStyle.textAlignRight,\n    { color },\n  ];\n\n  return (\n    <View style={containerStyle}>\n      <View style={trackStyle} />\n      <View style={progressBarStyle} />\n      <Text style={textStyle}>\n        {`${i18n.t('survey:new-progress-bar')} ${value}/${maxValue}`}\n      </Text>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    marginTop: 25,\n  },\n  title: {\n    fontSize: 14,\n    fontWeight: '500',\n    marginTop: 12,\n  },\n  track: {\n    borderRadius: 1,\n    height: 2,\n  },\n  progressBar: {\n    position: 'absolute',\n  },\n});\n\nexport default React.memo(ProgressBar);\n"]}