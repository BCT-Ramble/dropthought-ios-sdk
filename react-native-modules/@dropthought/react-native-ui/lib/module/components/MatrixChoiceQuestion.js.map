{"version":3,"sources":["MatrixChoiceQuestion.tsx"],"names":["React","View","StyleSheet","Text","Image","TouchableOpacity","FlatList","ScrollView","GlobalStyle","Colors","addOpacityToColor","MandatoryTitle","useMatrixChoice","useTheme","COLOR_SCHEMES","MatrixColoum","title","rowIndex","coloumIndex","themeColor","selectedAnswer","onColoumPress","colorScheme","fontColor","isSelected","some","value","isDark","dark","containerBackgroundColor","borderColor","rankingContainerBgDark","white","optionContainerStyle","styles","optionContainer","optionShadow","backgroundColor","textStyle","color","checkBoxIconStyle","checkBoxIcon","tintColor","unCheckBoxStyle","unCheckBox","rankingCheckBoxBorder","coloumButton","require","flex1","optionText","MatrixRow","question","collapseList","onRowPress","questionId","optionsForMatrix","optionsMatrix","isCollapse","rowSelectedAnswer","icon","containerStyle","rowContainer","rankingBGDark","rankingBorderDark","rankingBorder","optionsList","map","index","optionSelectedText","optionOtherText","length","join","selectedTextStyle","selectedText","titleButton","titleButtonText","titleButtonContent","selectedOtherText","titleContent","MatrixChoiceQuestion","onFeedback","feedback","forgot","questionTitles","handleMatrixChoiceErrorHint","container","scrollViewContainer","constent","item","memo","create","questionContainer","marginBottom","paddingHorizontal","borderRadius","borderWidth","flexDirection","justifyContent","alignItems","paddingVertical","flex","row","paddingBottom","shadowColor","shadowOffset","width","height","shadowOpacity","shadowRadius","elevation","fontSize","fontWeight","borderStyle","marginRight"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {\n  View,\n  StyleSheet,\n  Text,\n  Image,\n  TouchableOpacity,\n  FlatList,\n  ScrollView,\n} from 'react-native';\nimport GlobalStyle, { Colors, addOpacityToColor } from '../styles';\nimport MandatoryTitle from './MandatoryTitle';\nimport type { Question } from '../data';\nimport useMatrixChoice from '../hooks/useMatrixChoice';\nimport type { MatrixChoiceFeedback } from '../hooks/useMatrixChoice';\nimport { useTheme, COLOR_SCHEMES } from '../contexts/theme';\n\ntype ColoumProps = {\n  title: string;\n  rowIndex: number;\n  coloumIndex: number;\n  themeColor: string;\n  selectedAnswer: number[][];\n  onColoumPress: (rowIndex: number, coloumIndex: number) => void;\n};\n\ntype RowProps = {\n  title: string;\n  rowIndex: number;\n  question: Question;\n  themeColor: string;\n  selectedAnswer: number[][];\n  collapseList: boolean[];\n  onRowPress: (rowIndex: number) => void;\n  onColoumPress: (rowIndex: number, coloumIndex: number) => void;\n};\n\ntype Props = {\n  question: Question;\n  onFeedback: (feedback: MatrixChoiceFeedback) => void;\n  feedback: MatrixChoiceFeedback;\n  forgot: boolean;\n  themeColor: string;\n};\n\nconst MatrixColoum = ({\n  title,\n  rowIndex,\n  coloumIndex,\n  themeColor,\n  selectedAnswer,\n  onColoumPress,\n}: ColoumProps) => {\n  const { colorScheme, fontColor } = useTheme();\n  const isSelected = selectedAnswer[rowIndex].some(\n    (value) => value === coloumIndex\n  );\n  const isDark = colorScheme === COLOR_SCHEMES.dark;\n  let containerBackgroundColor;\n  let borderColor;\n\n  if (isDark && isSelected) {\n    containerBackgroundColor = addOpacityToColor(themeColor, 0.1);\n    borderColor = themeColor;\n  } else if (isDark && !isSelected) {\n    containerBackgroundColor = Colors.rankingContainerBgDark;\n    borderColor = Colors.rankingContainerBgDark;\n  } else if (!isDark && isSelected) {\n    containerBackgroundColor = addOpacityToColor(themeColor, 0.1);\n    borderColor = themeColor;\n  } else if (!isDark && !isSelected) {\n    containerBackgroundColor = Colors.white;\n    borderColor = Colors.white;\n  }\n\n  const optionContainerStyle = [\n    styles.optionContainer,\n    isSelected ? null : styles.optionShadow,\n    {\n      backgroundColor: containerBackgroundColor,\n      borderColor: borderColor,\n    },\n  ];\n  const textStyle = {\n    color: fontColor,\n  };\n  const checkBoxIconStyle = [\n    styles.checkBoxIcon,\n    {\n      tintColor: themeColor,\n    },\n  ];\n  const unCheckBoxStyle = [\n    styles.unCheckBox,\n    {\n      borderColor: isDark ? Colors.white : Colors.rankingCheckBoxBorder,\n      backgroundColor: isDark ? Colors.rankingContainerBgDark : Colors.white,\n    },\n  ];\n\n  return (\n    <View style={optionContainerStyle}>\n      <TouchableOpacity\n        style={styles.coloumButton}\n        onPress={() => onColoumPress(rowIndex, coloumIndex)}\n      >\n        {isSelected ? (\n          <Image\n            style={checkBoxIconStyle}\n            // @ts-ignore\n            source={require('../assets/icCheckBox24Px.png')}\n          />\n        ) : (\n          <View style={unCheckBoxStyle} />\n        )}\n        <View style={GlobalStyle.flex1}>\n          <Text numberOfLines={2} style={[styles.optionText, textStyle]}>\n            {title}\n          </Text>\n        </View>\n      </TouchableOpacity>\n    </View>\n  );\n};\n\nconst MatrixRow = ({\n  title,\n  rowIndex,\n  question,\n  themeColor,\n  selectedAnswer,\n  collapseList,\n  onRowPress,\n  onColoumPress,\n}: RowProps) => {\n  const { questionId, optionsForMatrix } = question;\n  const optionsMatrix = optionsForMatrix[0];\n  const { colorScheme, fontColor } = useTheme();\n  const isDark = colorScheme === COLOR_SCHEMES.dark;\n  const isCollapse = collapseList[rowIndex];\n  const rowSelectedAnswer = selectedAnswer[rowIndex];\n\n  const icon = isCollapse\n    ? require('../assets/ic-extand-down.png')\n    : require('../assets/ic-extand-up.png');\n\n  const containerStyle = [\n    styles.rowContainer,\n    {\n      backgroundColor: isDark\n        ? Colors.rankingBGDark\n        : addOpacityToColor(themeColor, 0.05),\n      borderColor: isDark ? Colors.rankingBorderDark : Colors.rankingBorder,\n    },\n  ];\n  const textStyle = {\n    color: fontColor,\n  };\n\n  const optionsList = !isCollapse\n    ? optionsMatrix.map((value, index) => (\n        <MatrixColoum\n          title={value}\n          rowIndex={rowIndex}\n          coloumIndex={index}\n          themeColor={themeColor}\n          selectedAnswer={selectedAnswer}\n          onColoumPress={onColoumPress}\n          key={`${questionId}-${value}-${index}`}\n        />\n      ))\n    : null;\n\n  let optionSelectedText = '';\n  let optionOtherText = '';\n  if (rowSelectedAnswer[0] !== -1) {\n    if (rowSelectedAnswer.length > 1) {\n      optionSelectedText = `${optionsMatrix[rowSelectedAnswer[0]]}`;\n      optionOtherText = ` +${rowSelectedAnswer.length - 1} Other`;\n    } else {\n      optionSelectedText = rowSelectedAnswer\n        .map((value) => optionsMatrix[value])\n        .join();\n    }\n  }\n  const selectedTextStyle = [\n    styles.selectedText,\n    {\n      color: fontColor,\n    },\n  ];\n\n  return (\n    <View style={containerStyle}>\n      <TouchableOpacity\n        style={styles.titleButton}\n        onPress={() => onRowPress(rowIndex)}\n      >\n        <View style={styles.titleButtonText}>\n          <Text style={[styles.optionText, textStyle]}>{title}</Text>\n        </View>\n        <View style={styles.titleButtonContent}>\n          <Text style={selectedTextStyle}>\n            <Text>{optionSelectedText}</Text>\n            <Text style={styles.selectedOtherText}>{optionOtherText}</Text>\n          </Text>\n        </View>\n        <Image source={icon} />\n      </TouchableOpacity>\n      {!isCollapse ? (\n        <View style={styles.titleContent}>{optionsList}</View>\n      ) : null}\n    </View>\n  );\n};\n\nconst MatrixChoiceQuestion = ({\n  question,\n  onFeedback,\n  feedback,\n  forgot,\n  themeColor,\n}: Props) => {\n  const { questionTitles } = question;\n  const {\n    collapseList,\n    selectedAnswer,\n    handleMatrixChoiceErrorHint,\n    onRowPress,\n    onColoumPress,\n  } = useMatrixChoice(question, feedback, onFeedback);\n\n  return (\n    <View style={styles.container}>\n      <MandatoryTitle\n        forgot={false}\n        question={question}\n        style={styles.title}\n        invalidMessage={handleMatrixChoiceErrorHint(forgot)}\n      />\n      {/* keep the ScrollView below to prevent error => \"VirtualizedLists\n          should never be nested inside plain ScrollViews with the same\n          orientation because it can break windowing and other functionality\n          - use another VirtualizedList-backed container instead\" */}\n      <ScrollView\n        horizontal\n        scrollEnabled={false}\n        contentContainerStyle={styles.scrollViewContainer}\n      >\n        <FlatList\n          data={questionTitles}\n          style={GlobalStyle.flex1}\n          contentContainerStyle={styles.constent}\n          renderItem={({ item, index }) => (\n            <MatrixRow\n              title={item}\n              rowIndex={index}\n              question={question}\n              themeColor={themeColor}\n              selectedAnswer={selectedAnswer}\n              collapseList={collapseList}\n              onRowPress={onRowPress}\n              onColoumPress={onColoumPress}\n            />\n          )}\n          keyExtractor={(title, index) => `${title}-${index}`}\n        />\n      </ScrollView>\n    </View>\n  );\n};\n\nexport default React.memo(MatrixChoiceQuestion);\n\nconst styles = StyleSheet.create({\n  container: {\n    ...GlobalStyle.questionContainer,\n    ...GlobalStyle.flex1,\n  },\n  title: {\n    marginBottom: 16,\n    paddingHorizontal: 30,\n  },\n  constent: {\n    paddingHorizontal: 30,\n  },\n  rowContainer: {\n    marginBottom: 8,\n    borderRadius: 8,\n    borderWidth: 1,\n  },\n  titleButton: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    paddingHorizontal: 12,\n    paddingVertical: 16,\n  },\n  titleButtonText: {\n    flex: 6,\n  },\n  titleButtonContent: {\n    ...GlobalStyle.row,\n    flex: 4,\n    justifyContent: 'flex-end',\n    paddingHorizontal: 8,\n  },\n  titleContent: {\n    paddingHorizontal: 12,\n    paddingBottom: 16,\n  },\n  optionContainer: {\n    borderRadius: 8,\n    borderWidth: 1,\n    marginBottom: 8,\n  },\n  optionShadow: {\n    shadowColor: 'black',\n    shadowOffset: { width: 0, height: 1 },\n    shadowOpacity: 0.1,\n    shadowRadius: 4,\n    elevation: 4,\n  },\n  coloumButton: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingVertical: 8,\n    paddingHorizontal: 12,\n  },\n  optionText: {\n    fontSize: 15,\n  },\n  selectedText: {\n    width: '100%',\n  },\n  selectedOtherText: {\n    fontWeight: '500',\n  },\n  unCheckBox: {\n    width: 20,\n    height: 20,\n    borderStyle: 'solid',\n    borderWidth: 1,\n    borderColor: Colors.rankingCheckBoxBorder,\n    marginRight: 18,\n    borderRadius: 3,\n  },\n  checkBoxIcon: {\n    width: 20,\n    height: 20,\n    backgroundColor: '#ffffff',\n    marginRight: 18,\n    borderRadius: 3,\n  },\n  scrollViewContainer: {\n    width: '100%',\n  },\n});\n"]}