{"version":3,"sources":["ClassicMultipleOpenEndedQuestion.tsx"],"names":["React","View","StyleSheet","Text","TextInput","GlobalStyle","Colors","addOpacityToColor","ClassicMandatoryTitle","useMultipleOpenEnded","useOpenEnded","metaDataFormatValidator","i18n","useTheme","COLOR_SCHEMES","RowComponent","question","questionRow","feedback","selectedAnswerState","updateFeedback","themeColor","index","questionTitle","exampleMetadataText","metaDataType","responseErrorText","scale","phiData","setSelectedAnswer","metadataTypeKeyboard","metadataTypeAutoCapitalize","text","isFocus","hasEdited","onChangeTextHandler","onEndEditingHandler","onFocus","onBlur","backgroundColor","colorScheme","fontColor","isDark","dark","isValid","metaDataTypeList","isFoucsAndInValid","onChangeText","textInput","previous","answers","map","value","i","rowContainerStyle","styles","rowContainer","rankingContainerBgDark","white","undefined","rowTitleTextStyle","rowTitleText","color","hippaText","t","inputBorderColor","bottomTextComponent","warningRed","errorTextStyle","responseText","descTextStyle","openQuestionSubTitle","rankingBorderDark","rankingBorder","inputStyle","input","borderColor","rowContent","rowSubTitleText","rowBottomContent","flex1","inputLengthText","textAlignRight","length","ClassicMultipleOpenEndedQuestion","onFeedback","forgot","questionRows","handleErrorHint","rowList","toString","questionContainer","title","memo","create","marginBottom","flexDirection","flex","paddingVertical","paddingHorizontal","marginHorizontal","borderRadius","fontSize","fontWeight","justifyContent","borderWidth","height"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { View, StyleSheet, Text, TextInput } from 'react-native';\nimport GlobalStyle, { Colors, addOpacityToColor } from '../styles';\nimport ClassicMandatoryTitle from './ClassicMandatoryTitle';\nimport type { Question, Feedback } from '../data';\nimport useMultipleOpenEnded from '../hooks/useMultipleOpenEnded';\nimport useOpenEnded from '../hooks/useOpenEnded';\nimport { metaDataFormatValidator } from '../utils/data';\nimport type { QuestionRowItem } from '../hooks/useMultipleOpenEnded';\nimport i18n from '../translation';\nimport { useTheme, COLOR_SCHEMES } from '../contexts/theme';\n\ntype Props = {\n  question: Question;\n  onFeedback: (feedback: Feedback) => void;\n  feedback: Feedback;\n  forgot: boolean;\n  themeColor: string;\n};\n\ntype RowComponentProps = {\n  question: Question;\n  questionRow: QuestionRowItem;\n  feedback: Feedback;\n  selectedAnswerState: [\n    string[],\n    React.Dispatch<React.SetStateAction<string[]>>\n  ];\n  updateFeedback: (answers: string[]) => void;\n  themeColor: string;\n  index: number;\n};\n\nconst RowComponent = ({\n  question,\n  questionRow,\n  feedback,\n  selectedAnswerState,\n  updateFeedback,\n  themeColor,\n  index,\n}: RowComponentProps) => {\n  const {\n    questionTitle,\n    exampleMetadataText,\n    metaDataType = 'String',\n    responseErrorText,\n    scale,\n    phiData,\n  } = questionRow;\n  const [, setSelectedAnswer] = selectedAnswerState;\n  const {\n    metadataTypeKeyboard,\n    metadataTypeAutoCapitalize,\n    text,\n    isFocus,\n    hasEdited,\n    onChangeTextHandler,\n    onEndEditingHandler,\n    onFocus,\n    onBlur,\n  } = useOpenEnded(feedback, index);\n  const { backgroundColor, colorScheme, fontColor } = useTheme();\n  const isDark = colorScheme === COLOR_SCHEMES.dark;\n\n  const isValid = metaDataFormatValidator(\n    text,\n    question?.metaDataTypeList?.[index]\n  );\n\n  const isFoucsAndInValid = isFocus || (!isValid && hasEdited);\n  const onChangeText = (textInput: string) => {\n    onChangeTextHandler(textInput);\n    setSelectedAnswer((previous) => {\n      const answers = previous.map((value, i) =>\n        i === index ? textInput : value\n      );\n      updateFeedback(answers);\n      return answers;\n    });\n  };\n\n  const rowContainerStyle = [\n    styles.rowContainer,\n    {\n      backgroundColor: isFocus\n        ? isDark\n          ? Colors.rankingContainerBgDark\n          : addOpacityToColor(themeColor || Colors.white, 0.1)\n        : undefined,\n    },\n  ];\n  const rowTitleTextStyle = [styles.rowTitleText, { color: fontColor }];\n\n  const hippaText = i18n.t('survey:hippa-hint');\n\n  let inputBorderColor;\n  let bottomTextComponent;\n  if (!isValid && hasEdited) {\n    inputBorderColor = Colors.warningRed;\n    const errorTextStyle = [\n      styles.responseText,\n      {\n        color: Colors.warningRed,\n      },\n    ];\n    bottomTextComponent = (\n      <Text style={errorTextStyle}>{responseErrorText}</Text>\n    );\n  } else if (isFocus) {\n    inputBorderColor = themeColor;\n    const descTextStyle = [\n      styles.responseText,\n      {\n        color: Colors.openQuestionSubTitle,\n      },\n    ];\n    bottomTextComponent = (\n      <Text style={descTextStyle}>{phiData ? hippaText : ''}</Text>\n    );\n  } else {\n    inputBorderColor = isDark ? Colors.rankingBorderDark : Colors.rankingBorder;\n    bottomTextComponent = null;\n  }\n  const inputStyle = [\n    styles.input,\n    {\n      backgroundColor: backgroundColor,\n      borderColor: inputBorderColor,\n      color: fontColor,\n    },\n  ];\n  return (\n    <View style={rowContainerStyle}>\n      <View>\n        <Text style={rowTitleTextStyle}>{questionTitle}</Text>\n      </View>\n      <View style={styles.rowContent}>\n        {exampleMetadataText && isFoucsAndInValid ? (\n          <Text style={styles.rowSubTitleText}>{exampleMetadataText}</Text>\n        ) : null}\n        <TextInput\n          style={inputStyle}\n          onChangeText={onChangeText}\n          onEndEditing={onEndEditingHandler}\n          value={text}\n          onFocus={onFocus}\n          onBlur={onBlur}\n          maxLength={scale}\n          keyboardType={metadataTypeKeyboard(metaDataType)}\n          autoCapitalize={metadataTypeAutoCapitalize(metaDataType)}\n        />\n        <View style={styles.rowBottomContent}>\n          <View style={GlobalStyle.flex1}>{bottomTextComponent}</View>\n          {isFoucsAndInValid ? (\n            <Text style={[styles.inputLengthText, GlobalStyle.textAlignRight]}>\n              {`${scale - text.length}/${scale}`}\n            </Text>\n          ) : null}\n        </View>\n      </View>\n    </View>\n  );\n};\n\nconst ClassicMultipleOpenEndedQuestion = ({\n  question,\n  onFeedback,\n  feedback,\n  forgot,\n  themeColor,\n}: Props) => {\n  const { questionRows, selectedAnswerState, handleErrorHint, updateFeedback } =\n    useMultipleOpenEnded(question, feedback, onFeedback);\n  const rowList = questionRows.map((questionRow, index) => (\n    <RowComponent\n      question={question}\n      questionRow={questionRow}\n      feedback={feedback}\n      selectedAnswerState={selectedAnswerState}\n      updateFeedback={updateFeedback}\n      index={index}\n      themeColor={themeColor}\n      key={index.toString()}\n    />\n  ));\n\n  return (\n    <View style={GlobalStyle.questionContainer}>\n      <ClassicMandatoryTitle\n        forgot={false}\n        question={question}\n        style={styles.title}\n        invalidMessage={handleErrorHint(forgot)}\n      />\n      {rowList}\n    </View>\n  );\n};\n\nexport default React.memo(ClassicMultipleOpenEndedQuestion);\n\nconst styles = StyleSheet.create({\n  title: {\n    marginBottom: 16,\n  },\n  rowContainer: {\n    flexDirection: 'column',\n    flex: 1,\n    paddingVertical: 16,\n    paddingHorizontal: 16,\n    marginHorizontal: -16,\n    borderRadius: 4,\n  },\n  rowTitleText: {\n    fontSize: 15,\n    fontWeight: '400',\n    marginBottom: 8,\n  },\n  rowSubTitleText: {\n    fontSize: 12,\n    fontWeight: '500',\n    color: Colors.openQuestionSubTitle,\n    marginBottom: 8,\n  },\n  rowContent: {\n    flex: 8,\n  },\n  rowBottomContent: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n  },\n  input: {\n    borderColor: Colors.borderColor,\n    borderWidth: 1,\n    height: 40,\n    paddingHorizontal: 14,\n    borderRadius: 4,\n    fontSize: 15,\n    fontWeight: '400',\n    marginBottom: 8,\n  },\n  inputLengthText: {\n    fontSize: 12,\n    fontWeight: '500',\n    color: Colors.openQuestionSubTitle,\n  },\n  responseText: {\n    fontSize: 12,\n    fontWeight: '500',\n  },\n});\n"]}