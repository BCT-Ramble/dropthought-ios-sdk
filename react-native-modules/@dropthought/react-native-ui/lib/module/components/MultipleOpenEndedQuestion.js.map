{"version":3,"sources":["MultipleOpenEndedQuestion.tsx"],"names":["React","useMemo","View","StyleSheet","Text","TextInput","Platform","ScrollView","RNScrollView","KeyboardAvoidingScrollView","GlobalStyle","Colors","addOpacityToColor","MandatoryTitle","useMultipleOpenEnded","useOpenEnded","metaDataFormatValidator","i18n","useTheme","COLOR_SCHEMES","OS","RowComponent","question","questionRow","feedback","selectedAnswerState","updateFeedback","themeColor","index","questionTitle","exampleMetadataText","metaDataType","responseErrorText","scale","phiData","setSelectedAnswer","metadataTypeKeyboard","metadataTypeAutoCapitalize","text","isFocus","hasEdited","onChangeTextHandler","onEndEditingHandler","onFocus","onBlur","colorScheme","fontColor","backgroundColor","opacityThemeColor","isDark","dark","isValid","metaDataTypeList","isFoucsAndInValid","onChangeText","textInput","previous","answers","map","value","i","rowContainerStyle","styles","rowContainer","rankingContainerBgDark","white","rowTitleTextStyle","rowTitleText","color","hippaText","t","inputBorderColor","warningRed","rankingBorderDark","bottomTextComponent","responseTextWarning","responseText","inputStyle","input","borderColor","rowContent","rowSubTitleText","rowBottomContent","flex1","inputLengthText","textAlignRight","length","MultipleOpenEndedQuestion","onFeedback","forgot","questionRows","handleErrorHint","rowList","toString","container","title","memo","create","flex","paddingHorizontal","marginBottom","marginHorizontal","paddingVertical","borderRadius","fontSize","fontWeight","openQuestionSubTitle","flexDirection","justifyContent","borderWidth","height","marginLeft"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,OAAhB,QAA+B,OAA/B;AACA,SACEC,IADF,EAEEC,UAFF,EAGEC,IAHF,EAIEC,SAJF,EAKEC,QALF,EAMEC,UAAU,IAAIC,YANhB,QAOO,cAPP;AAQA,SAASC,0BAAT,QAA2C,wBAA3C;AACA,OAAOC,WAAP,IAAsBC,MAAtB,EAA8BC,iBAA9B,QAAuD,WAAvD;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AAEA,OAAOC,oBAAP,MAAiC,+BAAjC;AACA,OAAOC,YAAP,MAAyB,uBAAzB;AACA,SAASC,uBAAT,QAAwC,eAAxC;AAEA,OAAOC,IAAP,MAAiB,gBAAjB;AACA,SAASC,QAAT,EAAmBC,aAAnB,QAAwC,mBAAxC;AAEA,MAAMZ,UAAU,GACdD,QAAQ,CAACc,EAAT,KAAgB,KAAhB,GAAwBX,0BAAxB,GAAqDD,YADvD;;AAwBA,MAAMa,YAAY,GAAG,CAAC;AACpBC,EAAAA,QADoB;AAEpBC,EAAAA,WAFoB;AAGpBC,EAAAA,QAHoB;AAIpBC,EAAAA,mBAJoB;AAKpBC,EAAAA,cALoB;AAMpBC,EAAAA,UANoB;AAOpBC,EAAAA;AAPoB,CAAD,KAQI;AAAA;;AACvB,QAAM;AACJC,IAAAA,aADI;AAEJC,IAAAA,mBAFI;AAGJC,IAAAA,YAAY,GAAG,QAHX;AAIJC,IAAAA,iBAJI;AAKJC,IAAAA,KALI;AAMJC,IAAAA;AANI,MAOFX,WAPJ;AAQA,QAAM,GAAGY,iBAAH,IAAwBV,mBAA9B;AACA,QAAM;AACJW,IAAAA,oBADI;AAEJC,IAAAA,0BAFI;AAGJC,IAAAA,IAHI;AAIJC,IAAAA,OAJI;AAKJC,IAAAA,SALI;AAMJC,IAAAA,mBANI;AAOJC,IAAAA,mBAPI;AAQJC,IAAAA,OARI;AASJC,IAAAA;AATI,MAUF7B,YAAY,CAACS,QAAD,EAAWI,KAAX,CAVhB;AAWA,QAAM;AAAEiB,IAAAA,WAAF;AAAeC,IAAAA,SAAf;AAA0BC,IAAAA;AAA1B,MAA8C7B,QAAQ,EAA5D;AACA,QAAM8B,iBAAiB,GAAGpC,iBAAiB,CAACe,UAAD,EAAa,GAAb,CAA3C;AACA,QAAMsB,MAAM,GAAGJ,WAAW,KAAK1B,aAAa,CAAC+B,IAA7C;AAEA,QAAMC,OAAO,GAAGnC,uBAAuB,CACrCsB,IADqC,EAErChB,QAFqC,aAErCA,QAFqC,gDAErCA,QAAQ,CAAE8B,gBAF2B,0DAErC,sBAA6BxB,KAA7B,CAFqC,CAAvC;AAKA,QAAMyB,iBAAiB,GAAGpD,OAAO,CAC/B,MAAMsC,OAAO,IAAK,CAACY,OAAD,IAAYX,SADC,EAE/B,CAACA,SAAD,EAAYD,OAAZ,EAAqBY,OAArB,CAF+B,CAAjC;;AAKA,QAAMG,YAAY,GAAIC,SAAD,IAAuB;AAC1Cd,IAAAA,mBAAmB,CAACc,SAAD,CAAnB;AACApB,IAAAA,iBAAiB,CAAEqB,QAAD,IAAc;AAC9B,YAAMC,OAAO,GAAGD,QAAQ,CAACE,GAAT,CAAa,CAACC,KAAD,EAAQC,CAAR,KAC3BA,CAAC,KAAKhC,KAAN,GAAc2B,SAAd,GAA0BI,KADZ,CAAhB;AAGAjC,MAAAA,cAAc,CAAC+B,OAAD,CAAd;AACA,aAAOA,OAAP;AACD,KANgB,CAAjB;AAOD,GATD;;AAWA,QAAMI,iBAAiB,GAAG,CACxBC,MAAM,CAACC,YADiB,EAExB;AACEhB,IAAAA,eAAe,EAAER,OAAO,GACpBU,MAAM,GACJtC,MAAM,CAACqD,sBADH,GAEJpD,iBAAiB,CAACe,UAAU,IAAIhB,MAAM,CAACsD,KAAtB,EAA6B,GAA7B,CAHC,GAIpBlB;AALN,GAFwB,CAA1B;AAUA,QAAMmB,iBAAiB,GAAG,CAACJ,MAAM,CAACK,YAAR,EAAsB;AAAEC,IAAAA,KAAK,EAAEtB;AAAT,GAAtB,CAA1B;AAEA,QAAMuB,SAAS,GAAGpD,IAAI,CAACqD,CAAL,CAAO,mBAAP,CAAlB;AAEA,QAAMC,gBAAgB,GAAGtE,OAAO,CAAC,MAAM;AACrC,QAAI,CAACkD,OAAD,IAAYX,SAAhB,EAA2B;AACzB,aAAO7B,MAAM,CAAC6D,UAAd;AACD,KAFD,MAEO,IAAIjC,OAAJ,EAAa;AAClB,aAAOZ,UAAP;AACD,KAFM,MAEA;AACL,aAAOsB,MAAM,GAAGtC,MAAM,CAAC8D,iBAAV,GAA8B9D,MAAM,CAACsD,KAAlD;AACD;AACF,GAR+B,EAQ7B,CAACzB,SAAD,EAAYS,MAAZ,EAAoBV,OAApB,EAA6BY,OAA7B,EAAsCxB,UAAtC,CAR6B,CAAhC;AAUA,QAAM+C,mBAAmB,GAAGzE,OAAO,CAAC,MAAM;AACxC,QAAI,CAACkD,OAAD,IAAYX,SAAhB,EAA2B;AACzB,0BACE,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAEsB,MAAM,CAACa;AAApB,SAA0C3C,iBAA1C,CADF;AAGD,KAJD,MAIO,IAAIO,OAAJ,EAAa;AAClB,0BACE,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAEuB,MAAM,CAACc;AAApB,SAAmC1C,OAAO,GAAGmC,SAAH,GAAe,EAAzD,CADF;AAGD,KAJM,MAIA;AACL,aAAO,IAAP;AACD;AACF,GAZkC,EAYhC,CAAC7B,SAAD,EAAY6B,SAAZ,EAAuB9B,OAAvB,EAAgCY,OAAhC,EAAyCjB,OAAzC,EAAkDF,iBAAlD,CAZgC,CAAnC;AAcA,QAAM6C,UAAU,GAAG,CACjBf,MAAM,CAACgB,KADU,EAEjB;AACE/B,IAAAA,eAAe,EAAEE,MAAM,GAAGtC,MAAM,CAAC8D,iBAAV,GAA8BzB,iBADvD;AAEE+B,IAAAA,WAAW,EAAER,gBAFf;AAGEH,IAAAA,KAAK,EAAEtB;AAHT,GAFiB,CAAnB;AASA,sBACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEe;AAAb,kBACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEK;AAAb,KAAiCrC,aAAjC,CADF,eAEE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEiC,MAAM,CAACkB;AAApB,KACGlD,mBAAmB,IAAIuB,iBAAvB,gBACC,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAES,MAAM,CAACmB;AAApB,KAAsCnD,mBAAtC,CADD,GAEG,IAHN,eAIE,oBAAC,SAAD;AACE,IAAA,KAAK,EAAE+C,UADT;AAEE,IAAA,YAAY,EAAEvB,YAFhB;AAGE,IAAA,YAAY,EAAEZ,mBAHhB;AAIE,IAAA,KAAK,EAAEJ,IAJT;AAKE,IAAA,OAAO,EAAEK,OALX;AAME,IAAA,MAAM,EAAEC,MANV;AAOE,IAAA,SAAS,EAAEX,KAPb;AAQE,IAAA,YAAY,EAAEG,oBAAoB,CAACL,YAAD,CARpC;AASE,IAAA,cAAc,EAAEM,0BAA0B,CAACN,YAAD;AAT5C,IAJF,eAeE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE+B,MAAM,CAACoB;AAApB,kBACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAExE,WAAW,CAACyE;AAAzB,KAAiCT,mBAAjC,CADF,EAEGrB,iBAAiB,gBAChB,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE,CAACS,MAAM,CAACsB,eAAR,EAAyB1E,WAAW,CAAC2E,cAArC;AAAb,KACI,GAAEpD,KAAK,GAAGK,IAAI,CAACgD,MAAO,IAAGrD,KAAM,EADnC,CADgB,GAId,IANN,CAfF,CAFF,CADF;AA6BD,CAlID;;AAoIA,MAAMsD,yBAAyB,GAAG,CAAC;AACjCjE,EAAAA,QADiC;AAEjCkE,EAAAA,UAFiC;AAGjChE,EAAAA,QAHiC;AAIjCiE,EAAAA,MAJiC;AAKjC9D,EAAAA;AALiC,CAAD,KAMrB;AACX,QAAM;AAAE+D,IAAAA,YAAF;AAAgBjE,IAAAA,mBAAhB;AAAqCkE,IAAAA,eAArC;AAAsDjE,IAAAA;AAAtD,MACJZ,oBAAoB,CAACQ,QAAD,EAAWE,QAAX,EAAqBgE,UAArB,CADtB;AAEA,QAAMI,OAAO,GAAGF,YAAY,CAAChC,GAAb,CAAiB,CAACnC,WAAD,EAAcK,KAAd,kBAC/B,oBAAC,YAAD;AACE,IAAA,QAAQ,EAAEN,QADZ;AAEE,IAAA,WAAW,EAAEC,WAFf;AAGE,IAAA,QAAQ,EAAEC,QAHZ;AAIE,IAAA,mBAAmB,EAAEC,mBAJvB;AAKE,IAAA,cAAc,EAAEC,cALlB;AAME,IAAA,KAAK,EAAEE,KANT;AAOE,IAAA,UAAU,EAAED,UAPd;AAQE,IAAA,GAAG,EAAEC,KAAK,CAACiE,QAAN;AARP,IADc,CAAhB;AAaA,sBACE,oBAAC,UAAD;AAAY,IAAA,kBAAkB,EAAE,EAAhC;AAAoC,IAAA,KAAK,EAAE/B,MAAM,CAACgC;AAAlD,kBACE,oBAAC,cAAD;AACE,IAAA,MAAM,EAAE,KADV;AAEE,IAAA,QAAQ,EAAExE,QAFZ;AAGE,IAAA,KAAK,EAAEwC,MAAM,CAACiC,KAHhB;AAIE,IAAA,cAAc,EAAEJ,eAAe,CAACF,MAAD;AAJjC,IADF,EAOGG,OAPH,CADF;AAWD,CAjCD;;AAmCA,4BAAe5F,KAAK,CAACgG,IAAN,CAAWT,yBAAX,CAAf;AAEA,MAAMzB,MAAM,GAAG3D,UAAU,CAAC8F,MAAX,CAAkB;AAC/BH,EAAAA,SAAS,EAAE;AACTI,IAAAA,IAAI,EAAE,CADG;AAETC,IAAAA,iBAAiB,EAAE;AAFV,GADoB;AAK/BJ,EAAAA,KAAK,EAAE;AACLK,IAAAA,YAAY,EAAE,EADT;AAELC,IAAAA,gBAAgB,EAAE;AAFb,GALwB;AAS/BtC,EAAAA,YAAY,EAAE;AACZmC,IAAAA,IAAI,EAAE,CADM;AAEZI,IAAAA,eAAe,EAAE,EAFL;AAGZH,IAAAA,iBAAiB,EAAE,EAHP;AAIZI,IAAAA,YAAY,EAAE;AAJF,GATiB;AAe/BpC,EAAAA,YAAY,EAAE;AACZqC,IAAAA,QAAQ,EAAE,EADE;AAEZC,IAAAA,UAAU,EAAE,KAFA;AAGZL,IAAAA,YAAY,EAAE;AAHF,GAfiB;AAoB/BnB,EAAAA,eAAe,EAAE;AACfuB,IAAAA,QAAQ,EAAE,EADK;AAEfC,IAAAA,UAAU,EAAE,KAFG;AAGfrC,IAAAA,KAAK,EAAEzD,MAAM,CAAC+F,oBAHC;AAIfN,IAAAA,YAAY,EAAE;AAJC,GApBc;AA0B/BpB,EAAAA,UAAU,EAAE;AACVkB,IAAAA,IAAI,EAAE;AADI,GA1BmB;AA6B/BhB,EAAAA,gBAAgB,EAAE;AAChByB,IAAAA,aAAa,EAAE,KADC;AAEhBC,IAAAA,cAAc,EAAE;AAFA,GA7Ba;AAiC/B9B,EAAAA,KAAK,EAAE;AACLC,IAAAA,WAAW,EAAEpE,MAAM,CAACoE,WADf;AAEL8B,IAAAA,WAAW,EAAE,CAFR;AAGLC,IAAAA,MAAM,EAAE,EAHH;AAILX,IAAAA,iBAAiB,EAAE,EAJd;AAKLI,IAAAA,YAAY,EAAE,CALT;AAMLC,IAAAA,QAAQ,EAAE,EANL;AAOLC,IAAAA,UAAU,EAAE,KAPP;AAQLL,IAAAA,YAAY,EAAE;AART,GAjCwB;AA2C/BhB,EAAAA,eAAe,EAAE;AACfoB,IAAAA,QAAQ,EAAE,EADK;AAEfC,IAAAA,UAAU,EAAE,KAFG;AAGfrC,IAAAA,KAAK,EAAEzD,MAAM,CAAC+F,oBAHC;AAIfK,IAAAA,UAAU,EAAE;AAJG,GA3Cc;AAiD/BnC,EAAAA,YAAY,EAAE;AACZ4B,IAAAA,QAAQ,EAAE,EADE;AAEZC,IAAAA,UAAU,EAAE,KAFA;AAGZrC,IAAAA,KAAK,EAAEzD,MAAM,CAAC+F;AAHF,GAjDiB;AAsD/B/B,EAAAA,mBAAmB,EAAE;AACnB6B,IAAAA,QAAQ,EAAE,EADS;AAEnBC,IAAAA,UAAU,EAAE,KAFO;AAGnBrC,IAAAA,KAAK,EAAEzD,MAAM,CAAC6D;AAHK;AAtDU,CAAlB,CAAf","sourcesContent":["import React, { useMemo } from 'react';\nimport {\n  View,\n  StyleSheet,\n  Text,\n  TextInput,\n  Platform,\n  ScrollView as RNScrollView,\n} from 'react-native';\nimport { KeyboardAvoidingScrollView } from './KeyboardAvoidingView';\nimport GlobalStyle, { Colors, addOpacityToColor } from '../styles';\nimport MandatoryTitle from './MandatoryTitle';\nimport type { Question, Feedback } from '../data';\nimport useMultipleOpenEnded from '../hooks/useMultipleOpenEnded';\nimport useOpenEnded from '../hooks/useOpenEnded';\nimport { metaDataFormatValidator } from '../utils/data';\nimport type { QuestionRowItem } from '../hooks/useMultipleOpenEnded';\nimport i18n from '../translation';\nimport { useTheme, COLOR_SCHEMES } from '../contexts/theme';\n\nconst ScrollView =\n  Platform.OS === 'ios' ? KeyboardAvoidingScrollView : RNScrollView;\n\ntype Props = {\n  question: Question;\n  onFeedback: (feedback: Feedback) => void;\n  feedback: Feedback;\n  forgot: boolean;\n  themeColor: string;\n};\n\ntype RowComponentProps = {\n  question: Question;\n  questionRow: QuestionRowItem;\n  feedback: Feedback;\n  selectedAnswerState: [\n    string[],\n    React.Dispatch<React.SetStateAction<string[]>>\n  ];\n  updateFeedback: (answers: string[]) => void;\n  themeColor: string;\n  index: number;\n};\n\nconst RowComponent = ({\n  question,\n  questionRow,\n  feedback,\n  selectedAnswerState,\n  updateFeedback,\n  themeColor,\n  index,\n}: RowComponentProps) => {\n  const {\n    questionTitle,\n    exampleMetadataText,\n    metaDataType = 'String',\n    responseErrorText,\n    scale,\n    phiData,\n  } = questionRow;\n  const [, setSelectedAnswer] = selectedAnswerState;\n  const {\n    metadataTypeKeyboard,\n    metadataTypeAutoCapitalize,\n    text,\n    isFocus,\n    hasEdited,\n    onChangeTextHandler,\n    onEndEditingHandler,\n    onFocus,\n    onBlur,\n  } = useOpenEnded(feedback, index);\n  const { colorScheme, fontColor, backgroundColor } = useTheme();\n  const opacityThemeColor = addOpacityToColor(themeColor, 0.1);\n  const isDark = colorScheme === COLOR_SCHEMES.dark;\n\n  const isValid = metaDataFormatValidator(\n    text,\n    question?.metaDataTypeList?.[index]\n  );\n\n  const isFoucsAndInValid = useMemo(\n    () => isFocus || (!isValid && hasEdited),\n    [hasEdited, isFocus, isValid]\n  );\n\n  const onChangeText = (textInput: string) => {\n    onChangeTextHandler(textInput);\n    setSelectedAnswer((previous) => {\n      const answers = previous.map((value, i) =>\n        i === index ? textInput : value\n      );\n      updateFeedback(answers);\n      return answers;\n    });\n  };\n\n  const rowContainerStyle = [\n    styles.rowContainer,\n    {\n      backgroundColor: isFocus\n        ? isDark\n          ? Colors.rankingContainerBgDark\n          : addOpacityToColor(themeColor || Colors.white, 0.1)\n        : backgroundColor,\n    },\n  ];\n  const rowTitleTextStyle = [styles.rowTitleText, { color: fontColor }];\n\n  const hippaText = i18n.t('survey:hippa-hint');\n\n  const inputBorderColor = useMemo(() => {\n    if (!isValid && hasEdited) {\n      return Colors.warningRed;\n    } else if (isFocus) {\n      return themeColor;\n    } else {\n      return isDark ? Colors.rankingBorderDark : Colors.white;\n    }\n  }, [hasEdited, isDark, isFocus, isValid, themeColor]);\n\n  const bottomTextComponent = useMemo(() => {\n    if (!isValid && hasEdited) {\n      return (\n        <Text style={styles.responseTextWarning}>{responseErrorText}</Text>\n      );\n    } else if (isFocus) {\n      return (\n        <Text style={styles.responseText}>{phiData ? hippaText : ''}</Text>\n      );\n    } else {\n      return null;\n    }\n  }, [hasEdited, hippaText, isFocus, isValid, phiData, responseErrorText]);\n\n  const inputStyle = [\n    styles.input,\n    {\n      backgroundColor: isDark ? Colors.rankingBorderDark : opacityThemeColor,\n      borderColor: inputBorderColor,\n      color: fontColor,\n    },\n  ];\n\n  return (\n    <View style={rowContainerStyle}>\n      <Text style={rowTitleTextStyle}>{questionTitle}</Text>\n      <View style={styles.rowContent}>\n        {exampleMetadataText && isFoucsAndInValid ? (\n          <Text style={styles.rowSubTitleText}>{exampleMetadataText}</Text>\n        ) : null}\n        <TextInput\n          style={inputStyle}\n          onChangeText={onChangeText}\n          onEndEditing={onEndEditingHandler}\n          value={text}\n          onFocus={onFocus}\n          onBlur={onBlur}\n          maxLength={scale}\n          keyboardType={metadataTypeKeyboard(metaDataType)}\n          autoCapitalize={metadataTypeAutoCapitalize(metaDataType)}\n        />\n        <View style={styles.rowBottomContent}>\n          <View style={GlobalStyle.flex1}>{bottomTextComponent}</View>\n          {isFoucsAndInValid ? (\n            <Text style={[styles.inputLengthText, GlobalStyle.textAlignRight]}>\n              {`${scale - text.length}/${scale}`}\n            </Text>\n          ) : null}\n        </View>\n      </View>\n    </View>\n  );\n};\n\nconst MultipleOpenEndedQuestion = ({\n  question,\n  onFeedback,\n  feedback,\n  forgot,\n  themeColor,\n}: Props) => {\n  const { questionRows, selectedAnswerState, handleErrorHint, updateFeedback } =\n    useMultipleOpenEnded(question, feedback, onFeedback);\n  const rowList = questionRows.map((questionRow, index) => (\n    <RowComponent\n      question={question}\n      questionRow={questionRow}\n      feedback={feedback}\n      selectedAnswerState={selectedAnswerState}\n      updateFeedback={updateFeedback}\n      index={index}\n      themeColor={themeColor}\n      key={index.toString()}\n    />\n  ));\n\n  return (\n    <ScrollView extraAvoidingSpace={30} style={styles.container}>\n      <MandatoryTitle\n        forgot={false}\n        question={question}\n        style={styles.title}\n        invalidMessage={handleErrorHint(forgot)}\n      />\n      {rowList}\n    </ScrollView>\n  );\n};\n\nexport default React.memo(MultipleOpenEndedQuestion);\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    paddingHorizontal: 19,\n  },\n  title: {\n    marginBottom: 16,\n    marginHorizontal: 11,\n  },\n  rowContainer: {\n    flex: 1,\n    paddingVertical: 16,\n    paddingHorizontal: 24,\n    borderRadius: 4,\n  },\n  rowTitleText: {\n    fontSize: 15,\n    fontWeight: '400',\n    marginBottom: 12,\n  },\n  rowSubTitleText: {\n    fontSize: 12,\n    fontWeight: '500',\n    color: Colors.openQuestionSubTitle,\n    marginBottom: 8,\n  },\n  rowContent: {\n    flex: 8,\n  },\n  rowBottomContent: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n  },\n  input: {\n    borderColor: Colors.borderColor,\n    borderWidth: 1,\n    height: 50,\n    paddingHorizontal: 14,\n    borderRadius: 8,\n    fontSize: 15,\n    fontWeight: '400',\n    marginBottom: 8,\n  },\n  inputLengthText: {\n    fontSize: 12,\n    fontWeight: '500',\n    color: Colors.openQuestionSubTitle,\n    marginLeft: 16,\n  },\n  responseText: {\n    fontSize: 12,\n    fontWeight: '500',\n    color: Colors.openQuestionSubTitle,\n  },\n  responseTextWarning: {\n    fontSize: 12,\n    fontWeight: '500',\n    color: Colors.warningRed,\n  },\n});\n"]}