{"version":3,"sources":["ClassicOpenQuestion.tsx"],"names":["React","View","StyleSheet","Text","TextInput","Platform","QuestionMetaDataType","metaDataFormatValidator","mandatoryQuestionValidator","GlobalStyle","Colors","ClassicMandatoryTitle","MetadataDesc","i18n","DimensionWidthType","useDimensionWidthType","useTheme","COLOR_SCHEMES","MAX_CHARACTER","metadataTypeKeyboard","metadataType","toLocaleLowerCase","Email","Phone","Number","select","ios","default","Date","metadataTypeAutoCapitalize","Name","OpenQuestion","anonymous","question","onFeedback","feedback","forgot","themeColor","colorScheme","fontColor","text","setText","useState","answers","focus","setFocus","hasEdited","setHasEdited","dimensionWidthType","styles","phone","phoneStyles","onEndEditingHandler","questionId","type","getBackgroundColorStyle","borderColor","rtl","dir","showAnonymousWarning","metaDataType","maxCharacterLength","scale","parseInt","characterLeft","length","isValid","tempFeedback","hasForgot","upperView","responseErrorText","t","title","inputView","inputBG","dark","inputBGDark","input","color","textAlignRight","questionBrand","inputPlaceholder","bottomView","subTextRow","flexRowReverse","descText","questionContainer","create","openQuestionSubTitle","fontSize","fontStyle","fontWeight","letterSpacing","lineHeight","borderWidth","borderRadius","height","marginVertical","paddingHorizontal","borderColorDark","flex","textAlignVertical","paddingVertical15","paddingVertical","android","metaDataTypeInput","flexDirection","justifyContent","width","marginBottom"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {\n  View,\n  StyleSheet,\n  Text,\n  TextInput,\n  Platform,\n  KeyboardTypeOptions,\n} from 'react-native';\nimport {\n  QuestionMetaDataType,\n  metaDataFormatValidator,\n  mandatoryQuestionValidator,\n} from '../utils/data';\nimport GlobalStyle, { Colors } from '../styles';\nimport ClassicMandatoryTitle from './ClassicMandatoryTitle';\nimport MetadataDesc from './MetadataDesc';\nimport i18n from '../translation';\nimport {\n  DimensionWidthType,\n  useDimensionWidthType,\n} from '../hooks/useWindowDimensions';\nimport { useTheme, COLOR_SCHEMES } from '../contexts/theme';\nimport type {\n  QuestionMetaDataType as TypeQuestionMetaDataType,\n  Question,\n  Feedback,\n} from '../data';\n\nconst MAX_CHARACTER = 4000;\n\nexport const metadataTypeKeyboard = (\n  metadataType: TypeQuestionMetaDataType | undefined\n): KeyboardTypeOptions | undefined => {\n  switch (metadataType?.toLocaleLowerCase()) {\n    case QuestionMetaDataType.Email:\n      return 'default';\n    case QuestionMetaDataType.Phone:\n      return 'phone-pad';\n    case QuestionMetaDataType.Number:\n      return Platform.select({\n        ios: 'numbers-and-punctuation',\n        default: 'default',\n      });\n    case QuestionMetaDataType.Date:\n    default:\n      return 'default';\n  }\n};\n\nexport const metadataTypeAutoCapitalize = (\n  metadataType: TypeQuestionMetaDataType | undefined\n) => {\n  switch (metadataType?.toLocaleLowerCase()) {\n    case QuestionMetaDataType.Name:\n      return 'words';\n    case QuestionMetaDataType.Email:\n    case QuestionMetaDataType.Phone:\n    case QuestionMetaDataType.Date:\n    case QuestionMetaDataType.Number:\n      return 'none';\n    default:\n      return 'sentences';\n  }\n};\n\ntype Props = {\n  anonymous: boolean;\n  question: Question;\n  onFeedback: (feedback: Feedback) => void;\n  feedback: Feedback;\n  forgot: boolean;\n  themeColor: string;\n};\n\nconst OpenQuestion = ({\n  anonymous,\n  question,\n  onFeedback,\n  // onValueChange, // Keep it for Kiosk usage\n  feedback,\n  forgot,\n  themeColor,\n}: Props) => {\n  const { colorScheme, fontColor } = useTheme();\n  const [text, setText] = React.useState<string>(\n    feedback?.answers[0] ? `${feedback?.answers[0]}` : ''\n  );\n  const [focus, setFocus] = React.useState(false);\n  const [hasEdited, setHasEdited] = React.useState(false);\n\n  const dimensionWidthType = useDimensionWidthType();\n  const styles =\n    dimensionWidthType === DimensionWidthType.phone ? phoneStyles : phoneStyles;\n\n  const onEndEditingHandler = () => {\n    setHasEdited(true);\n    onFeedback({\n      questionId: question.questionId,\n      answers: [text],\n      type: 'open',\n    });\n  };\n\n  const getBackgroundColorStyle = () => {\n    return { borderColor: themeColor };\n  };\n\n  const rtl = i18n.dir() === 'rtl';\n  const showAnonymousWarning =\n    anonymous &&\n    question.metaDataType &&\n    (question.metaDataType === 'Email' ||\n      question.metaDataType === 'Name' ||\n      question.metaDataType === 'Phone');\n\n  const maxCharacterLength = question.scale\n    ? parseInt(question.scale, 10)\n    : MAX_CHARACTER;\n  const characterLeft = maxCharacterLength - text.length;\n\n  const isValid = metaDataFormatValidator(text, question.metaDataType);\n\n  /** @type {Feedback} */\n  const tempFeedback = {\n    questionId: question.questionId,\n    answers: [text],\n    type: 'open',\n  };\n  const hasForgot =\n    forgot && !mandatoryQuestionValidator(question, tempFeedback);\n\n  const upperView = (\n    <>\n      <ClassicMandatoryTitle\n        forgot={hasForgot}\n        invalidMessage={\n          // show the error message after the user has done edited\n          hasEdited && !isValid\n            ? question.responseErrorText ??\n              i18n.t('metadata-invalid-message', question.metaDataType)\n            : ''\n        }\n        question={question}\n        style={styles.title}\n      />\n      <MetadataDesc question={question} rtl={rtl} />\n    </>\n  );\n\n  const inputView = (\n    <View\n      style={[\n        styles.inputBG,\n        colorScheme === COLOR_SCHEMES.dark ? styles.inputBGDark : {},\n        focus && getBackgroundColorStyle(),\n        // question.metaDataType && styles.metaDataTypeInput,\n        // !question.metaDataType && styles.paddingVertical15,\n      ]}\n    >\n      <TextInput\n        style={[\n          styles.input,\n          { color: fontColor },\n          rtl && GlobalStyle.textAlignRight,\n        ]}\n        multiline={true}\n        onChangeText={(t) => {\n          if (focus) {\n            // [DK-3756] if the text is close to the maxLength it will be rendered twice in the iOS, so we add the focus to prevent the issue.\n            setText(t);\n          }\n          // onValueChange(text) // Keep it for Kiosk usage\n        }}\n        placeholder={question.questionBrand}\n        placeholderTextColor={Colors.inputPlaceholder}\n        onEndEditing={onEndEditingHandler}\n        value={text}\n        onFocus={() => {\n          setFocus(true);\n        }}\n        onBlur={() => {\n          setFocus(false);\n        }}\n        maxLength={maxCharacterLength}\n        keyboardType={metadataTypeKeyboard(question.metaDataType)}\n        autoCapitalize={metadataTypeAutoCapitalize(question.metaDataType)}\n      />\n    </View>\n  );\n\n  const bottomView = (\n    <View style={[styles.subTextRow, rtl && GlobalStyle.flexRowReverse]}>\n      <Text style={styles.descText}>\n        {showAnonymousWarning && i18n.t('survey:metadata-anonymous-warning')}\n      </Text>\n      <Text style={styles.descText}>\n        {characterLeft} / {maxCharacterLength}\n      </Text>\n    </View>\n  );\n\n  return (\n    <View style={GlobalStyle.questionContainer}>\n      {upperView}\n      {inputView}\n      {bottomView}\n    </View>\n  );\n};\n\nexport default OpenQuestion;\n\nconst phoneStyles = StyleSheet.create({\n  descText: {\n    color: Colors.openQuestionSubTitle,\n    fontSize: 12,\n    fontStyle: 'normal',\n    fontWeight: 'normal',\n    letterSpacing: 0,\n    lineHeight: 17,\n  },\n  inputBG: {\n    borderColor: Colors.borderColor,\n    borderWidth: 1,\n    borderRadius: 4,\n    height: 101,\n    marginVertical: 10,\n    paddingHorizontal: 15,\n  },\n  inputBGDark: {\n    borderColor: Colors.borderColorDark,\n  },\n  input: {\n    flex: 1,\n\n    // when multi=true, it is important to note that this aligns the text to the top on iOS,\n    // and centers it on Android. Use with textAlignVertical set to top for the same behavior in both platforms.\n    textAlignVertical: 'top', // this is an android only props, won't affect ios\n  },\n  paddingVertical15: {\n    ...Platform.select({\n      ios: {\n        paddingVertical: 15,\n      },\n      android: {\n        paddingVertical: 5,\n      },\n    }),\n  },\n  metaDataTypeInput: {\n    fontSize: 14,\n    height: 40,\n  },\n  subTextRow: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    width: '100%',\n  },\n  title: {\n    marginBottom: 6,\n  },\n});\n"]}