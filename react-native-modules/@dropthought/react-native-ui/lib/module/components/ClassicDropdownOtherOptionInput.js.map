{"version":3,"sources":["ClassicDropdownOtherOptionInput.tsx"],"names":["React","useRef","StyleSheet","TextInput","View","Text","GlobalStyle","Colors","i18n","metadataTypeKeyboard","metadataTypeAutoCapitalize","MetadataDesc","useTheme","useFocus","onBlur","onFocus","isFocused","setIsFocused","useState","onFocusHandler","useCallback","onBlurHandler","ClassicDropdownOtherOptionInput","visible","question","placeholder","value","onChangeText","themeColor","rtl","dir","inputRef","fontColor","focusProps","inputTextBorderStyle","borderColor","undefined","inputTextColorStyle","color","styles","textInputContainer","flexRowReverse","textInput","textAlignRight","inputPlaceholder","transparent","metaDataType","descText","textAlignLeft","length","create","height","marginTop","width","textAlign","textAlignVertical","borderWidth","borderRadius","rankingContainerBorder","paddingTop","paddingBottom","paddingHorizontal","openQuestionSubTitle"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,QAA8B,OAA9B;AACA,SAASC,UAAT,EAAqBC,SAArB,EAAgCC,IAAhC,EAAsCC,IAAtC,QAAkD,cAAlD;AAEA,OAAOC,WAAP,IAAsBC,MAAtB,QAAoC,WAApC;AACA,OAAOC,IAAP,MAAiB,gBAAjB;AACA,SACEC,oBADF,EAEEC,0BAFF,QAGO,uBAHP;AAIA,OAAOC,YAAP,MAAyB,gBAAzB;AAEA,SAASC,QAAT,QAAyB,mBAAzB;;AAWA,MAAMC,QAAQ,GAAG,CAACC,MAAD,EAAqBC,OAArB,KAA6C;AAC5D,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BjB,KAAK,CAACkB,QAAN,CAAe,KAAf,CAAlC;AACA,QAAMC,cAAc,GAAGnB,KAAK,CAACoB,WAAN,CAAkB,MAAM;AAC7CL,IAAAA,OAAO,IAAIA,OAAO,EAAlB;AACAE,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACD,GAHsB,EAGpB,CAACF,OAAD,CAHoB,CAAvB;AAIA,QAAMM,aAAa,GAAGrB,KAAK,CAACoB,WAAN,CAAkB,MAAM;AAC5CN,IAAAA,MAAM,IAAIA,MAAM,EAAhB;AACAG,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,GAHqB,EAGnB,CAACH,MAAD,CAHmB,CAAtB;AAIA,SAAO;AACLE,IAAAA,SADK;AAELD,IAAAA,OAAO,EAAEI,cAFJ;AAGLL,IAAAA,MAAM,EAAEO;AAHH,GAAP;AAKD,CAfD;;AAiBA,MAAMC,+BAAgD,GAAG,CAAC;AACxDC,EAAAA,OADwD;AAExDC,EAAAA,QAFwD;AAGxDC,EAAAA,WAHwD;AAIxDC,EAAAA,KAJwD;AAKxDC,EAAAA,YALwD;AAMxDC,EAAAA;AANwD,CAAD,KAOnD;AACJ,QAAMC,GAAG,GAAGrB,IAAI,CAACsB,GAAL,OAAe,KAA3B;AACA,QAAMC,QAAQ,GAAG9B,MAAM,CAAC,IAAD,CAAvB;AACA,QAAM;AAAE+B,IAAAA;AAAF,MAAgBpB,QAAQ,EAA9B;;AAEA,QAAMO,cAAc,GAAG,MAAM,CAAE,CAA/B;;AACA,QAAME,aAAa,GAAG,MAAM,CAAE,CAA9B;;AACA,QAAM;AAAEL,IAAAA,SAAF;AAAa,OAAGiB;AAAhB,MAA+BpB,QAAQ,CAACQ,aAAD,EAAgBF,cAAhB,CAA7C;AAEA,QAAMe,oBAAoB,GAAGlB,SAAS,GAClC;AAAEmB,IAAAA,WAAW,EAAEP;AAAf,GADkC,GAElCQ,SAFJ;AAGA,QAAMC,mBAAmB,GAAG;AAAEC,IAAAA,KAAK,EAAEN;AAAT,GAA5B;AAEA,MAAI,CAACT,OAAL,EAAc,OAAO,IAAP;AACd,sBACE,uDACE,oBAAC,YAAD;AAAc,IAAA,QAAQ,EAAEC,QAAxB;AAAkC,IAAA,GAAG,EAAEK;AAAvC,IADF,eAEE,oBAAC,IAAD;AACE,IAAA,KAAK,EAAE,CAACU,MAAM,CAACC,kBAAR,EAA4BX,GAAG,IAAIvB,WAAW,CAACmC,cAA/C;AADT,kBAGE,oBAAC,SAAD;AACE,IAAA,GAAG,EAAEV,QADP;AAEE,IAAA,KAAK,EAAE,CACLQ,MAAM,CAACG,SADF,EAELb,GAAG,IAAIvB,WAAW,CAACqC,cAFd,EAGLT,oBAHK,EAILG,mBAJK,CAFT;AAQE,IAAA,WAAW,EAAEZ,WARf;AASE,IAAA,oBAAoB,EAAElB,MAAM,CAACqC,gBAT/B;AAUE,IAAA,SAAS,MAVX;AAWE,IAAA,YAAY,EAAEjB,YAXhB;AAYE,IAAA,qBAAqB,EAAEpB,MAAM,CAACsC,WAZhC;AAaE,IAAA,cAAc,EAAEjB,UAblB;AAcE,IAAA,KAAK,EAAEF,KAdT;AAeE,IAAA,SAAS,EAAE,GAfb;AAgBE,IAAA,YAAY,EAAEjB,oBAAoB,CAACe,QAAQ,CAACsB,YAAV,CAhBpC;AAiBE,IAAA,cAAc,EAAEpC,0BAA0B,CAACc,QAAQ,CAACsB,YAAV;AAjB5C,KAkBMb,UAlBN,EAHF,CAFF,eA0BE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE,CAACM,MAAM,CAACQ,QAAR,EAAkBlB,GAAG,IAAIvB,WAAW,CAAC0C,aAArC;AAAb,KACGtB,KAAK,CAACuB,MADT,SA1BF,CADF;AAgCD,CAtDD;;AAwDA,MAAMV,MAAM,GAAGrC,UAAU,CAACgD,MAAX,CAAkB;AAC/BV,EAAAA,kBAAkB,EAAE;AAClBW,IAAAA,MAAM,EAAE,EADU;AAElBC,IAAAA,SAAS,EAAE;AAFO,GADW;AAK/BV,EAAAA,SAAS,EAAE;AACTW,IAAAA,KAAK,EAAE,MADE;AAETF,IAAAA,MAAM,EAAE,MAFC;AAGTG,IAAAA,SAAS,EAAE,MAHF;AAITC,IAAAA,iBAAiB,EAAE,KAJV;AAKTC,IAAAA,WAAW,EAAE,CALJ;AAMTC,IAAAA,YAAY,EAAE,CANL;AAOTtB,IAAAA,WAAW,EAAE5B,MAAM,CAACmD,sBAPX;AAQTC,IAAAA,UAAU,EAAE,EARH;AASTC,IAAAA,aAAa,EAAE,EATN;AAUTC,IAAAA,iBAAiB,EAAE;AAVV,GALoB;AAiB/Bd,EAAAA,QAAQ,EAAE;AACRT,IAAAA,KAAK,EAAE/B,MAAM,CAACuD,oBADN;AAERR,IAAAA,SAAS,EAAE,OAFH;AAGRD,IAAAA,KAAK,EAAE,MAHC;AAIRD,IAAAA,SAAS,EAAE;AAJH;AAjBqB,CAAlB,CAAf;AAyBA,eAAe9B,+BAAf","sourcesContent":["import React, { useRef } from 'react';\nimport { StyleSheet, TextInput, View, Text } from 'react-native';\n\nimport GlobalStyle, { Colors } from '../styles';\nimport i18n from '../translation';\nimport {\n  metadataTypeKeyboard,\n  metadataTypeAutoCapitalize,\n} from './ClassicOpenQuestion';\nimport MetadataDesc from './MetadataDesc';\nimport type { Question } from '../data';\nimport { useTheme } from '../contexts/theme';\n\ntype Props = {\n  visible: boolean;\n  question: Question;\n  placeholder: string;\n  value: string;\n  onChangeText: (text: string) => void;\n  themeColor: string;\n};\n\nconst useFocus = (onBlur: () => void, onFocus: () => void) => {\n  const [isFocused, setIsFocused] = React.useState(false);\n  const onFocusHandler = React.useCallback(() => {\n    onFocus && onFocus();\n    setIsFocused(true);\n  }, [onFocus]);\n  const onBlurHandler = React.useCallback(() => {\n    onBlur && onBlur();\n    setIsFocused(false);\n  }, [onBlur]);\n  return {\n    isFocused,\n    onFocus: onFocusHandler,\n    onBlur: onBlurHandler,\n  };\n};\n\nconst ClassicDropdownOtherOptionInput: React.FC<Props> = ({\n  visible,\n  question,\n  placeholder,\n  value,\n  onChangeText,\n  themeColor,\n}) => {\n  const rtl = i18n.dir() === 'rtl';\n  const inputRef = useRef(null);\n  const { fontColor } = useTheme();\n\n  const onFocusHandler = () => {};\n  const onBlurHandler = () => {};\n  const { isFocused, ...focusProps } = useFocus(onBlurHandler, onFocusHandler);\n\n  const inputTextBorderStyle = isFocused\n    ? { borderColor: themeColor }\n    : undefined;\n  const inputTextColorStyle = { color: fontColor };\n\n  if (!visible) return null;\n  return (\n    <>\n      <MetadataDesc question={question} rtl={rtl} />\n      <View\n        style={[styles.textInputContainer, rtl && GlobalStyle.flexRowReverse]}\n      >\n        <TextInput\n          ref={inputRef}\n          style={[\n            styles.textInput,\n            rtl && GlobalStyle.textAlignRight,\n            inputTextBorderStyle,\n            inputTextColorStyle,\n          ]}\n          placeholder={placeholder}\n          placeholderTextColor={Colors.inputPlaceholder}\n          multiline\n          onChangeText={onChangeText}\n          underlineColorAndroid={Colors.transparent}\n          selectionColor={themeColor}\n          value={value}\n          maxLength={100}\n          keyboardType={metadataTypeKeyboard(question.metaDataType)}\n          autoCapitalize={metadataTypeAutoCapitalize(question.metaDataType)}\n          {...focusProps}\n        />\n      </View>\n      <Text style={[styles.descText, rtl && GlobalStyle.textAlignLeft]}>\n        {value.length}/100\n      </Text>\n    </>\n  );\n};\n\nconst styles = StyleSheet.create({\n  textInputContainer: {\n    height: 80,\n    marginTop: 10,\n  },\n  textInput: {\n    width: '100%',\n    height: '100%',\n    textAlign: 'left',\n    textAlignVertical: 'top',\n    borderWidth: 1,\n    borderRadius: 4,\n    borderColor: Colors.rankingContainerBorder,\n    paddingTop: 16,\n    paddingBottom: 16,\n    paddingHorizontal: 12,\n  },\n  descText: {\n    color: Colors.openQuestionSubTitle,\n    textAlign: 'right',\n    width: '100%',\n    marginTop: 6,\n  },\n});\n\nexport default ClassicDropdownOtherOptionInput;\n"]}