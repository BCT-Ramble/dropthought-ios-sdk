{"version":3,"sources":["ClassicMandatoryTitle.tsx"],"names":["View","Text","StyleSheet","React","useAddMandatoryRef","GlobalStyle","Colors","ClassicQuestionWarningMessage","i18n","DimensionWidthType","useDimensionWidthType","useTheme","ClassicMandatoryTitle","forgot","invalidMessage","mandatoryErrorMessage","question","style","rtl","dir","dimensionWidthType","fontColor","ref","useRef","addMandatoryRef","useEffect","current","questionId","textStyle","styles","questionTitle","questionTitleSize","color","minHeight","language","undefined","horizontal","flexRowReverse","split","map","text","index","mandatory","optional","hint","create","phone","fontSize","tablet","mandatoryRed","flexDirection","flexWrap","marginBottom","textAlignVertical","alignSelf"],"mappings":"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","sourcesContent":["import { View, Text, StyleSheet, ViewStyle } from 'react-native';\nimport * as React from 'react';\n\nimport { useAddMandatoryRef } from '../contexts/survey-page';\nimport GlobalStyle, { Colors } from '../styles';\nimport ClassicQuestionWarningMessage from './ClassicQuestionWarningMessage';\nimport i18n from '../translation';\nimport {\n  DimensionWidthType,\n  useDimensionWidthType,\n} from '../hooks/useWindowDimensions';\nimport { useTheme } from '../contexts/theme';\nimport type { Question } from '../data';\n\ntype Props = {\n  forgot?: boolean;\n  invalidMessage?: string;\n  mandatoryErrorMessage: string;\n  question: Question;\n  style?: ViewStyle;\n};\n\nconst ClassicMandatoryTitle = ({\n  forgot,\n  invalidMessage = '',\n  mandatoryErrorMessage,\n  question,\n  style,\n}: Props) => {\n  const rtl = i18n.dir() === 'rtl';\n  const dimensionWidthType = useDimensionWidthType();\n  const { fontColor } = useTheme();\n\n  const ref = React.useRef<View>(null);\n  const addMandatoryRef = useAddMandatoryRef();\n\n  React.useEffect(() => {\n    if (ref.current) {\n      addMandatoryRef(question.questionId, ref.current);\n    }\n  }, [addMandatoryRef, question.questionId]);\n\n  const textStyle = [\n    styles.questionTitle,\n    questionTitleSize[dimensionWidthType],\n    {\n      color: fontColor,\n      minHeight: i18n.language === 'te' ? 30 : undefined,\n    },\n  ];\n\n  return (\n    <View\n      ref={ref}\n      style={[styles.horizontal, style, rtl && GlobalStyle.flexRowReverse]}\n    >\n      {question.questionTitle.split(' ').map((text, index) => (\n        <Text key={index} style={textStyle}>\n          {text + ' '}\n        </Text>\n      ))}\n      {\n        //optional was been used on matrix question\n        (question.mandatory || question.optional) && (\n          <Text style={styles.hint}>*</Text>\n        )\n      }\n      <ClassicQuestionWarningMessage\n        // forgot message has higher priority than custom invalid message\n        message={forgot ? mandatoryErrorMessage : invalidMessage}\n      />\n    </View>\n  );\n};\n\nexport default ClassicMandatoryTitle;\n\nconst questionTitleSize = StyleSheet.create({\n  [DimensionWidthType.phone]: {\n    fontSize: 16,\n  },\n  [DimensionWidthType.tablet]: {\n    fontSize: 18,\n  },\n});\n\nconst styles = StyleSheet.create({\n  hint: {\n    color: Colors.mandatoryRed,\n    fontSize: 18,\n  },\n  horizontal: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n  },\n  questionTitle: {\n    fontSize: 18,\n    marginBottom: 2,\n    textAlignVertical: 'center',\n    alignSelf: 'center',\n  },\n});\n"]}