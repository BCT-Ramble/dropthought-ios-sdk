{"version":3,"sources":["MultiChoiceQuestion.tsx"],"names":["React","StyleSheet","Platform","ScrollView","RNScrollView","KeyboardAvoidingScrollView","last","getOptionsFromQuestion","NewOptionWithHighlight","NewOtherOptionWithHighlight","MandatoryTitle","OS","getInitialSelectedValuesFromFeedbackProps","options","feedback","otherText","values","map","answers","forEach","answer","Number","isInteger","length","MultiChoiceQuestion","anonymous","question","onFeedback","forgot","themeColor","questionId","initialSelected","selected","setSelected","useState","handleFeedback","value","index","isOther","undefined","filter","type","otherFlag","onOptionPressHandler","onChangeValueHandler","newValue","checked","buttonList","title","commonStyles","container","memo","create","flex","paddingHorizontal"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { StyleSheet, Platform, ScrollView as RNScrollView } from 'react-native';\nimport { KeyboardAvoidingScrollView } from './KeyboardAvoidingView';\nimport { last } from 'ramda';\nimport type { Question as OriginQuestion, Option, Feedback } from '../data';\nimport { getOptionsFromQuestion } from '../utils/data';\nimport NewOptionWithHighlight from './NewOptionWithHighlight';\nimport NewOtherOptionWithHighlight from './NewOtherOptionWithHighlight';\nimport MandatoryTitle from './MandatoryTitle';\n\nconst ScrollView =\n  Platform.OS === 'ios' ? KeyboardAvoidingScrollView : RNScrollView;\n\ntype Question = OriginQuestion & {\n  options: string[];\n  otherText: string;\n};\n\ntype Props = {\n  anonymous: boolean;\n  question: Question;\n  onFeedback: (feedback: Feedback) => void;\n  forgot: boolean;\n  feedback: Feedback;\n  themeColor: string;\n};\n\nconst getInitialSelectedValuesFromFeedbackProps = (\n  options: Option[],\n  feedback: Feedback\n): {\n  values: boolean[];\n  otherText: string | undefined;\n} => {\n  let otherText = '';\n  // default: selected false for each options\n  let values = options.map(() => false);\n\n  // if feedback has answers, turn the checked to true\n  if (feedback && feedback.answers) {\n    feedback.answers.forEach((answer) => {\n      // if the answer is a number type, turn the corresponding value's checked to true\n      if (typeof answer === 'number' && Number.isInteger(answer)) {\n        values[answer] = true;\n      } else {\n        // if the strValue is not a number type,\n        // it is for other label, always the last of the values\n        values[values.length - 1] = true;\n        // @ts-ignore\n        otherText = answer;\n      }\n    });\n  }\n  return { values, otherText };\n};\n\nconst MultiChoiceQuestion = ({\n  anonymous,\n  question,\n  onFeedback,\n  // need add new design about if user forgot answer\n  forgot,\n  feedback,\n  themeColor,\n}: Props) => {\n  const { questionId } = question;\n  const options = getOptionsFromQuestion(question);\n  const initialSelected = getInitialSelectedValuesFromFeedbackProps(\n    options,\n    feedback\n  );\n\n  const [selected, setSelected] = React.useState(initialSelected);\n\n  const handleFeedback = (values: boolean[], otherText: string | undefined) => {\n    onFeedback({\n      questionId: questionId,\n      // @ts-ignore\n      answers: values\n        .map((value, index) => {\n          // only return the answer if checked\n          if (value) {\n            // for 'other option', return the text\n            if (options[index].isOther) {\n              return otherText;\n            }\n            return index;\n          }\n          return undefined;\n        })\n        .filter((value) => value !== undefined),\n      type: 'multiChoice',\n\n      // otherFlag if the last option is other type and the last values is true and otherText is not undefined\n      otherFlag:\n        last(options)?.isOther && last(values) && otherText !== undefined,\n    });\n\n    setSelected({\n      values: values,\n      otherText,\n    });\n  };\n\n  const onOptionPressHandler = (index: number) => {\n    // copy the values, and toggle the checked value\n    let values = [...selected.values];\n    values[index] = !selected.values[index];\n\n    handleFeedback(values, selected.otherText);\n  };\n\n  const onChangeValueHandler = (\n    index: number,\n    newValue: {\n      value: string | undefined;\n      checked: boolean;\n    }\n  ) => {\n    // copy the values, and set the value\n    let values = [...selected.values];\n    values[index] = newValue.checked;\n\n    handleFeedback(values, newValue.value);\n  };\n\n  const buttonList = options.map(({ title, isOther }, index) =>\n    isOther ? (\n      <NewOtherOptionWithHighlight\n        key={index}\n        id={index}\n        type={'checkbox'}\n        title={title}\n        checked={selected.values[index]}\n        themeColor={themeColor}\n        onPress={onOptionPressHandler}\n        onChangeValue={onChangeValueHandler}\n        textValue={selected.otherText}\n        feedback={feedback}\n        question={question}\n        anonymous={anonymous}\n      />\n    ) : (\n      <NewOptionWithHighlight\n        key={index}\n        id={index}\n        type={'checkbox'}\n        title={title}\n        checked={selected.values[index]}\n        themeColor={themeColor}\n        onPress={onOptionPressHandler}\n      />\n    )\n  );\n\n  return (\n    // @ts-ignore\n    <ScrollView extraAvoidingSpace={30} style={commonStyles.container}>\n      <MandatoryTitle forgot={forgot} question={question} />\n      {buttonList}\n    </ScrollView>\n  );\n};\n\nexport default React.memo(MultiChoiceQuestion);\n\nconst commonStyles = StyleSheet.create({\n  container: {\n    flex: 1,\n    paddingHorizontal: 42,\n  },\n});\n"]}