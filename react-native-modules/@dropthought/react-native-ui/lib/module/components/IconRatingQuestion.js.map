{"version":3,"sources":["IconRatingQuestion.tsx"],"names":["React","useEffect","useMemo","useState","View","StyleSheet","SmileyIcon","isNil","MandatoryTitle","GlobalStyle","i18n","defaultIcon","getIcons","getSelectedIcons","RatingIconType","DimensionWidthType","useDimensionWidthType","useTheme","FakeSmiley","ClassicIconRatingQuestion","survey","question","feedback","forgot","onFeedback","colorScheme","rtl","dir","dimensionWidthType","isPhone","phone","styles","phoneStyles","tabletStyles","options","subType","questionId","optionAmount","length","fakeSmileyAmount","selectedIndex","setSelectedIndex","baseIcon","icons","selectedIcons","getInitialSelectedValueFromFeedbackProps","prevAnswer","answers","parseInt","setSelectedAndFeedback","index","result","type","iconRow","horizontal","flexRowReverse","map","option","isSelected","source","star","heart","undefined","toString","Array","_","commonStyles","container","mandatoryErrorMessage","smileyRowContainer","flexEnd","memo","create","flex","paddingHorizontal","flexDirection","maxWidth","paddingLeft","justifyContent","paddingTop"],"mappings":"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","sourcesContent":["import React, { useEffect, useMemo, useState } from 'react';\nimport { View, StyleSheet } from 'react-native';\nimport SmileyIcon from './SmileyIcon';\nimport { isNil } from 'ramda';\nimport MandatoryTitle from './MandatoryTitle';\nimport GlobalStyle from '../styles';\nimport i18n from '../translation';\nimport {\n  defaultIcon,\n  getIcons,\n  getSelectedIcons,\n  RatingIconType,\n} from '../constants/RatingQuestionConstants';\nimport type { Feedback as OriginFeedback, Question, Survey } from '../data';\nimport {\n  DimensionWidthType,\n  useDimensionWidthType,\n} from '../hooks/useWindowDimensions';\nimport { useTheme } from '../contexts/theme';\n\ntype Feedback = OriginFeedback & {\n  answers: string[];\n};\n\ntype Props = {\n  survey: Survey;\n  question: Question;\n  onFeedback: ({\n    questionId,\n    answers,\n    type,\n  }: {\n    questionId: string;\n    answers: number[];\n    type: string;\n  }) => void;\n  feedback: Feedback;\n  forgot: boolean;\n  themeColor: string;\n};\n\nconst FakeSmiley = () => {\n  return <SmileyIcon selected={false} onPress={() => {}} label=\"\" />;\n};\n\nconst ClassicIconRatingQuestion = ({\n  survey,\n  question,\n  feedback,\n  forgot,\n  onFeedback,\n}: Props) => {\n  const { colorScheme } = useTheme();\n  const rtl = i18n.dir() === 'rtl';\n\n  const dimensionWidthType = useDimensionWidthType();\n  const isPhone = dimensionWidthType === DimensionWidthType.phone;\n  const styles = isPhone ? phoneStyles : tabletStyles;\n\n  const { options = [], subType = 'smiley', questionId } = question;\n  const optionAmount = options.length;\n  const fakeSmileyAmount = 5 - optionAmount;\n\n  const [selectedIndex, setSelectedIndex] = useState<number>();\n\n  const baseIcon = useMemo(\n    () => defaultIcon(subType, colorScheme),\n    [colorScheme, subType]\n  );\n  const icons = useMemo(\n    () => getIcons(subType, optionAmount),\n    [subType, optionAmount]\n  );\n  const selectedIcons = useMemo(\n    () => getSelectedIcons(subType, optionAmount),\n    [subType, optionAmount]\n  );\n\n  useEffect(() => {\n    getInitialSelectedValueFromFeedbackProps();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const getInitialSelectedValueFromFeedbackProps = () => {\n    let prevAnswer;\n    if (feedback && feedback.answers && !isNil(feedback.answers[0])) {\n      prevAnswer = parseInt(feedback.answers[0], 10);\n      setSelectedIndex(prevAnswer);\n    }\n  };\n\n  const setSelectedAndFeedback = (index: number) => {\n    setSelectedIndex(index);\n\n    const result = {\n      questionId,\n      answers: [index],\n      type: 'rating',\n    };\n    onFeedback(result);\n  };\n\n  const iconRow = (\n    <View style={[styles.horizontal, rtl && GlobalStyle.flexRowReverse]}>\n      {options.map((option, index) => {\n        const isSelected = selectedIndex === index;\n        let source;\n        if (\n          subType === RatingIconType.star ||\n          subType === RatingIconType.heart\n        ) {\n          if (selectedIndex !== undefined) {\n            source = selectedIndex >= index ? icons[selectedIndex] : baseIcon;\n          } else {\n            source = baseIcon;\n          }\n        } else {\n          source = isSelected ? selectedIcons[index] : icons[index];\n        }\n        return (\n          <SmileyIcon\n            selected={isSelected}\n            source={source}\n            label={option}\n            onPress={() => setSelectedAndFeedback(index)}\n            key={index.toString()}\n          />\n        );\n      })}\n      {Array(fakeSmileyAmount).map((_, index) => (\n        <FakeSmiley key={index.toString()} />\n      ))}\n    </View>\n  );\n\n  return (\n    <View style={commonStyles.container}>\n      <MandatoryTitle\n        forgot={forgot}\n        mandatoryErrorMessage={survey.mandatoryErrorMessage}\n        question={question}\n      />\n      <View style={[styles.smileyRowContainer, rtl && GlobalStyle.flexEnd]}>\n        {iconRow}\n      </View>\n    </View>\n  );\n};\n\nexport default React.memo(ClassicIconRatingQuestion);\n\nconst commonStyles = StyleSheet.create({\n  container: {\n    flex: 1,\n    paddingHorizontal: 42,\n  },\n});\n\nconst phoneStyles = StyleSheet.create({\n  horizontal: {\n    flex: 1,\n    flexDirection: 'column',\n    maxWidth: 560,\n    paddingLeft: 10,\n    justifyContent: 'space-between',\n  },\n  smileyRowContainer: {\n    flex: 1,\n    flexDirection: 'row',\n    paddingTop: 6,\n  },\n});\nconst tabletStyles = StyleSheet.create({\n  horizontal: {\n    flex: 1,\n    flexDirection: 'row',\n    maxWidth: 560,\n    paddingLeft: 10,\n    justifyContent: 'space-between',\n  },\n  smileyRowContainer: {\n    flex: 1,\n    flexDirection: 'row',\n    paddingTop: 6,\n  },\n});\n"]}