{"version":3,"sources":["PictureChoiceQuestion.tsx"],"names":["React","View","StyleSheet","ScrollView","RNScrollView","Platform","GlobalStyle","PictureChoiceItem","PictureChoiceOtherItem","usePictureChoice","MandatoryTitle","KeyboardAvoidingScrollView","i18n","OS","PictureChoiceQuestion","question","feedback","onFeedback","forgot","themeColor","onUpload","isUploading","otherText","images","otherPictureEnable","otherPictureAnswer","setOtherPictureAnswerText","setOtherPictureAnswerUrl","otherPictureSelected","setOtherPictureSelected","selectIndex","onSelectIndex","replaceSelectIndex","isMultipleChoice","resetOtherPicture","invalidMessage","setInvalidMessage","imageItems","map","uri","option","index","selected","includes","onPress","undefined","toString","otherImageItem","length","t","file","url","msg","text","styles","container","mandatoryTitle","pictureGridContainer","memo","create","paddingHorizontal","flex1","marginBottom","flexDirection","flexWrap"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {\n  View,\n  StyleSheet,\n  ScrollView as RNScrollView,\n  Platform,\n} from 'react-native';\nimport GlobalStyle from '../styles';\nimport PictureChoiceItem from './PictureChoiceItem';\nimport PictureChoiceOtherItem from './PictureChoiceOtherItem';\nimport { usePictureChoice } from '../hooks/usePictureChoice';\nimport type { Question, Feedback, ImageFileProps } from '../data';\nimport MandatoryTitle from './MandatoryTitle';\nimport { KeyboardAvoidingScrollView } from './KeyboardAvoidingView';\nimport i18n from '../translation';\n\nconst ScrollView =\n  Platform.OS === 'ios' ? KeyboardAvoidingScrollView : RNScrollView;\n\ntype Props = {\n  question: Question;\n  onFeedback: (feedback: Feedback) => void;\n  onUpload: (file: ImageFileProps) => Promise<string | undefined>;\n  isUploading: boolean;\n  feedback?: Feedback;\n  forgot: boolean;\n  themeColor: string;\n};\n\nconst PictureChoiceQuestion = ({\n  question,\n  feedback,\n  onFeedback,\n  forgot,\n  themeColor,\n  onUpload,\n  isUploading,\n}: Props) => {\n  const { otherText } = question;\n\n  const {\n    images,\n    otherPictureEnable,\n    otherPictureAnswer,\n    setOtherPictureAnswerText,\n    setOtherPictureAnswerUrl,\n    otherPictureSelected,\n    setOtherPictureSelected,\n    selectIndex,\n    onSelectIndex,\n    replaceSelectIndex,\n    isMultipleChoice,\n    resetOtherPicture,\n    invalidMessage,\n    setInvalidMessage,\n  } = usePictureChoice(question, onFeedback, feedback);\n\n  const imageItems = images.map(({ uri, option }, index) => {\n    const selected = selectIndex.includes(index);\n\n    const onPress = () => {\n      setInvalidMessage(undefined);\n      if (isMultipleChoice) {\n        onSelectIndex(index);\n      } else {\n        replaceSelectIndex([index]);\n        resetOtherPicture();\n      }\n    };\n    return (\n      <PictureChoiceItem\n        title={option}\n        uri={uri}\n        isMultipleChoice={isMultipleChoice}\n        selected={selected}\n        columnGap={24}\n        onPress={onPress}\n        index={index}\n        themeColor={themeColor}\n        key={index.toString()}\n      />\n    );\n  });\n\n  const otherImageItem = otherPictureEnable ? (\n    <PictureChoiceOtherItem\n      otherPicture={otherPictureAnswer}\n      isMultipleChoice={isMultipleChoice}\n      selected={otherPictureSelected}\n      placeholder={\n        otherText.length > 0 ? otherText : i18n.t('survey:other-placeholder')\n      }\n      columnGap={24}\n      onChooseImage={() => {\n        if (!isMultipleChoice) {\n          replaceSelectIndex([]);\n        }\n        setOtherPictureSelected(true);\n      }}\n      onSelect={() => {\n        if (otherPictureSelected) {\n          setInvalidMessage(undefined);\n          resetOtherPicture();\n        } else {\n          if (!isMultipleChoice) {\n            replaceSelectIndex([]);\n          }\n          setOtherPictureSelected(true);\n        }\n      }}\n      onUpload={async (file) => {\n        setInvalidMessage(undefined);\n        const url = await onUpload(file);\n        if (url) {\n          setOtherPictureAnswerUrl(url);\n        }\n      }}\n      onError={(msg) => {\n        setInvalidMessage(msg);\n      }}\n      isUploading={isUploading}\n      onChangeText={(text) => {\n        setOtherPictureAnswerText(text);\n      }}\n      themeColor={themeColor}\n    />\n  ) : null;\n\n  return (\n    <ScrollView extraAvoidingSpace={30} style={styles.container}>\n      <MandatoryTitle\n        forgot={forgot}\n        question={question}\n        style={styles.mandatoryTitle}\n        invalidMessage={invalidMessage}\n      />\n      <View style={styles.pictureGridContainer}>\n        {imageItems}\n        {otherImageItem}\n      </View>\n    </ScrollView>\n  );\n};\n\nexport default React.memo(PictureChoiceQuestion);\n\nconst styles = StyleSheet.create({\n  container: {\n    paddingHorizontal: 30,\n    ...GlobalStyle.flex1,\n  },\n  mandatoryTitle: {\n    marginBottom: 12,\n  },\n  pictureGridContainer: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n  },\n});\n"]}