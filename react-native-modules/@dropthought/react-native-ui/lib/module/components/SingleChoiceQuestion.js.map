{"version":3,"sources":["SingleChoiceQuestion.tsx"],"names":["React","StyleSheet","Platform","ScrollView","RNScrollView","KeyboardAvoidingScrollView","MandatoryTitle","getOptionsFromQuestion","isNil","NewOtherOptionWithHighlight","NewOptionWithHighlight","OS","SingleChoiceQuestion","anonymous","question","onFeedback","forgot","feedback","themeColor","questionId","options","getInitialValueFromFeedbackProps","value","otherText","answers","answer","Number","isInteger","length","initialSelected","selected","setSelected","useState","handleFeedback","id","type","onChangeValueHandler","index","newValue","checked","undefined","otherFlag","buttonList","map","title","isOther","isActive","toString","commonStyles","container","memo","create","flex","paddingHorizontal","fontSize","fontWeight","lineHeight","textAlign","marginBottom"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,EAAqBC,QAArB,EAA+BC,UAAU,IAAIC,YAA7C,QAAiE,cAAjE;AACA,SAASC,0BAAT,QAA2C,wBAA3C;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AAKA,SAASC,sBAAT,QAAuC,eAAvC;AACA,SAASC,KAAT,QAAsB,OAAtB;AACA,OAAOC,2BAAP,MAAwC,+BAAxC;AACA,OAAOC,sBAAP,MAAmC,0BAAnC;AAEA,MAAMP,UAAU,GACdD,QAAQ,CAACS,EAAT,KAAgB,KAAhB,GAAwBN,0BAAxB,GAAqDD,YADvD;;AAqBA,MAAMQ,oBAAoB,GAAG,CAAC;AAC5BC,EAAAA,SAD4B;AAE5BC,EAAAA,QAF4B;AAG5BC,EAAAA,UAH4B;AAI5B;AACAC,EAAAA,MAL4B;AAM5BC,EAAAA,QAN4B;AAO5BC,EAAAA;AAP4B,CAAD,KAQhB;AACX,QAAM;AAAEC,IAAAA;AAAF,MAAiBL,QAAvB;AACA,QAAMM,OAAO,GAAGb,sBAAsB,CAACO,QAAD,CAAtC;;AAEA,WAASO,gCAAT,GAA4C;AAC1C,QAAIC,KAAJ;AACA,QAAIC,SAAJ;;AACA,QAAIN,QAAQ,IAAIA,QAAQ,CAACO,OAArB,IAAgC,CAAChB,KAAK,CAACS,QAAQ,CAACO,OAAT,CAAiB,CAAjB,CAAD,CAA1C,EAAiE;AAC/D,YAAMC,MAAM,GAAGR,QAAQ,CAACO,OAAT,CAAiB,CAAjB,CAAf;;AAEA,UAAIE,MAAM,CAACC,SAAP,CAAiBF,MAAjB,CAAJ,EAA8B;AAC5BH,QAAAA,KAAK,GAAGG,MAAR;AACD,OAFD,MAEO;AACL;AACA;AACA;AACAF,QAAAA,SAAS,GAAGE,MAAZ;AACAH,QAAAA,KAAK,GAAGR,QAAQ,CAACM,OAAT,CAAiBQ,MAAzB;AACD;AACF;;AACD,WAAO;AACLN,MAAAA,KAAK,EAAEA,KADF;AAELC,MAAAA;AAFK,KAAP;AAID;;AACD,QAAMM,eAAe,GAAGR,gCAAgC,EAAxD;AAEA,QAAM,CAACS,QAAD,EAAWC,WAAX,IAA0B/B,KAAK,CAACgC,QAAN,CAAeH,eAAf,CAAhC;;AAEA,QAAMI,cAAc,GAAIC,EAAD,IAAgB;AACrCH,IAAAA,WAAW,CAAC;AACVT,MAAAA,KAAK,EAAEY,EADG;AAEVX,MAAAA,SAAS,EAAEO,QAAQ,CAACP;AAFV,KAAD,CAAX;AAIAR,IAAAA,UAAU,CAAC;AACTI,MAAAA,UAAU,EAAEA,UADH;AAETK,MAAAA,OAAO,EAAE,CAACU,EAAD,CAFA;AAGTC,MAAAA,IAAI,EAAE;AAHG,KAAD,CAAV;AAKD,GAVD,CA7BW,CAyCX;;;AACA,QAAMC,oBAAoB,GAAG,CAC3BC,KAD2B,EAE3BC,QAF2B,KAGxB;AACHP,IAAAA,WAAW,CAAC;AACV;AACAT,MAAAA,KAAK,EAAEgB,QAAQ,CAACC,OAAT,GAAmBF,KAAnB,GAA2BG,SAFxB;AAGVjB,MAAAA,SAAS,EAAEe,QAAQ,CAACC,OAAT,GAAmBD,QAAQ,CAAChB,KAA5B,GAAoC;AAHrC,KAAD,CAAX;AAKAP,IAAAA,UAAU,CAAC;AACTI,MAAAA,UAAU,EAAEA,UADH;AAET;AACA;AACAK,MAAAA,OAAO,EAAEc,QAAQ,CAACC,OAAT,GAAmB,CAACD,QAAQ,CAAChB,KAAV,CAAnB,GAAsC,EAJtC;AAKTa,MAAAA,IAAI,EAAE,cALG;AAOT;AACAM,MAAAA,SAAS,EAAEH,QAAQ,CAACC;AARX,KAAD,CAAV;AAUD,GAnBD;;AAqBA,QAAMG,UAAU,GAAGtB,OAAO,CAACuB,GAAR,CAAY,CAAC;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT,GAAD,EAAqBR,KAArB,KAA+B;AAAA;;AAC5D,UAAMS,QAAQ,GAAGhB,QAAQ,CAACR,KAAT,KAAmBe,KAApC;AAEA,WAAOQ,OAAO,gBACZ,oBAAC,2BAAD;AACE,MAAA,GAAG,EAAER,KADP;AAEE,MAAA,EAAE,EAAEA,KAFN;AAGE,MAAA,IAAI,EAAE,OAHR;AAIE,MAAA,KAAK,EAAEO,KAJT;AAKE,MAAA,OAAO,EAAEE,QALX;AAME,MAAA,UAAU,EAAE5B,UANd;AAOE,MAAA,OAAO,EAAEe,cAPX;AAQE,MAAA,aAAa,EAAEG,oBARjB;AASE,MAAA,SAAS,yBAAEN,QAAQ,CAACP,SAAX,wDAAE,oBAAoBwB,QAApB,EATb;AAUE,MAAA,QAAQ,EAAEjC,QAVZ;AAWE,MAAA,QAAQ,EAAEG,QAXZ;AAYE,MAAA,SAAS,EAAEJ;AAZb,MADY,gBAgBZ,oBAAC,sBAAD;AACE,MAAA,GAAG,EAAEwB,KADP;AAEE,MAAA,EAAE,EAAEA,KAFN;AAGE,MAAA,IAAI,EAAE,OAHR;AAIE,MAAA,KAAK,EAAEO,KAJT;AAKE,MAAA,OAAO,EAAEE,QALX;AAME,MAAA,UAAU,EAAE5B,UANd;AAOE,MAAA,OAAO,EAAEe;AAPX,MAhBF;AA0BD,GA7BkB,CAAnB;AA+BA;AAAA;AACE;AACA,wBAAC,UAAD;AAAY,MAAA,kBAAkB,EAAE,EAAhC;AAAoC,MAAA,KAAK,EAAEe,YAAY,CAACC;AAAxD,oBACE,oBAAC,cAAD;AAAgB,MAAA,MAAM,EAAEjC,MAAxB;AAAgC,MAAA,QAAQ,EAAEF;AAA1C,MADF,EAEG4B,UAFH;AAFF;AAOD,CA7GD;;AA+GA,4BAAe1C,KAAK,CAACkD,IAAN,CAAWtC,oBAAX,CAAf;AAEA,MAAMoC,YAAY,GAAG/C,UAAU,CAACkD,MAAX,CAAkB;AACrCF,EAAAA,SAAS,EAAE;AACTG,IAAAA,IAAI,EAAE,CADG;AAETC,IAAAA,iBAAiB,EAAE;AAFV,GAD0B;AAKrCT,EAAAA,KAAK,EAAE;AACLU,IAAAA,QAAQ,EAAE,EADL;AAELC,IAAAA,UAAU,EAAE,KAFP;AAGLC,IAAAA,UAAU,EAAE,EAHP;AAILC,IAAAA,SAAS,EAAE,QAJN;AAKLC,IAAAA,YAAY,EAAE;AALT;AAL8B,CAAlB,CAArB","sourcesContent":["import React from 'react';\nimport { StyleSheet, Platform, ScrollView as RNScrollView } from 'react-native';\nimport { KeyboardAvoidingScrollView } from './KeyboardAvoidingView';\nimport MandatoryTitle from './MandatoryTitle';\nimport type {\n  Feedback as OriginFeedback,\n  Question as OriginQuestion,\n} from '../data';\nimport { getOptionsFromQuestion } from '../utils/data';\nimport { isNil } from 'ramda';\nimport NewOtherOptionWithHighlight from './NewOtherOptionWithHighlight';\nimport NewOptionWithHighlight from './NewOptionWithHighlight';\n\nconst ScrollView =\n  Platform.OS === 'ios' ? KeyboardAvoidingScrollView : RNScrollView;\n\ntype Question = OriginQuestion & {\n  options: string[];\n  otherText: string;\n};\n\ntype Feedback = OriginFeedback & {\n  answers: (string | number)[];\n};\n\ntype Props = {\n  anonymous: boolean;\n  question: Question;\n  onFeedback: (feedback: Feedback) => void;\n  forgot: boolean;\n  feedback: Feedback;\n  themeColor: string;\n};\n\nconst SingleChoiceQuestion = ({\n  anonymous,\n  question,\n  onFeedback,\n  // need add new design about if user forgot answer\n  forgot,\n  feedback,\n  themeColor,\n}: Props) => {\n  const { questionId } = question;\n  const options = getOptionsFromQuestion(question);\n\n  function getInitialValueFromFeedbackProps() {\n    let value;\n    let otherText;\n    if (feedback && feedback.answers && !isNil(feedback.answers[0])) {\n      const answer = feedback.answers[0];\n\n      if (Number.isInteger(answer)) {\n        value = answer;\n      } else {\n        // if the answer is not a number type,\n        // it is for other label, return the last index\n        // @ts-ignore\n        otherText = answer;\n        value = question.options.length;\n      }\n    }\n    return {\n      value: value,\n      otherText,\n    };\n  }\n  const initialSelected = getInitialValueFromFeedbackProps();\n\n  const [selected, setSelected] = React.useState(initialSelected);\n\n  const handleFeedback = (id: number) => {\n    setSelected({\n      value: id,\n      otherText: selected.otherText,\n    });\n    onFeedback({\n      questionId: questionId,\n      answers: [id],\n      type: 'singleChoice',\n    });\n  };\n\n  // when other option's value is changed, newValues is {checked: boolean, value: string}\n  const onChangeValueHandler = (\n    index: any,\n    newValue: { checked: boolean; value: string | undefined }\n  ) => {\n    setSelected({\n      // if newValues is checked, set value to this index\n      value: newValue.checked ? index : undefined,\n      otherText: newValue.checked ? newValue.value : '',\n    });\n    onFeedback({\n      questionId: questionId,\n      // the answer of this feedback is the text value\n      // @ts-ignore\n      answers: newValue.checked ? [newValue.value] : [],\n      type: 'singleChoice',\n\n      // set otherFlag if newValue is checked\n      otherFlag: newValue.checked,\n    });\n  };\n\n  const buttonList = options.map(({ title, isOther }, index) => {\n    const isActive = selected.value === index;\n\n    return isOther ? (\n      <NewOtherOptionWithHighlight\n        key={index}\n        id={index}\n        type={'radio'}\n        title={title}\n        checked={isActive}\n        themeColor={themeColor}\n        onPress={handleFeedback}\n        onChangeValue={onChangeValueHandler}\n        textValue={selected.otherText?.toString()}\n        question={question}\n        feedback={feedback}\n        anonymous={anonymous}\n      />\n    ) : (\n      <NewOptionWithHighlight\n        key={index}\n        id={index}\n        type={'radio'}\n        title={title}\n        checked={isActive}\n        themeColor={themeColor}\n        onPress={handleFeedback}\n      />\n    );\n  });\n\n  return (\n    // @ts-ignore\n    <ScrollView extraAvoidingSpace={30} style={commonStyles.container}>\n      <MandatoryTitle forgot={forgot} question={question} />\n      {buttonList}\n    </ScrollView>\n  );\n};\n\nexport default React.memo(SingleChoiceQuestion);\n\nconst commonStyles = StyleSheet.create({\n  container: {\n    flex: 1,\n    paddingHorizontal: 42,\n  },\n  title: {\n    fontSize: 26,\n    fontWeight: '600',\n    lineHeight: 32,\n    textAlign: 'center',\n    marginBottom: 54,\n  },\n});\n"]}