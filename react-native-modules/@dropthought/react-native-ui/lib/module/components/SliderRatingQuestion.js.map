{"version":3,"sources":["SliderRatingQuestion.tsx"],"names":["React","useState","StyleSheet","Text","TouchableOpacity","ScrollView","MandatoryTitle","Colors","addOpacityToColor","DimensionWidthType","useDimensionWidthType","useTheme","COLOR_SCHEMES","isNil","MIN_VALUE","NPS_MIN_VALUE","getInitialSelectedValue","feedback","answers","parseInt","undefined","getLabelText","isPhone","question","maximumValue","valueData","labelText","type","options","length","SliderRatingQuestion","onFeedback","forgot","themeColor","questionId","scale","dimensionWidthType","phone","styles","phoneStyles","tabletStyles","colorScheme","fontColor","backgroundColor","appearanceBackgroundColor","dark","appearanceSubBlack","buttonTextSelected","borderColor","color","buttonTextStyle","value","setValue","onSelected","index","getSliderIndicator","Array","keys","map","textStyle","buttonText","commonStyles","container","memo","create","flex","paddingHorizontal","title","fontSize","fontWeight","lineHeight","textAlign","marginBottom","paddingVertical","borderRadius","overflow","borderWidth"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { StyleSheet, Text, TouchableOpacity, ScrollView } from 'react-native';\nimport MandatoryTitle from './MandatoryTitle';\nimport { Colors, addOpacityToColor } from '../styles';\nimport {\n  DimensionWidthType,\n  useDimensionWidthType,\n} from '../hooks/useWindowDimensions';\nimport type {\n  Question as OriginQuestion,\n  Feedback as OriginFeedback,\n} from '../data';\nimport { useTheme, COLOR_SCHEMES } from '../contexts/theme';\nimport { isNil } from 'ramda';\n\ntype Feedback = OriginFeedback & {\n  answers: string[];\n};\n\ntype Question = OriginQuestion & {\n  options: string[];\n  scale: string;\n};\n\ntype Props = {\n  question: Question;\n  onFeedback: ({\n    questionId,\n    answers,\n    type,\n  }: {\n    questionId: string;\n    answers: number[];\n    type: string;\n  }) => void;\n  feedback: Feedback;\n  forgot: boolean;\n  themeColor: string;\n};\n\nconst MIN_VALUE = 1;\nconst NPS_MIN_VALUE = 0;\n\nconst getInitialSelectedValue = (feedback: Feedback) => {\n  if (feedback && feedback.answers && !isNil(feedback.answers[0])) {\n    return parseInt(feedback.answers[0], 10);\n  }\n  return undefined;\n};\n\nconst getLabelText = ({\n  isPhone,\n  question,\n  maximumValue,\n  valueData,\n}: {\n  isPhone: boolean;\n  question: Question;\n  maximumValue: number;\n  valueData: number;\n}) => {\n  const labelText = `${\n    valueData + (question.type === 'nps' ? NPS_MIN_VALUE : MIN_VALUE)\n  }`;\n  if (isPhone) {\n    if (valueData === 0) {\n      return `${labelText} - ${question.options[0]}`;\n    }\n    if (valueData === maximumValue - 1) {\n      return `${labelText} - ${question.options[question.options.length - 1]}`;\n    }\n  }\n  return labelText;\n};\n\nconst SliderRatingQuestion = ({\n  question,\n  onFeedback,\n  feedback,\n  forgot,\n  themeColor,\n}: Props) => {\n  const { questionId, scale } = question;\n\n  const dimensionWidthType = useDimensionWidthType();\n  const isPhone = dimensionWidthType === DimensionWidthType.phone;\n  const styles = isPhone ? phoneStyles : tabletStyles;\n\n  const { colorScheme, fontColor, backgroundColor } = useTheme();\n\n  const appearanceBackgroundColor = addOpacityToColor(\n    colorScheme === COLOR_SCHEMES.dark ? Colors.appearanceSubBlack : themeColor,\n    0.08\n  );\n\n  const buttonTextSelected = {\n    backgroundColor:\n      colorScheme === COLOR_SCHEMES.dark\n        ? addOpacityToColor(themeColor, 0.3)\n        : appearanceBackgroundColor,\n    borderColor: themeColor,\n    color: colorScheme === COLOR_SCHEMES.dark ? fontColor : themeColor,\n  };\n\n  const buttonTextStyle = {\n    backgroundColor: appearanceBackgroundColor,\n    borderColor: backgroundColor,\n    color: fontColor,\n  };\n\n  const [value, setValue] = useState(getInitialSelectedValue(feedback));\n\n  const onSelected = (index: number) => {\n    onFeedback({\n      questionId,\n      answers: [index],\n      type: 'nps',\n    });\n    setValue(index);\n  };\n\n  const maximumValue = parseInt(scale, 10);\n\n  const getSliderIndicator = () => {\n    return [...Array(maximumValue).keys()].map((valueData, index) => {\n      const textStyle =\n        value === index\n          ? [styles.buttonText, buttonTextStyle, buttonTextSelected]\n          : [styles.buttonText, buttonTextStyle];\n      return (\n        <TouchableOpacity key={index} onPress={() => onSelected(index)}>\n          <Text style={textStyle}>\n            {getLabelText({\n              isPhone,\n              question,\n              maximumValue,\n              valueData,\n            })}\n          </Text>\n        </TouchableOpacity>\n      );\n    });\n  };\n\n  return (\n    <ScrollView style={commonStyles.container}>\n      <MandatoryTitle forgot={forgot} question={question} />\n      {getSliderIndicator()}\n    </ScrollView>\n  );\n};\n\nexport default React.memo(SliderRatingQuestion);\n\nconst commonStyles = StyleSheet.create({\n  container: {\n    flex: 1,\n    paddingHorizontal: 42,\n  },\n});\n\nconst phoneStyles = StyleSheet.create({\n  title: {\n    fontSize: 26,\n    fontWeight: '600',\n    lineHeight: 32,\n    textAlign: 'center',\n    marginBottom: 24,\n  },\n  buttonText: {\n    textAlign: 'center',\n    paddingVertical: 9,\n    marginBottom: 10,\n    borderRadius: 17,\n    overflow: 'hidden',\n    borderWidth: 1,\n  },\n});\n\nconst tabletStyles = StyleSheet.create({\n  title: {\n    fontSize: 26,\n    fontWeight: '600',\n    lineHeight: 32,\n    textAlign: 'center',\n    marginBottom: 24,\n  },\n  buttonText: {\n    textAlign: 'center',\n    paddingVertical: 9,\n    marginBottom: 10,\n    borderRadius: 17,\n    overflow: 'hidden',\n    borderWidth: 1,\n  },\n});\n"]}