{"version":3,"sources":["MultiLineTextInput.tsx"],"names":["React","useEffect","View","Text","TextInput","Platform","Keyboard","styles","QuestionMetaDataType","i18n","Colors","addOpacityToColor","GlobalStyle","useTheme","COLOR_SCHEMES","metadataTypeKeyboard","metadataType","toLocaleLowerCase","Email","Phone","Number","select","ios","default","Date","metadataTypeAutoCapitalize","Name","MultiLineTextInput","onEndEditingHandler","onChangeTextHandler","themeColor","feedback","question","anonymous","inputRef","showErrorHint","checked","onBlurHandler","onFocusHandler","colorScheme","fontColor","metaDataType","otherText","questionBrand","scale","type","MAX_CHARACTER","appearanceTextColorStyle","color","answersIndex","answers","length","text","setText","useState","focus","setFocus","rtl","dir","showAnonymousWarning","hideSubscription","addListener","remove","onChangeText","t","characterLeft","bottomText","bottomTextColor","warningRed","black","appearanceSubBackgroundColorStyle","backgroundColor","dark","appearanceSubBlack","inputValidStyle","borderWidth","borderColor","textInputStyle","inputContainer","textAlignRight","rightDescTextStyle","descText","descRight","opacity","leftDescTextStyle","descLeft","inputView","inputPlaceholder","bottomView","subTextRow","flexRowReverse"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\nimport {\n  View,\n  Text,\n  TextInput,\n  KeyboardTypeOptions,\n  Platform,\n  Keyboard,\n} from 'react-native';\nimport styles from './MultiLineTextInput.styles';\nimport { QuestionMetaDataType } from '../../utils/data';\nimport i18n from '../../translation';\nimport type {\n  Question,\n  QuestionMetaDataType as TypeQuestionMetaDataType,\n  Feedback,\n} from '../../data';\nimport { Colors, addOpacityToColor, GlobalStyle } from '../../styles';\nimport { useTheme } from '../../contexts/theme';\nimport { COLOR_SCHEMES } from '../../contexts/theme/theme.const';\n\nexport const metadataTypeKeyboard = (\n  metadataType: TypeQuestionMetaDataType | undefined\n): KeyboardTypeOptions | undefined => {\n  switch (metadataType?.toLocaleLowerCase()) {\n    case QuestionMetaDataType.Email:\n      return 'email-address';\n    case QuestionMetaDataType.Phone:\n      return 'phone-pad';\n    case QuestionMetaDataType.Number:\n      return Platform.select({\n        ios: 'numbers-and-punctuation',\n        default: 'default',\n      });\n    case QuestionMetaDataType.Date:\n    default:\n      return 'default';\n  }\n};\n\nexport const metadataTypeAutoCapitalize = (\n  metadataType: TypeQuestionMetaDataType | undefined\n) => {\n  switch (metadataType?.toLocaleLowerCase()) {\n    case QuestionMetaDataType.Name:\n      return 'words';\n    case QuestionMetaDataType.Email:\n    case QuestionMetaDataType.Phone:\n    case QuestionMetaDataType.Date:\n    case QuestionMetaDataType.Number:\n      return 'none';\n    default:\n      return 'sentences';\n  }\n};\n\ninterface Props {\n  onEndEditingHandler?: () => void;\n  onChangeTextHandler?: (t: string) => void;\n  onBlurHandler?: () => void;\n  onFocusHandler?: () => void;\n  themeColor: string;\n  feedback: Feedback;\n  question: Question;\n  anonymous?: boolean;\n  inputRef?: React.RefObject<TextInput>;\n  showErrorHint?: boolean;\n  checked?: boolean;\n}\n\nconst MultiLineTextInput: React.FC<Props> = ({\n  onEndEditingHandler,\n  onChangeTextHandler,\n  themeColor,\n  feedback,\n  question,\n  anonymous,\n  inputRef,\n  showErrorHint = false,\n  checked = true,\n  onBlurHandler = () => {},\n  onFocusHandler = () => {},\n}) => {\n  const { colorScheme, fontColor } = useTheme();\n  const {\n    metaDataType,\n    otherText = '',\n    questionBrand = '',\n    scale = 64,\n    type,\n  } = question;\n  const MAX_CHARACTER = type === 'open' ? Number(scale) : 100;\n  const appearanceTextColorStyle = { color: fontColor };\n  // to keep answer always select the last one\n  const answersIndex = feedback?.answers.length - 1;\n  const [text, setText] = React.useState<string>(\n    typeof feedback?.answers[answersIndex] === 'string'\n      ? `${feedback?.answers[answersIndex]}`\n      : ''\n  );\n  const [focus, setFocus] = React.useState(false);\n\n  const rtl = i18n.dir() === 'rtl';\n  const showAnonymousWarning =\n    anonymous &&\n    metaDataType &&\n    (metaDataType === 'Email' ||\n      metaDataType === 'Name' ||\n      metaDataType === 'Phone');\n\n  useEffect(() => {\n    const hideSubscription = Keyboard.addListener('keyboardDidHide', () => {\n      onEndEditingHandler && onEndEditingHandler();\n    });\n\n    return () => {\n      hideSubscription.remove();\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const onChangeText = (t: string) => {\n    // [DK-3756] if the text is close to the maxLength it will be rendered twice in the iOS, so we add the focus to prevent the issue.\n    if (focus) {\n      setText(t);\n    }\n    onChangeTextHandler && onChangeTextHandler(t);\n  };\n\n  const characterLeft = MAX_CHARACTER - text.length;\n\n  let bottomText = '';\n  let bottomTextColor = Colors.warningRed;\n  if (showAnonymousWarning) {\n    bottomText = i18n.t('survey:metadata-anonymous-warning');\n    bottomTextColor = addOpacityToColor(Colors.black, 0.6);\n  }\n\n  const appearanceSubBackgroundColorStyle = {\n    backgroundColor: addOpacityToColor(\n      colorScheme === COLOR_SCHEMES.dark\n        ? Colors.appearanceSubBlack\n        : themeColor,\n      0.08\n    ),\n  };\n  const inputValidStyle = {\n    borderWidth: 1,\n    borderColor: Colors.warningRed,\n  };\n  const textInputStyle = [\n    styles.inputContainer,\n    appearanceTextColorStyle,\n    appearanceSubBackgroundColorStyle,\n    showErrorHint ? inputValidStyle : null,\n    rtl && GlobalStyle.textAlignRight,\n  ];\n  const rightDescTextStyle = [\n    styles.descText,\n    styles.descRight,\n    appearanceTextColorStyle,\n    { opacity: 0.8 },\n  ];\n  const leftDescTextStyle = [\n    styles.descText,\n    styles.descLeft,\n    {\n      color: bottomTextColor,\n    },\n  ];\n\n  const inputView = (\n    <TextInput\n      ref={inputRef}\n      style={textInputStyle}\n      multiline={true}\n      onChangeText={onChangeText}\n      onFocus={() => {\n        setFocus(true);\n        onFocusHandler();\n      }}\n      onBlur={() => {\n        setFocus(false);\n        onBlurHandler();\n      }}\n      placeholder={\n        otherText.length > 0\n          ? otherText\n          : questionBrand.length > 0\n          ? questionBrand\n          : i18n.t('survey:other-placeholder')\n      }\n      placeholderTextColor={Colors.inputPlaceholder}\n      value={text}\n      maxLength={MAX_CHARACTER}\n      keyboardType={metadataTypeKeyboard(metaDataType)}\n      autoCapitalize={metadataTypeAutoCapitalize(metaDataType)}\n    />\n  );\n\n  const bottomView = (\n    <View style={[styles.subTextRow, rtl && GlobalStyle.flexRowReverse]}>\n      <Text style={leftDescTextStyle} numberOfLines={2}>\n        {bottomText}\n      </Text>\n      <Text style={rightDescTextStyle}>\n        {characterLeft + ' / ' + MAX_CHARACTER}\n      </Text>\n    </View>\n  );\n\n  return (\n    <>\n      {checked ? (\n        <View>\n          {inputView}\n          {bottomView}\n        </View>\n      ) : null}\n    </>\n  );\n};\n\nexport default MultiLineTextInput;\n"]}