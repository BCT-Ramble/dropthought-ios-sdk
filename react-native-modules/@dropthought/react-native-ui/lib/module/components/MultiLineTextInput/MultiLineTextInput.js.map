{"version":3,"sources":["MultiLineTextInput.tsx"],"names":["React","View","Text","TextInput","Platform","styles","QuestionMetaDataType","i18n","Colors","addOpacityToColor","GlobalStyle","useTheme","COLOR_SCHEMES","metadataTypeKeyboard","metadataType","Email","Phone","Number","select","ios","default","Date","metadataTypeAutoCapitalize","Name","MultiLineTextInput","onEndEditingHandler","onChangeTextHandler","themeColor","feedback","question","anonymous","inputRef","showErrorHint","checked","props","colorScheme","fontColor","metaDataType","questionBrand","scale","type","MAX_CHARACTER","appearanceTextColorStyle","color","hasEdited","setHasEdited","useState","text","setText","answers","rtl","dir","showAnonymousWarning","onEndEditing","onChangeText","t","characterLeft","length","AT_LEAST_CHARACTER","isInputInValid","bottomText","bottomTextColor","warningRed","count","black","appearanceSubBackgroundColorStyle","backgroundColor","dark","appearanceSubBlack","inputValidStyle","borderWidth","borderColor","textInputStyle","inputContainer","textAlignRight","rightDescTextStyle","descText","descRight","opacity","leftDescTextStyle","descLeft","inputView","inputPlaceholder","bottomView","subTextRow","flexRowReverse"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {\n  View,\n  Text,\n  TextInput,\n  KeyboardTypeOptions,\n  Platform,\n} from 'react-native';\nimport styles from './MultiLineTextInput.styles';\nimport { QuestionMetaDataType } from '../../utils/data';\nimport i18n from '../../translation';\nimport type {\n  Question,\n  QuestionMetaDataType as TypeQuestionMetaDataType,\n  Feedback,\n} from '../../data';\nimport { Colors, addOpacityToColor, GlobalStyle } from '../../styles';\nimport { useTheme } from '../../contexts/theme';\nimport { COLOR_SCHEMES } from '../../contexts/theme/theme.const';\n\nconst metadataTypeKeyboard = (\n  metadataType: TypeQuestionMetaDataType | undefined\n): KeyboardTypeOptions | undefined => {\n  switch (metadataType) {\n    case QuestionMetaDataType.Email:\n      return 'email-address';\n    case QuestionMetaDataType.Phone:\n      return 'phone-pad';\n    case QuestionMetaDataType.Number:\n      return Platform.select({\n        ios: 'numbers-and-punctuation',\n        default: 'default',\n      });\n    case QuestionMetaDataType.Date:\n    default:\n      return 'default';\n  }\n};\n\nconst metadataTypeAutoCapitalize = (\n  metadataType: TypeQuestionMetaDataType | undefined\n) => {\n  switch (metadataType) {\n    case QuestionMetaDataType.Name:\n      return 'words';\n    case QuestionMetaDataType.Email:\n    case QuestionMetaDataType.Phone:\n    case QuestionMetaDataType.Date:\n    case QuestionMetaDataType.Number:\n      return 'none';\n    default:\n      return 'sentences';\n  }\n};\n\ninterface Props {\n  onEndEditingHandler?: () => void;\n  onChangeTextHandler?: (t: string) => void;\n  themeColor: string;\n  feedback: Feedback;\n  question: Question;\n  anonymous?: boolean;\n  inputRef?: React.RefObject<TextInput>;\n  showErrorHint?: boolean;\n  checked?: boolean;\n}\n\nconst MultiLineTextInput: React.FC<Props> = ({\n  onEndEditingHandler,\n  onChangeTextHandler,\n  themeColor,\n  feedback,\n  question,\n  anonymous,\n  inputRef,\n  showErrorHint = true,\n  checked = true,\n  ...props\n}) => {\n  const { colorScheme, fontColor } = useTheme();\n  const { metaDataType, questionBrand, scale = 64, type } = question;\n  const MAX_CHARACTER = type === 'open' ? Number(scale) : 100;\n  const appearanceTextColorStyle = { color: fontColor };\n  const [hasEdited, setHasEdited] = React.useState(false);\n  const [text, setText] = React.useState<string>(\n    feedback?.answers[0] ? `${feedback?.answers[0]}` : ''\n  );\n\n  const rtl = i18n.dir() === 'rtl';\n  const showAnonymousWarning =\n    anonymous &&\n    metaDataType &&\n    (metaDataType === 'Email' ||\n      metaDataType === 'Name' ||\n      metaDataType === 'Phone');\n\n  const onEndEditing = () => {\n    setHasEdited(true);\n    onEndEditingHandler && onEndEditingHandler();\n  };\n\n  const onChangeText = (t: string) => {\n    setText(t);\n    onChangeTextHandler && onChangeTextHandler(t);\n  };\n\n  const characterLeft = MAX_CHARACTER - text.length;\n  const AT_LEAST_CHARACTER = 3;\n  const isInputInValid = hasEdited && text.length < AT_LEAST_CHARACTER;\n\n  let bottomText = '';\n  let bottomTextColor = Colors.warningRed;\n  if (isInputInValid && showErrorHint) {\n    bottomText = i18n.t('open-question-invalid-message:characters', {\n      count: AT_LEAST_CHARACTER,\n    });\n  } else if (showAnonymousWarning) {\n    bottomText = i18n.t('survey:metadata-anonymous-warning');\n    bottomTextColor = addOpacityToColor(Colors.black, 0.6);\n  }\n\n  const appearanceSubBackgroundColorStyle = {\n    backgroundColor: addOpacityToColor(\n      colorScheme === COLOR_SCHEMES.dark\n        ? Colors.appearanceSubBlack\n        : themeColor,\n      0.08\n    ),\n  };\n  const inputValidStyle = {\n    borderWidth: 1,\n    borderColor: Colors.warningRed,\n  };\n  const textInputStyle = [\n    styles.inputContainer,\n    appearanceTextColorStyle,\n    appearanceSubBackgroundColorStyle,\n    isInputInValid && showErrorHint ? inputValidStyle : null,\n    rtl && GlobalStyle.textAlignRight,\n  ];\n  const rightDescTextStyle = [\n    styles.descText,\n    styles.descRight,\n    appearanceTextColorStyle,\n    { opacity: 0.8 },\n  ];\n  const leftDescTextStyle = [\n    styles.descText,\n    styles.descLeft,\n    {\n      color: bottomTextColor,\n    },\n  ];\n\n  const inputView = (\n    <TextInput\n      ref={inputRef}\n      style={textInputStyle}\n      multiline={true}\n      onChangeText={onChangeText}\n      placeholder={questionBrand}\n      placeholderTextColor={Colors.inputPlaceholder}\n      onEndEditing={onEndEditing}\n      value={text}\n      maxLength={MAX_CHARACTER}\n      keyboardType={metadataTypeKeyboard(metaDataType)}\n      autoCapitalize={metadataTypeAutoCapitalize(metaDataType)}\n      {...props}\n    />\n  );\n\n  const bottomView = (\n    <View style={[styles.subTextRow, rtl && GlobalStyle.flexRowReverse]}>\n      <Text style={leftDescTextStyle} numberOfLines={2}>\n        {bottomText}\n      </Text>\n      <Text style={rightDescTextStyle}>\n        {characterLeft + ' / ' + MAX_CHARACTER}\n      </Text>\n    </View>\n  );\n\n  return (\n    <>\n      {checked ? (\n        <View>\n          {inputView}\n          {bottomView}\n        </View>\n      ) : null}\n    </>\n  );\n};\n\nexport default MultiLineTextInput;\n"]}