{"version":3,"sources":["MatrixRatingQuestion.tsx"],"names":["React","View","StyleSheet","Text","Image","TouchableOpacity","FlatList","GlobalStyle","Colors","addOpacityToColor","MandatoryTitle","useMatrixRating","useTheme","COLOR_SCHEMES","MatrixColoum","title","rowIndex","coloumIndex","themeColor","selectedAnswer","onColoumPress","isSelected","colorScheme","isDark","dark","containerBackgroundColor","textColor","white","coloumIndexBackgroundColor","rankingContainerBgDark","rankingCheckBoxBorder","black","optionContainerStyle","styles","optionContainer","backgroundColor","textStyle","color","coloumIndexStyle","coloumButton","flex1","MatrixRow","question","collapseList","onRowPress","questionId","optionsForMatrix","fontColor","isCollapse","icon","require","optionSelectedIndexStyle","containerStyle","rowContainer","rankingBGDark","borderColor","rankingBorderDark","rankingBorder","indexTextStyle","optionsList","map","value","index","optionSelectedText","titleButtonSelected","flexShrink1","titleButton","titleButtonText","titleButtonContent","titleContent","MatrixRatingQuestion","onFeedback","feedback","forgot","questionTitles","handleMatrixRatingErrorHint","container","item","memo","create","paddingHorizontal","questionContainer","marginBottom","borderRadius","borderWidth","flexDirection","justifyContent","alignItems","minHeight","paddingVertical","flex","row","marginRight","shadowColor","shadowOffset","width","height","shadowOpacity","shadowRadius","elevation"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {\n  View,\n  StyleSheet,\n  Text,\n  Image,\n  TouchableOpacity,\n  FlatList,\n} from 'react-native';\nimport GlobalStyle, { Colors, addOpacityToColor } from '../styles';\nimport MandatoryTitle from './MandatoryTitle';\nimport type { Question, Feedback } from '../data';\nimport useMatrixRating from '../hooks/useMatrixRating';\nimport { useTheme, COLOR_SCHEMES } from '../contexts/theme';\n\ntype ColoumProps = {\n  title: string;\n  rowIndex: number;\n  coloumIndex: number;\n  themeColor: string;\n  selectedAnswer: number[];\n  onColoumPress: (rowIndex: number, coloumIndex: number) => void;\n};\n\ntype RowProps = {\n  title: string;\n  rowIndex: number;\n  question: Question;\n  themeColor: string;\n  selectedAnswer: number[];\n  collapseList: boolean[];\n  onRowPress: (rowIndex: number) => void;\n  onColoumPress: (rowIndex: number, coloumIndex: number) => void;\n};\n\ntype Props = {\n  question: Question;\n  onFeedback: (feedback: Feedback) => void;\n  feedback: Feedback;\n  forgot: boolean;\n  themeColor: string;\n};\n\nconst MatrixColoum = ({\n  title,\n  rowIndex,\n  coloumIndex,\n  themeColor,\n  selectedAnswer,\n  onColoumPress,\n}: ColoumProps) => {\n  const isSelected = selectedAnswer[rowIndex] === coloumIndex;\n  const { colorScheme } = useTheme();\n  const isDark = colorScheme === COLOR_SCHEMES.dark;\n  let containerBackgroundColor;\n  let textColor = Colors.white;\n  let coloumIndexBackgroundColor = Colors.white;\n\n  if (isDark && isSelected) {\n    containerBackgroundColor = themeColor;\n  } else if (isDark && !isSelected) {\n    containerBackgroundColor = Colors.rankingContainerBgDark;\n    coloumIndexBackgroundColor = Colors.rankingCheckBoxBorder;\n  } else if (!isDark && isSelected) {\n    containerBackgroundColor = themeColor;\n  } else if (!isDark && !isSelected) {\n    containerBackgroundColor = Colors.white;\n    textColor = Colors.black;\n  }\n\n  const optionContainerStyle = [\n    styles.optionContainer,\n    {\n      backgroundColor: containerBackgroundColor,\n    },\n  ];\n  const textStyle = {\n    color: textColor,\n  };\n  const coloumIndexStyle = [\n    styles.coloumIndex,\n    {\n      backgroundColor: coloumIndexBackgroundColor,\n    },\n  ];\n\n  return (\n    <View style={optionContainerStyle}>\n      <TouchableOpacity\n        style={styles.coloumButton}\n        onPress={() => onColoumPress(rowIndex, coloumIndex)}\n      >\n        <View style={coloumIndexStyle}>\n          <Text>{coloumIndex + 1}</Text>\n        </View>\n        <View style={GlobalStyle.flex1}>\n          <Text numberOfLines={2} style={textStyle}>\n            {title}\n          </Text>\n        </View>\n      </TouchableOpacity>\n    </View>\n  );\n};\n\nconst MatrixRow = ({\n  title,\n  rowIndex,\n  question,\n  themeColor,\n  selectedAnswer,\n  collapseList,\n  onRowPress,\n  onColoumPress,\n}: RowProps) => {\n  const { questionId, optionsForMatrix } = question;\n  const { colorScheme, fontColor } = useTheme();\n  const isDark = colorScheme === COLOR_SCHEMES.dark;\n  const isCollapse = collapseList[rowIndex];\n\n  const icon = isCollapse\n    ? require('../assets/ic-extand-down.png')\n    : require('../assets/ic-extand-up.png');\n\n  const optionSelectedIndexStyle = [\n    styles.coloumIndex,\n    { backgroundColor: themeColor },\n  ];\n  const containerStyle = [\n    styles.rowContainer,\n    {\n      backgroundColor: isDark\n        ? Colors.rankingBGDark\n        : addOpacityToColor(themeColor, 0.05),\n      borderColor: isDark ? Colors.rankingBorderDark : Colors.rankingBorder,\n    },\n  ];\n  const indexTextStyle = {\n    color: Colors.white,\n  };\n  const textStyle = {\n    color: fontColor,\n  };\n\n  const optionsList = !isCollapse\n    ? optionsForMatrix[0].map((value, index) => (\n        <MatrixColoum\n          title={value}\n          rowIndex={rowIndex}\n          coloumIndex={index}\n          themeColor={themeColor}\n          selectedAnswer={selectedAnswer}\n          onColoumPress={onColoumPress}\n          key={`${questionId}-${value}-${index}`}\n        />\n      ))\n    : null;\n\n  const optionSelectedText =\n    selectedAnswer[rowIndex] !== -1 ? (\n      <View style={styles.titleButtonSelected}>\n        <View style={optionSelectedIndexStyle}>\n          <Text style={indexTextStyle}>{selectedAnswer[rowIndex] + 1}</Text>\n        </View>\n        <View style={GlobalStyle.flexShrink1}>\n          <Text numberOfLines={2} style={textStyle}>\n            {optionsForMatrix[0][selectedAnswer[rowIndex]]}\n          </Text>\n        </View>\n      </View>\n    ) : null;\n\n  return (\n    <View style={containerStyle}>\n      <TouchableOpacity\n        style={styles.titleButton}\n        onPress={() => onRowPress(rowIndex)}\n      >\n        <View style={styles.titleButtonText}>\n          <Text style={textStyle}>{title}</Text>\n        </View>\n        <View style={styles.titleButtonContent}>\n          {optionSelectedText}\n          <Image source={icon} />\n        </View>\n      </TouchableOpacity>\n      <View style={styles.titleContent}>{optionsList}</View>\n    </View>\n  );\n};\n\nconst MatrixRatingQuestion = ({\n  question,\n  onFeedback,\n  feedback,\n  forgot,\n  themeColor,\n}: Props) => {\n  const { questionTitles } = question;\n  const {\n    collapseList,\n    selectedAnswer,\n    handleMatrixRatingErrorHint,\n    onRowPress,\n    onColoumPress,\n  } = useMatrixRating(question, feedback, onFeedback);\n\n  return (\n    <View style={styles.container}>\n      <MandatoryTitle\n        forgot={false}\n        question={question}\n        style={styles.title}\n        invalidMessage={handleMatrixRatingErrorHint(forgot)}\n      />\n      <FlatList\n        data={questionTitles}\n        style={GlobalStyle.flex1}\n        renderItem={({ item, index }) => (\n          <MatrixRow\n            title={item}\n            rowIndex={index}\n            question={question}\n            themeColor={themeColor}\n            selectedAnswer={selectedAnswer}\n            collapseList={collapseList}\n            onRowPress={onRowPress}\n            onColoumPress={onColoumPress}\n          />\n        )}\n        keyExtractor={(title, index) => `${title}-${index}`}\n      />\n    </View>\n  );\n};\n\nexport default React.memo(MatrixRatingQuestion);\n\nconst styles = StyleSheet.create({\n  container: {\n    paddingHorizontal: 30,\n    ...GlobalStyle.questionContainer,\n    ...GlobalStyle.flex1,\n  },\n  title: {\n    marginBottom: 16,\n  },\n  rowContainer: {\n    marginBottom: 8,\n    borderRadius: 4,\n    borderWidth: 1,\n  },\n  titleButton: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    minHeight: 46,\n    paddingHorizontal: 12,\n    paddingVertical: 7,\n  },\n  titleButtonText: {\n    flex: 6,\n  },\n  titleButtonContent: {\n    ...GlobalStyle.row,\n    flex: 4,\n    justifyContent: 'flex-end',\n  },\n  titleButtonSelected: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'flex-start',\n    flex: 1,\n    marginRight: 6,\n  },\n  titleContent: {\n    paddingHorizontal: 12,\n  },\n  optionContainer: {\n    borderRadius: 8,\n    marginBottom: 8,\n    shadowColor: 'black',\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.12,\n    shadowRadius: 4,\n    elevation: 4,\n  },\n  coloumButton: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingVertical: 8,\n    paddingHorizontal: 12,\n  },\n  coloumIndex: {\n    width: 32,\n    height: 32,\n    justifyContent: 'center',\n    alignItems: 'center',\n    borderRadius: 16,\n    shadowColor: 'black',\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.12,\n    shadowRadius: 4,\n    elevation: 4,\n    marginRight: 8,\n  },\n});\n"]}