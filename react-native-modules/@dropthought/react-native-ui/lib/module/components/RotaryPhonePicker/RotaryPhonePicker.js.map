{"version":3,"sources":["RotaryPhonePicker.tsx"],"names":["React","useState","useRef","View","PanResponder","Animated","Image","styles","LottieView","RotaryPhonePicker","list","scale","selectedIndex","updateScore","numberScale","Number","listLength","length","deltaTheta","radiusOfOrbiting","radiusOfCenter","setRadiusOfCenter","container","setContainer","height","width","renderAnim","Value","current","renderAnimValue","tempAnim","offset","Math","trunc","panResponder","create","onStartShouldSetPanResponder","onMoveShouldSetPanResponderCapture","onMoveShouldSetPanResponder","onPanResponderGrant","onPanResponderMove","_event","gestureState","dx","setValue","onPanResponderRelease","flattenOffset","selectedCircle","round","circleValue","panSelectedIndex","isOutOfScoreRange","isAtCoverPage","resetValue","spring","toValue","velocity","friction","tension","useNativeDriver","start","handleLayout","nativeEvent","layout","rotateInterpolate","interpolate","inputRange","outputRange","animatedStyles","transform","rotate","itemStyle","index","left","sin","PI","top","cos","opacity","panHandlers","content","map","value","item","cursor","require"],"mappings":"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","sourcesContent":["import React, { useState, useRef } from 'react';\nimport {\n  View,\n  PanResponder,\n  Animated,\n  LayoutChangeEvent,\n  Image,\n} from 'react-native';\nimport styles from './RotaryPhonePicker.styles';\nimport LottieView from 'lottie-react-native';\n\ninterface Props {\n  list: string[];\n  scale?: string;\n  selectedIndex: number;\n  updateScore: (currentIndex: number) => void;\n}\n\nconst RotaryPhonePicker = ({\n  list,\n  scale = '5',\n  selectedIndex,\n  updateScore,\n}: Props) => {\n  const numberScale = Number(scale);\n  const listLength = list.length;\n  const deltaTheta = -360 / listLength;\n\n  const radiusOfOrbiting = 30;\n  const [radiusOfCenter, setRadiusOfCenter] = useState(0);\n  const [container, setContainer] = useState({ height: 0, width: 0 });\n\n  let renderAnim = useRef(new Animated.Value(selectedIndex * -45)).current;\n  const renderAnimValue = useRef(selectedIndex * -45);\n  let tempAnim = useRef(selectedIndex * -45).current;\n\n  const offset = () => Math.trunc(container.width / 2) - radiusOfOrbiting;\n\n  const panResponder = PanResponder.create({\n    onStartShouldSetPanResponder: () => true,\n    onMoveShouldSetPanResponderCapture: () => true,\n    onMoveShouldSetPanResponder: () => true,\n    onPanResponderGrant: () => {\n      tempAnim = renderAnimValue.current;\n    },\n    onPanResponderMove: (_event, gestureState) => {\n      renderAnimValue.current = tempAnim + gestureState.dx;\n      renderAnim.setValue(tempAnim + gestureState.dx);\n    },\n    onPanResponderRelease: () => {\n      renderAnim.flattenOffset();\n\n      const selectedCircle = Math.round(\n        renderAnimValue.current / (360 / listLength)\n      );\n      const circleValue = (selectedCircle * 360) / listLength;\n      const panSelectedIndex = selectedCircle * -1;\n\n      const isOutOfScoreRange =\n        panSelectedIndex <= 0 || panSelectedIndex > numberScale;\n      const isAtCoverPage = selectedIndex === 0;\n\n      if (isAtCoverPage && panSelectedIndex > 0) {\n        updateScore(panSelectedIndex);\n      } else if (!isOutOfScoreRange) {\n        updateScore(panSelectedIndex);\n      }\n\n      let resetValue = 0;\n      if (panSelectedIndex <= 0) {\n        updateScore(1);\n        resetValue = -45;\n        renderAnimValue.current = resetValue;\n      } else if (panSelectedIndex > numberScale) {\n        updateScore(numberScale);\n        resetValue = -45 * numberScale;\n        renderAnimValue.current = resetValue;\n      }\n\n      Animated.spring(renderAnim, {\n        toValue: isOutOfScoreRange ? resetValue : circleValue,\n        velocity: 5,\n        friction: 10,\n        tension: 20,\n        useNativeDriver: false,\n      }).start();\n    },\n  });\n\n  const handleLayout = ({ nativeEvent }: LayoutChangeEvent) => {\n    setRadiusOfCenter(nativeEvent.layout.width * 0.65);\n    setContainer({\n      height: nativeEvent.layout.height,\n      width: nativeEvent.layout.width,\n    });\n  };\n\n  const rotateInterpolate = renderAnim.interpolate({\n    inputRange: [-45, 0, 45],\n    outputRange: ['-45deg', '0deg', '45deg'],\n  });\n\n  const animatedStyles = {\n    transform: [{ rotate: rotateInterpolate }],\n  };\n\n  const itemStyle = (index: number) => {\n    return {\n      left:\n        Math.sin((index * deltaTheta * Math.PI) / 180 + Math.PI) *\n          radiusOfCenter +\n        offset(),\n      top:\n        Math.cos((index * deltaTheta * Math.PI) / 180 + Math.PI) *\n          radiusOfCenter +\n        offset(),\n      transform: [{ rotate: `${45 * index}deg` }],\n      opacity: selectedIndex === index ? 1 : 0.3,\n    };\n  };\n\n  return (\n    <View style={styles.container} {...panResponder.panHandlers}>\n      <Animated.View\n        onLayout={handleLayout}\n        style={[styles.content, animatedStyles]}\n      >\n        {list.map((value, index) => {\n          return (\n            <View style={[styles.item, itemStyle(index)]} key={index}>\n              {value !== '' && index <= numberScale ? (\n                <LottieView source={value} autoPlay />\n              ) : null}\n            </View>\n          );\n        })}\n      </Animated.View>\n      <Image\n        style={styles.cursor}\n        source={require('../../assets/icOption6Cursor.png')}\n      />\n    </View>\n  );\n};\n\nexport default RotaryPhonePicker;\n"]}