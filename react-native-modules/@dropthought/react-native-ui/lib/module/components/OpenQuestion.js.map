{"version":3,"sources":["OpenQuestion.tsx"],"names":["React","ScrollView","StyleSheet","metaDataTypeQuestionValidator","mandatoryQuestionValidator","MandatoryTitle","i18n","useTheme","MultiLineTextInput","OpenQuestion","anonymous","question","onFeedback","feedback","forgot","themeColor","backgroundColor","text","setText","useState","answers","hasEdited","setHasEdited","isValid","appearanceBackgroundColorStyle","tempFeedback","questionId","type","hasForgot","onEndEditingHandler","onChangeTextHandler","t","upperView","metaDataType","styles","container","memo","create","flex","paddingHorizontal"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { ScrollView, StyleSheet } from 'react-native';\nimport {\n  metaDataTypeQuestionValidator,\n  mandatoryQuestionValidator,\n} from '../utils/data';\nimport MandatoryTitle from './MandatoryTitle';\nimport i18n from '../translation';\nimport { useTheme } from '../contexts/theme';\nimport type { Question, Feedback } from '../data';\nimport MultiLineTextInput from './MultiLineTextInput';\n\ntype Props = {\n  anonymous: boolean;\n  question: Question;\n  onFeedback: (feedback: Feedback) => void;\n  feedback: Feedback;\n  forgot: boolean;\n  themeColor: string;\n};\n\nconst OpenQuestion = ({\n  anonymous,\n  question,\n  // onValueChange, // Keep it for Kiosk usage\n  onFeedback,\n  feedback,\n  forgot,\n  themeColor,\n}: Props) => {\n  const { backgroundColor } = useTheme();\n  const [text, setText] = React.useState<string>(\n    feedback?.answers[0] ? `${feedback?.answers[0]}` : ''\n  );\n  const [hasEdited, setHasEdited] = React.useState(false);\n\n  // It will be used in valid title\n  const isValid = metaDataTypeQuestionValidator(question, text);\n\n  const appearanceBackgroundColorStyle = {\n    backgroundColor: backgroundColor,\n  };\n\n  /** @type {Feedback} */\n  const tempFeedback = {\n    questionId: question.questionId,\n    answers: [text],\n    type: 'open',\n  };\n\n  // It will be used in valid title\n  const hasForgot =\n    forgot && !mandatoryQuestionValidator(question, tempFeedback);\n\n  const onEndEditingHandler = () => {\n    setHasEdited(true);\n    onFeedback({\n      questionId: question.questionId,\n      answers: [text],\n      type: 'open',\n    });\n  };\n\n  const onChangeTextHandler = (t: string) => {\n    setText(t);\n  };\n\n  const upperView = (\n    <>\n      <MandatoryTitle\n        forgot={hasForgot}\n        invalidMessage={\n          // show the error message after the user has done edited\n          hasEdited && !isValid\n            ? i18n.t(`metadata-invalid-message:${question.metaDataType}`)\n            : ''\n        }\n        question={question}\n      />\n    </>\n  );\n\n  return (\n    <ScrollView style={[styles.container, appearanceBackgroundColorStyle]}>\n      {upperView}\n      <MultiLineTextInput\n        onEndEditingHandler={onEndEditingHandler}\n        onChangeTextHandler={onChangeTextHandler}\n        themeColor={themeColor}\n        feedback={feedback}\n        question={question}\n        anonymous={anonymous}\n      />\n    </ScrollView>\n  );\n};\n\nexport default React.memo(OpenQuestion);\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    paddingHorizontal: 42,\n  },\n});\n"]}