{"version":3,"sources":["OpenQuestion.tsx"],"names":["React","ScrollView","StyleSheet","View","metaDataFormatValidator","mandatoryQuestionValidator","MandatoryTitle","i18n","useTheme","MultiLineTextInput","MetadataDesc","OpenQuestion","survey","anonymous","question","onFeedback","feedback","forgot","themeColor","rtl","dir","backgroundColor","text","setText","useState","answers","textRef","useRef","hasEdited","setHasEdited","isValid","metaDataType","appearanceBackgroundColorStyle","tempFeedback","questionId","type","hasForgot","onEndEditingHandler","current","onChangeTextHandler","t","upperView","styles","responseErrorText","mandatoryErrorMessage","container","memo","create","flex","paddingHorizontal","marginBottom"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { ScrollView, StyleSheet, View } from 'react-native';\nimport {\n  metaDataFormatValidator,\n  mandatoryQuestionValidator,\n} from '../utils/data';\nimport MandatoryTitle from './MandatoryTitle';\nimport i18n from '../translation';\nimport { useTheme } from '../contexts/theme';\nimport type { Question, Feedback, Survey } from '../data';\nimport MultiLineTextInput from './MultiLineTextInput';\nimport MetadataDesc from './MetadataDesc';\n\ntype Props = {\n  survey: Survey;\n  anonymous: boolean;\n  question: Question;\n  onFeedback: (feedback: Feedback) => void;\n  feedback: Feedback;\n  forgot: boolean;\n  themeColor: string;\n};\n\nconst OpenQuestion = ({\n  survey,\n  anonymous,\n  question,\n  // onValueChange, // Keep it for Kiosk usage\n  onFeedback,\n  feedback,\n  forgot,\n  themeColor,\n}: Props) => {\n  const rtl = i18n.dir() === 'rtl';\n  const { backgroundColor } = useTheme();\n  const [text, setText] = React.useState<string>(\n    feedback?.answers[0] ? `${feedback?.answers[0]}` : ''\n  );\n  const textRef = React.useRef<string>(\n    feedback?.answers[0] ? `${feedback?.answers[0]}` : ''\n  );\n  const [hasEdited, setHasEdited] = React.useState(false);\n\n  // It will be used in valid title\n  const isValid = metaDataFormatValidator(text, question.metaDataType);\n\n  const appearanceBackgroundColorStyle = {\n    backgroundColor: backgroundColor,\n  };\n\n  /** @type {Feedback} */\n  const tempFeedback = {\n    questionId: question.questionId,\n    answers: [text],\n    type: 'open',\n  };\n\n  // It will be used in valid title\n  const hasForgot =\n    forgot && !mandatoryQuestionValidator(question, tempFeedback);\n\n  const onEndEditingHandler = () => {\n    setHasEdited(true);\n    onFeedback({\n      questionId: question.questionId,\n      answers: [textRef.current],\n      type: 'open',\n    });\n  };\n\n  const onChangeTextHandler = (t: string) => {\n    setText(t);\n    textRef.current = t;\n  };\n\n  const upperView = (\n    <View style={styles.upperView}>\n      <MandatoryTitle\n        forgot={hasForgot}\n        invalidMessage={\n          // show the error message after the user has done edited\n          hasEdited && !isValid\n            ? question.responseErrorText ??\n              i18n.t('metadata-invalid-message', question.metaDataType)\n            : ''\n        }\n        mandatoryErrorMessage={survey.mandatoryErrorMessage}\n        question={question}\n      />\n      <MetadataDesc question={question} rtl={rtl} />\n    </View>\n  );\n\n  return (\n    <ScrollView style={[styles.container, appearanceBackgroundColorStyle]}>\n      {upperView}\n      <MultiLineTextInput\n        onEndEditingHandler={onEndEditingHandler}\n        onChangeTextHandler={onChangeTextHandler}\n        themeColor={themeColor}\n        feedback={feedback}\n        question={question}\n        anonymous={anonymous}\n        showErrorHint={hasForgot || (hasEdited && !isValid)}\n      />\n    </ScrollView>\n  );\n};\n\nexport default React.memo(OpenQuestion);\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    paddingHorizontal: 42,\n  },\n  upperView: {\n    marginBottom: 5,\n  },\n});\n"]}