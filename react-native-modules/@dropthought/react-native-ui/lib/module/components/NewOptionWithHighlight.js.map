{"version":3,"sources":["NewOptionWithHighlight.tsx"],"names":["React","StyleSheet","Image","View","Text","TouchableOpacity","Colors","addOpacityToColor","useTheme","COLOR_SCHEMES","noop","_id","undefined","Icon","type","checked","themeColor","fontColor","colorScheme","backgroundColor","checkboxContainerStyle","styles","checkboxBorderBox","borderColor","dark","checkboxContentStyle","checkboxContent","opacity","radioContainerStyle","radioBorderBox","radioContentStyle","radioContent","content","require","NewOptionWithHighlight","id","value","title","onPress","appearanceBackgroundColor","appearanceSubBlack","buttonContainerSelected","color","buttonContainerStyle","containerStyle","buttonContainer","textStyle","dummyComponent","create","marginBottom","paddingVertical","flexDirection","borderWidth","borderRadius","overflow","justifyContent","paddingHorizontal","width","height","alignItems","position","top","left","memo"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { StyleSheet, Image, View, Text, TouchableOpacity } from 'react-native';\n\nimport { Colors, addOpacityToColor } from '../styles';\nimport { useTheme, COLOR_SCHEMES } from '../contexts/theme';\n\nconst noop = (_id: any) => undefined;\n\ntype IconProps = {\n  type: 'radio' | 'checkbox';\n  checked: boolean;\n  themeColor: string;\n};\n\nconst Icon = ({ type, checked, themeColor }: IconProps) => {\n  const { fontColor, colorScheme, backgroundColor } = useTheme();\n\n  const checkboxContainerStyle = [\n    styles.checkboxBorderBox,\n    {\n      borderColor: colorScheme === COLOR_SCHEMES.dark ? fontColor : themeColor,\n      backgroundColor: addOpacityToColor(\n        colorScheme === COLOR_SCHEMES.dark ? backgroundColor : themeColor,\n        0.1\n      ),\n    },\n  ];\n\n  const checkboxContentStyle = [\n    styles.checkboxContent,\n    {\n      backgroundColor: themeColor,\n      opacity: checked ? 1 : 0,\n    },\n  ];\n\n  const radioContainerStyle = [\n    styles.radioBorderBox,\n    {\n      borderColor: themeColor,\n      backgroundColor: addOpacityToColor(\n        colorScheme === COLOR_SCHEMES.dark ? themeColor : backgroundColor,\n        0.1\n      ),\n    },\n  ];\n\n  const radioContentStyle = [\n    styles.radioContent,\n    {\n      backgroundColor:\n        colorScheme === COLOR_SCHEMES.dark ? fontColor : themeColor,\n      opacity: checked ? 1 : 0,\n    },\n  ];\n\n  let content: React.ReactElement;\n  if (type === 'checkbox') {\n    content = checked ? (\n      <View style={checkboxContentStyle}>\n        <Image source={require('../assets/ic-check.png')} />\n      </View>\n    ) : (\n      <View style={checkboxContainerStyle} />\n    );\n  } else {\n    content = (\n      <View>\n        <View style={radioContainerStyle} />\n        {checked ? <View style={radioContentStyle} /> : null}\n      </View>\n    );\n  }\n\n  return <View>{content}</View>;\n};\n\nexport type Props = {\n  type?: 'radio' | 'checkbox';\n  id: any;\n  title: string | React.ReactNode;\n  checked: boolean;\n  themeColor: string;\n  onPress: (id: any) => void;\n};\n\nfunction NewOptionWithHighlight({\n  type = 'radio',\n  id: value,\n  title,\n  checked,\n  themeColor,\n  onPress = noop,\n}: Props) {\n  const { fontColor, colorScheme, backgroundColor } = useTheme();\n\n  const appearanceBackgroundColor = addOpacityToColor(\n    colorScheme === COLOR_SCHEMES.dark ? Colors.appearanceSubBlack : themeColor,\n    0.08\n  );\n\n  const buttonContainerSelected = {\n    backgroundColor:\n      colorScheme === COLOR_SCHEMES.dark\n        ? addOpacityToColor(themeColor, 0.3)\n        : appearanceBackgroundColor,\n    borderColor: themeColor,\n    color: colorScheme === COLOR_SCHEMES.dark ? fontColor : themeColor,\n  };\n\n  const buttonContainerStyle = {\n    backgroundColor: appearanceBackgroundColor,\n    borderColor: backgroundColor,\n    color: fontColor,\n  };\n\n  const containerStyle = checked\n    ? [styles.buttonContainer, buttonContainerStyle, buttonContainerSelected]\n    : [styles.buttonContainer, buttonContainerStyle];\n\n  const textStyle = checked\n    ? { color: colorScheme === COLOR_SCHEMES.dark ? fontColor : themeColor }\n    : { color: fontColor };\n\n  let content;\n  if (typeof title === 'string') {\n    content = <Text style={textStyle}>{title}</Text>;\n  } else {\n    content = title;\n  }\n\n  return (\n    <TouchableOpacity onPress={() => onPress(value)}>\n      <View style={containerStyle}>\n        <Icon type={type} checked={checked} themeColor={themeColor} />\n        {content}\n        <View style={styles.dummyComponent} />\n      </View>\n    </TouchableOpacity>\n  );\n}\n\nconst styles = StyleSheet.create({\n  buttonContainer: {\n    marginBottom: 10,\n    paddingVertical: 9,\n    flexDirection: 'row',\n    borderWidth: 1,\n    borderRadius: 20,\n    overflow: 'hidden',\n    justifyContent: 'space-between',\n    paddingHorizontal: 13,\n  },\n  checkboxContent: {\n    width: 18,\n    height: 18,\n    borderRadius: 3,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  checkboxBorderBox: {\n    width: 18,\n    height: 18,\n    borderRadius: 3,\n    borderWidth: 1,\n  },\n  radioContent: {\n    position: 'absolute',\n    top: 4,\n    left: 4,\n    width: 10,\n    height: 10,\n    borderRadius: 8,\n  },\n  radioBorderBox: {\n    width: 18,\n    height: 18,\n    borderRadius: 10,\n    borderWidth: 2,\n  },\n  dummyComponent: {\n    width: 18,\n    height: 18,\n  },\n});\n\nexport default React.memo(NewOptionWithHighlight);\n"]}