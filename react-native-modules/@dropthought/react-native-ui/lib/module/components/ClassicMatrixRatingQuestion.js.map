{"version":3,"sources":["ClassicMatrixRatingQuestion.tsx"],"names":["React","View","StyleSheet","Text","Image","TouchableOpacity","GlobalStyle","Colors","addOpacityToColor","ClassicMandatoryTitle","useMatrixRating","useTheme","COLOR_SCHEMES","MatrixColoum","title","rowIndex","coloumIndex","themeColor","selectedAnswer","onColoumPress","colorScheme","isSelected","isDark","dark","containerBackgroundColor","textColor","white","coloumIndexBackgroundColor","rankingContainerBgDark","rankingCheckBoxBorder","black","optionContainerStyle","styles","optionContainer","backgroundColor","textStyle","color","coloumIndexStyle","coloumButton","flex1","MatrixRow","question","collapseList","onRowPress","questionId","optionsForMatrix","fontColor","isCollapse","icon","require","optionSelectedIndexStyle","containerStyle","container","rankingBGDark","borderColor","rankingBorderDark","rankingBorder","indexTextStyle","optionsList","map","value","index","optionSelectedText","titleButtonSelected","flexShrink1","titleButton","titleButtonText","titleButtonContent","titleContent","ClassicMatrixRatingQuestion","mandatoryErrorMessage","onFeedback","feedback","forgot","questionTitles","handleMatrixRatingErrorHint","questionContainer","memo","create","marginBottom","borderRadius","borderWidth","flexDirection","justifyContent","alignItems","minHeight","paddingHorizontal","paddingVertical","flex","row","marginRight","shadowColor","shadowOffset","width","height","shadowOpacity","shadowRadius","elevation"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { View, StyleSheet, Text, Image, TouchableOpacity } from 'react-native';\nimport GlobalStyle, { Colors, addOpacityToColor } from '../styles';\nimport ClassicMandatoryTitle from './ClassicMandatoryTitle';\nimport type { Question, Feedback } from '../data';\nimport useMatrixRating from '../hooks/useMatrixRating';\nimport { useTheme, COLOR_SCHEMES } from '../contexts/theme';\n\ntype ColoumProps = {\n  title: string;\n  rowIndex: number;\n  coloumIndex: number;\n  themeColor: string;\n  selectedAnswer: number[];\n  onColoumPress: (rowIndex: number, coloumIndex: number) => void;\n};\n\ntype RowProps = {\n  title: string;\n  rowIndex: number;\n  question: Question;\n  themeColor: string;\n  selectedAnswer: number[];\n  collapseList: boolean[];\n  onRowPress: (rowIndex: number) => void;\n  onColoumPress: (rowIndex: number, coloumIndex: number) => void;\n};\n\ntype Props = {\n  mandatoryErrorMessage: string;\n  question: Question;\n  onFeedback: (feedback: Feedback) => void;\n  feedback: Feedback;\n  forgot: boolean;\n  themeColor: string;\n};\n\nconst MatrixColoum = ({\n  title,\n  rowIndex,\n  coloumIndex,\n  themeColor,\n  selectedAnswer,\n  onColoumPress,\n}: ColoumProps) => {\n  const { colorScheme } = useTheme();\n  const isSelected = selectedAnswer[rowIndex] === coloumIndex;\n  const isDark = colorScheme === COLOR_SCHEMES.dark;\n  let containerBackgroundColor;\n  let textColor = Colors.white;\n  let coloumIndexBackgroundColor = Colors.white;\n\n  if (isDark && isSelected) {\n    containerBackgroundColor = themeColor;\n  } else if (isDark && !isSelected) {\n    containerBackgroundColor = Colors.rankingContainerBgDark;\n    coloumIndexBackgroundColor = Colors.rankingCheckBoxBorder;\n  } else if (!isDark && isSelected) {\n    containerBackgroundColor = themeColor;\n  } else if (!isDark && !isSelected) {\n    containerBackgroundColor = Colors.white;\n    textColor = Colors.black;\n  }\n\n  const optionContainerStyle = [\n    styles.optionContainer,\n    {\n      backgroundColor: containerBackgroundColor,\n    },\n  ];\n  const textStyle = {\n    color: textColor,\n  };\n  const coloumIndexStyle = [\n    styles.coloumIndex,\n    {\n      backgroundColor: coloumIndexBackgroundColor,\n    },\n  ];\n\n  return (\n    <View style={optionContainerStyle}>\n      <TouchableOpacity\n        style={styles.coloumButton}\n        onPress={() => onColoumPress(rowIndex, coloumIndex)}\n      >\n        <View style={coloumIndexStyle}>\n          <Text>{coloumIndex + 1}</Text>\n        </View>\n        <View style={GlobalStyle.flex1}>\n          <Text numberOfLines={2} style={textStyle}>\n            {title}\n          </Text>\n        </View>\n      </TouchableOpacity>\n    </View>\n  );\n};\n\nconst MatrixRow = ({\n  title,\n  rowIndex,\n  question,\n  themeColor,\n  selectedAnswer,\n  collapseList,\n  onRowPress,\n  onColoumPress,\n}: RowProps) => {\n  const { questionId, optionsForMatrix } = question;\n  const { colorScheme, fontColor } = useTheme();\n  const isDark = colorScheme === COLOR_SCHEMES.dark;\n  const isCollapse = collapseList[rowIndex];\n\n  const icon = isCollapse\n    ? require('../assets/ic-extand-down.png')\n    : require('../assets/ic-extand-up.png');\n\n  const optionSelectedIndexStyle = [\n    styles.coloumIndex,\n    { backgroundColor: themeColor },\n  ];\n  const containerStyle = [\n    styles.container,\n    {\n      backgroundColor: isDark\n        ? Colors.rankingBGDark\n        : addOpacityToColor(themeColor, 0.05),\n      borderColor: isDark ? Colors.rankingBorderDark : Colors.rankingBorder,\n    },\n  ];\n  const indexTextStyle = {\n    color: Colors.white,\n  };\n  const textStyle = {\n    color: fontColor,\n  };\n\n  const optionsList = !isCollapse\n    ? optionsForMatrix[0].map((value, index) => (\n        <MatrixColoum\n          title={value}\n          rowIndex={rowIndex}\n          coloumIndex={index}\n          themeColor={themeColor}\n          selectedAnswer={selectedAnswer}\n          onColoumPress={onColoumPress}\n          key={`${questionId}-${value}-${index}`}\n        />\n      ))\n    : null;\n\n  const optionSelectedText =\n    selectedAnswer[rowIndex] !== -1 ? (\n      <View style={styles.titleButtonSelected}>\n        <View style={optionSelectedIndexStyle}>\n          <Text style={indexTextStyle}>{selectedAnswer[rowIndex] + 1}</Text>\n        </View>\n        <View style={GlobalStyle.flexShrink1}>\n          <Text numberOfLines={2} style={textStyle}>\n            {optionsForMatrix[0][selectedAnswer[rowIndex]]}\n          </Text>\n        </View>\n      </View>\n    ) : null;\n\n  return (\n    <View style={containerStyle}>\n      <TouchableOpacity\n        style={styles.titleButton}\n        onPress={() => onRowPress(rowIndex)}\n      >\n        <View style={styles.titleButtonText}>\n          <Text style={textStyle}>{title}</Text>\n        </View>\n        <View style={styles.titleButtonContent}>\n          {optionSelectedText}\n          <Image source={icon} />\n        </View>\n      </TouchableOpacity>\n      <View style={styles.titleContent}>{optionsList}</View>\n    </View>\n  );\n};\n\nconst ClassicMatrixRatingQuestion = ({\n  mandatoryErrorMessage,\n  question,\n  onFeedback,\n  feedback,\n  forgot,\n  themeColor,\n}: Props) => {\n  const { questionId, questionTitles } = question;\n  const {\n    collapseList,\n    selectedAnswer,\n    handleMatrixRatingErrorHint,\n    onRowPress,\n    onColoumPress,\n  } = useMatrixRating(question, feedback, onFeedback);\n\n  return (\n    <View style={GlobalStyle.questionContainer}>\n      <ClassicMandatoryTitle\n        forgot={false}\n        mandatoryErrorMessage={mandatoryErrorMessage}\n        question={question}\n        style={styles.title}\n        invalidMessage={handleMatrixRatingErrorHint(forgot)}\n      />\n      {questionTitles.map((title, index) => {\n        return (\n          <MatrixRow\n            title={title}\n            rowIndex={index}\n            question={question}\n            themeColor={themeColor}\n            selectedAnswer={selectedAnswer}\n            collapseList={collapseList}\n            onRowPress={onRowPress}\n            onColoumPress={onColoumPress}\n            key={`${questionId}-${title}-${index}`}\n          />\n        );\n      })}\n    </View>\n  );\n};\n\nexport default React.memo(ClassicMatrixRatingQuestion);\n\nconst styles = StyleSheet.create({\n  title: {\n    marginBottom: 16,\n  },\n  container: {\n    marginBottom: 8,\n    borderRadius: 4,\n    borderWidth: 1,\n  },\n  titleButton: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    minHeight: 46,\n    paddingHorizontal: 12,\n    paddingVertical: 7,\n  },\n  titleButtonText: {\n    flex: 6,\n  },\n  titleButtonContent: {\n    ...GlobalStyle.row,\n    flex: 4,\n    justifyContent: 'flex-end',\n  },\n  titleButtonSelected: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'flex-start',\n    flex: 1,\n    marginRight: 6,\n  },\n  titleContent: {\n    paddingHorizontal: 12,\n  },\n  optionContainer: {\n    borderRadius: 8,\n    marginBottom: 8,\n    shadowColor: 'black',\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.12,\n    shadowRadius: 4,\n    elevation: 4,\n  },\n  coloumButton: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingVertical: 8,\n    paddingHorizontal: 12,\n  },\n  coloumIndex: {\n    width: 32,\n    height: 32,\n    justifyContent: 'center',\n    alignItems: 'center',\n    borderRadius: 16,\n    shadowColor: 'black',\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.12,\n    shadowRadius: 4,\n    elevation: 4,\n    marginRight: 8,\n  },\n});\n"]}