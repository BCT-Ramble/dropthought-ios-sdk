{"version":3,"sources":["ClassicQuestionContainer.tsx"],"names":["React","View","mandatoryQuestionValidator","useFeedbackByQid","useFeedbackDispatch","updateFeedback","ClassicSingleChoiceQuestion","ClassicMultiChoiceQuestion","ClassicSmileyRatingQuestion","ClassicSliderRatingQuestion","ClassicSliderDragRatingQuestion","ClassicIconRatingQuestion","ClassicRankingQuestion","ClassicOpenQuestion","ClassicDropdownQuestion","ClassicMatrixRatingQuestion","ClassicMatrixChoiceQuestion","ClassicMultipleOpenEndedQuestion","ClassicMandatoryTitle","GlobalStyle","TempComponent","question","forgot","questionContainer","ClassicQuestionContainer","props","onFeedback","propsOnFeedback","validationStarted","onDragGrant","onDragEnd","QuestionComponent","feedback","questionId","feedbackDispatch","onFeedbackHandler","useCallback","updatedFeedback","type","subType"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { View } from 'react-native';\nimport { mandatoryQuestionValidator } from '../utils/data';\n\nimport {\n  useFeedbackByQid,\n  useFeedbackDispatch,\n  updateFeedback,\n} from '../contexts/feedback';\nimport ClassicSingleChoiceQuestion from '../components/ClassicSingleChoiceQuestion';\nimport ClassicMultiChoiceQuestion from '../components/ClassicMultiChoiceQuestion';\nimport ClassicSmileyRatingQuestion from '../components/ClassicSmileyRatingQuestion';\nimport ClassicSliderRatingQuestion from '../components/ClassicSliderRatingQuestion';\nimport ClassicSliderDragRatingQuestion from '../components/ClassicSliderDragRatingQuestion';\nimport ClassicIconRatingQuestion from '../components/ClassicIconRatingQuestion';\nimport ClassicRankingQuestion from '../components/ClassicRankingQuestion';\nimport ClassicOpenQuestion from '../components/ClassicOpenQuestion';\nimport ClassicDropdownQuestion from '../components/ClassicDropdownQuestion';\nimport ClassicMatrixRatingQuestion from '../components/ClassicMatrixRatingQuestion';\nimport ClassicMatrixChoiceQuestion from '../components/ClassicMatrixChoiceQuestion';\nimport ClassicMultipleOpenEndedQuestion from '../components/ClassicMultipleOpenEndedQuestion';\nimport ClassicMandatoryTitle from '../components/ClassicMandatoryTitle';\nimport GlobalStyle from '../styles';\nimport type { Question, Feedback } from '../data';\n\nconst TempComponent = ({\n  question,\n  forgot,\n}: {\n  question: Question;\n  forgot: boolean;\n}) => {\n  return (\n    <View style={GlobalStyle.questionContainer}>\n      <ClassicMandatoryTitle question={question} forgot={forgot} />\n    </View>\n  );\n};\n\ntype Props = {\n  anonymous: boolean;\n  question: Question;\n  validationStarted: boolean;\n  themeColor: string;\n  onFeedback?: (feedback: Feedback) => void;\n  onDragGrant: () => void;\n  onDragEnd: () => void;\n};\n\nconst ClassicQuestionContainer = (props: Props) => {\n  const {\n    question,\n    onFeedback: propsOnFeedback,\n    validationStarted,\n    onDragGrant,\n    onDragEnd,\n  } = props;\n\n  let QuestionComponent = TempComponent;\n\n  // get/update feedback to context\n  const feedback = useFeedbackByQid(question.questionId);\n  const feedbackDispatch = useFeedbackDispatch();\n  const onFeedbackHandler = React.useCallback(\n    (updatedFeedback) => {\n      updateFeedback(feedbackDispatch, updatedFeedback);\n      // @ts-ignore\n      propsOnFeedback && propsOnFeedback(updateFeedback);\n    },\n    [feedbackDispatch, propsOnFeedback]\n  );\n\n  // whether to display the forgot warning message\n  const forgot =\n    validationStarted && !mandatoryQuestionValidator(question, feedback);\n\n  switch (question.type) {\n    case 'singleChoice':\n      // @ts-ignore\n      QuestionComponent = ClassicSingleChoiceQuestion;\n      break;\n    case 'multiChoice':\n      // @ts-ignore\n      QuestionComponent = ClassicMultiChoiceQuestion;\n      break;\n    case 'rating':\n      if (question.subType === 'smiley') {\n        // @ts-ignore\n        QuestionComponent = ClassicSmileyRatingQuestion;\n      } else if (question.subType === 'slider') {\n        // @ts-ignore\n        QuestionComponent = ClassicSliderRatingQuestion;\n      } else {\n        // @ts-ignore\n        QuestionComponent = ClassicIconRatingQuestion;\n      }\n      break;\n    case 'nps':\n      // @ts-ignore\n      QuestionComponent = ClassicSliderRatingQuestion;\n      break;\n    case 'open':\n      // @ts-ignore\n      QuestionComponent = ClassicOpenQuestion;\n      break;\n    case 'ranking':\n      // @ts-ignore\n      QuestionComponent = ClassicRankingQuestion;\n      break;\n    case 'ratingSlider':\n      // @ts-ignore\n      QuestionComponent = ClassicSliderDragRatingQuestion;\n      break;\n    case 'dropdown':\n      // @ts-ignore\n      QuestionComponent = ClassicDropdownQuestion;\n      break;\n    case 'matrixRating':\n      // @ts-ignore\n      QuestionComponent = ClassicMatrixRatingQuestion;\n      break;\n    case 'matrixChoice':\n      // @ts-ignore\n      QuestionComponent = ClassicMatrixChoiceQuestion;\n      break;\n    case 'multipleOpenEnded':\n      // @ts-ignore\n      QuestionComponent = ClassicMultipleOpenEndedQuestion;\n      break;\n    default:\n      QuestionComponent = TempComponent;\n  }\n\n  return (\n    <QuestionComponent\n      {...props}\n      // @ts-ignore\n      feedback={feedback}\n      onFeedback={onFeedbackHandler}\n      forgot={forgot}\n      onDragGrant={onDragGrant}\n      onDragEnd={onDragEnd}\n    />\n  );\n};\n\nexport default ClassicQuestionContainer;\n"]}