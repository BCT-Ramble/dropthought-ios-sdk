{"version":3,"sources":["ClassicQuestionContainer.tsx"],"names":["React","View","mandatoryQuestionValidator","useFeedbackByQid","useFeedbackDispatch","updateFeedback","ClassicSingleChoiceQuestion","ClassicMultiChoiceQuestion","ClassicSmileyRatingQuestion","ClassicSliderRatingQuestion","ClassicRankingQuestion","ClassicOpenQuestion","ClassicMandatoryTitle","GlobalStyle","TempComponent","question","forgot","questionContainer","ClassicQuestionContainer","props","onFeedback","propsOnFeedback","validationStarted","QuestionComponent","feedback","questionId","feedbackDispatch","onFeedbackHandler","useCallback","updatedFeedback","type","subType"],"mappings":";;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,IAAT,QAAqB,cAArB;AACA,SAASC,0BAAT,QAA2C,eAA3C;AAEA,SACEC,gBADF,EAEEC,mBAFF,EAGEC,cAHF,QAIO,sBAJP;AAKA,OAAOC,2BAAP,MAAwC,2CAAxC;AACA,OAAOC,0BAAP,MAAuC,0CAAvC;AACA,OAAOC,2BAAP,MAAwC,2CAAxC;AACA,OAAOC,2BAAP,MAAwC,2CAAxC;AACA,OAAOC,sBAAP,MAAmC,sCAAnC;AACA,OAAOC,mBAAP,MAAgC,mCAAhC;AACA,OAAOC,qBAAP,MAAkC,qCAAlC;AACA,OAAOC,WAAP,MAAwB,WAAxB;;AAGA,MAAMC,aAAa,GAAG,CAAC;AACrBC,EAAAA,QADqB;AAErBC,EAAAA;AAFqB,CAAD,KAMhB;AACJ,sBACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEH,WAAW,CAACI;AAAzB,kBACE,oBAAC,qBAAD;AAAuB,IAAA,QAAQ,EAAEF,QAAjC;AAA2C,IAAA,MAAM,EAAEC;AAAnD,IADF,CADF;AAKD,CAZD;;AAsBA,MAAME,wBAAwB,GAAIC,KAAD,IAAkB;AACjD,QAAM;AAAEC,IAAAA,UAAU,EAAEC,eAAd;AAA+BC,IAAAA;AAA/B,MAAqDH,KAA3D;AAEA,MAAII,iBAAiB,GAAGT,aAAxB,CAHiD,CAKjD;;AACA,QAAMU,QAAQ,GAAGrB,gBAAgB,CAACgB,KAAK,CAACJ,QAAN,CAAeU,UAAhB,CAAjC;AACA,QAAMC,gBAAgB,GAAGtB,mBAAmB,EAA5C;AACA,QAAMuB,iBAAiB,GAAG3B,KAAK,CAAC4B,WAAN,CACvBC,eAAD,IAAqB;AACnBxB,IAAAA,cAAc,CAACqB,gBAAD,EAAmBG,eAAnB,CAAd,CADmB,CAEnB;;AACAR,IAAAA,eAAe,IAAIA,eAAe,CAAChB,cAAD,CAAlC;AACD,GALuB,EAMxB,CAACqB,gBAAD,EAAmBL,eAAnB,CANwB,CAA1B,CARiD,CAiBjD;;AACA,QAAML,MAAM,GACVM,iBAAiB,IAAI,CAACpB,0BAA0B,CAACiB,KAAK,CAACJ,QAAP,EAAiBS,QAAjB,CADlD;;AAGA,UAAQL,KAAK,CAACJ,QAAN,CAAee,IAAvB;AACE,SAAK,cAAL;AACE;AACAP,MAAAA,iBAAiB,GAAGjB,2BAApB;AACA;;AACF,SAAK,aAAL;AACE;AACAiB,MAAAA,iBAAiB,GAAGhB,0BAApB;AACA;;AACF,SAAK,QAAL;AACE,UAAIY,KAAK,CAACJ,QAAN,CAAegB,OAAf,KAA2B,QAA/B,EAAyC;AACvC;AACAR,QAAAA,iBAAiB,GAAGf,2BAApB;AACD,OAHD,MAGO;AACL;AACAe,QAAAA,iBAAiB,GAAGd,2BAApB;AACD;;AACD;;AACF,SAAK,KAAL;AACE;AACAc,MAAAA,iBAAiB,GAAGd,2BAApB;AACA;;AACF,SAAK,MAAL;AACE;AACAc,MAAAA,iBAAiB,GAAGZ,mBAApB;AACA;;AACF,SAAK,SAAL;AACE;AACAY,MAAAA,iBAAiB,GAAGb,sBAApB;AACA;;AACF;AACEa,MAAAA,iBAAiB,GAAGT,aAApB;AA/BJ;;AAkCA,sBACE,oBAAC,iBAAD,eACMK,KADN;AAEE;AACA,IAAA,QAAQ,EAAEK,QAHZ;AAIE,IAAA,UAAU,EAAEG,iBAJd;AAKE,IAAA,MAAM,EAAEX;AALV,KADF;AASD,CAhED;;AAkEA,eAAeE,wBAAf","sourcesContent":["import * as React from 'react';\nimport { View } from 'react-native';\nimport { mandatoryQuestionValidator } from '../utils/data';\n\nimport {\n  useFeedbackByQid,\n  useFeedbackDispatch,\n  updateFeedback,\n} from '../contexts/feedback';\nimport ClassicSingleChoiceQuestion from '../components/ClassicSingleChoiceQuestion';\nimport ClassicMultiChoiceQuestion from '../components/ClassicMultiChoiceQuestion';\nimport ClassicSmileyRatingQuestion from '../components/ClassicSmileyRatingQuestion';\nimport ClassicSliderRatingQuestion from '../components/ClassicSliderRatingQuestion';\nimport ClassicRankingQuestion from '../components/ClassicRankingQuestion';\nimport ClassicOpenQuestion from '../components/ClassicOpenQuestion';\nimport ClassicMandatoryTitle from '../components/ClassicMandatoryTitle';\nimport GlobalStyle from '../styles';\nimport type { Question, Feedback } from '../data';\n\nconst TempComponent = ({\n  question,\n  forgot,\n}: {\n  question: Question;\n  forgot: boolean;\n}) => {\n  return (\n    <View style={GlobalStyle.questionContainer}>\n      <ClassicMandatoryTitle question={question} forgot={forgot} />\n    </View>\n  );\n};\n\ntype Props = {\n  anonymous: boolean;\n  question: Question;\n  validationStarted: boolean;\n  themeColor: string;\n  onFeedback?: (feedback: Feedback) => void;\n};\n\nconst ClassicQuestionContainer = (props: Props) => {\n  const { onFeedback: propsOnFeedback, validationStarted } = props;\n\n  let QuestionComponent = TempComponent;\n\n  // get/update feedback to context\n  const feedback = useFeedbackByQid(props.question.questionId);\n  const feedbackDispatch = useFeedbackDispatch();\n  const onFeedbackHandler = React.useCallback(\n    (updatedFeedback) => {\n      updateFeedback(feedbackDispatch, updatedFeedback);\n      // @ts-ignore\n      propsOnFeedback && propsOnFeedback(updateFeedback);\n    },\n    [feedbackDispatch, propsOnFeedback]\n  );\n\n  // whether to display the forgot warning message\n  const forgot =\n    validationStarted && !mandatoryQuestionValidator(props.question, feedback);\n\n  switch (props.question.type) {\n    case 'singleChoice':\n      // @ts-ignore\n      QuestionComponent = ClassicSingleChoiceQuestion;\n      break;\n    case 'multiChoice':\n      // @ts-ignore\n      QuestionComponent = ClassicMultiChoiceQuestion;\n      break;\n    case 'rating':\n      if (props.question.subType === 'smiley') {\n        // @ts-ignore\n        QuestionComponent = ClassicSmileyRatingQuestion;\n      } else {\n        // @ts-ignore\n        QuestionComponent = ClassicSliderRatingQuestion;\n      }\n      break;\n    case 'nps':\n      // @ts-ignore\n      QuestionComponent = ClassicSliderRatingQuestion;\n      break;\n    case 'open':\n      // @ts-ignore\n      QuestionComponent = ClassicOpenQuestion;\n      break;\n    case 'ranking':\n      // @ts-ignore\n      QuestionComponent = ClassicRankingQuestion;\n      break;\n    default:\n      QuestionComponent = TempComponent;\n  }\n\n  return (\n    <QuestionComponent\n      {...props}\n      // @ts-ignore\n      feedback={feedback}\n      onFeedback={onFeedbackHandler}\n      forgot={forgot}\n    />\n  );\n};\n\nexport default ClassicQuestionContainer;\n"]}