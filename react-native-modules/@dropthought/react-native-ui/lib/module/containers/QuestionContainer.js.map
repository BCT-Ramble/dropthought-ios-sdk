{"version":3,"sources":["QuestionContainer.tsx"],"names":["React","View","mandatoryQuestionValidator","useFeedbackByQid","useFeedbackDispatch","updateFeedback","SmileyRatingQuestionOption1","SmileyRatingQuestionOption2","SmileyRatingQuestionOption3","SmileyRatingQuestionOption4","SmileyRatingQuestionOption6","RankingQuestion","SingleChoiceQuestion","MultiChoiceQuestion","SliderRatingQuestion","OpenQuestion","IconRatingQuestion","SliderDragRatingQuestion","DropdownQuestion","MatrixRatingQuestion","MultipleOpenEndedQuestion","MandatoryTitle","GlobalStyle","TempComponent","question","forgot","questionContainer","QuestionContainer","props","onFeedback","propsOnFeedback","validationStarted","themeOption","QuestionComponent","feedback","questionId","feedbackDispatch","onFeedbackHandler","useCallback","updatedFeedback","type","subType"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { View } from 'react-native';\nimport { mandatoryQuestionValidator } from '../utils/data';\n\nimport {\n  useFeedbackByQid,\n  useFeedbackDispatch,\n  updateFeedback,\n} from '../contexts/feedback';\nimport SmileyRatingQuestionOption1 from '../components/SmileyRatingQuestionOption1';\nimport SmileyRatingQuestionOption2 from '../components/SmileyRatingQuestionOption2';\nimport SmileyRatingQuestionOption3 from '../components/SmileyRatingQuestionOption3';\nimport SmileyRatingQuestionOption4 from '../components/SmileyRatingQuestionOption4';\nimport SmileyRatingQuestionOption6 from '../components/SmileyRatingQuestionOption6';\nimport RankingQuestion from '../components/RankingQuestion';\nimport SingleChoiceQuestion from '../components/SingleChoiceQuestion';\nimport MultiChoiceQuestion from '../components/MultiChoiceQuestion';\nimport SliderRatingQuestion from '../components/SliderRatingQuestion';\nimport OpenQuestion from '../components/OpenQuestion';\nimport IconRatingQuestion from '../components/IconRatingQuestion';\nimport SliderDragRatingQuestion from '../components/SliderDragRatingQuestion';\nimport DropdownQuestion from '../components/DropdownQuestion';\nimport MatrixRatingQuestion from '../components/MatrixRatingQuestion';\nimport MultipleOpenEndedQuestion from '../components/MultipleOpenEndedQuestion';\nimport MandatoryTitle from '../components/MandatoryTitle';\nimport GlobalStyle from '../styles';\n\nimport type { Question, Feedback, Survey } from '../data';\nimport type { THEME_OPTION } from '../contexts/theme';\n\nconst TempComponent = ({\n  question,\n  forgot,\n}: {\n  question: Question;\n  forgot: boolean;\n}) => {\n  return (\n    <View style={GlobalStyle.questionContainer}>\n      <MandatoryTitle question={question} forgot={forgot} />\n    </View>\n  );\n};\n\ntype Props = {\n  anonymous: boolean;\n  question: Question;\n  validationStarted: boolean;\n  themeColor: string;\n  onClose: () => void;\n  onPrevPage: () => void;\n  onNextPage: () => void;\n  onFeedback?: (feedback: Feedback) => void;\n  survey: Survey;\n  pageIndex: number;\n  themeOption: THEME_OPTION;\n};\n\nconst QuestionContainer = (props: Props) => {\n  const { onFeedback: propsOnFeedback, validationStarted, themeOption } = props;\n\n  let QuestionComponent = TempComponent;\n\n  // get/update feedback to context\n  const feedback = useFeedbackByQid(props.question.questionId);\n  const feedbackDispatch = useFeedbackDispatch();\n  const onFeedbackHandler = React.useCallback(\n    (updatedFeedback) => {\n      updateFeedback(feedbackDispatch, updatedFeedback);\n      // @ts-ignore\n      propsOnFeedback && propsOnFeedback(updateFeedback);\n    },\n    [feedbackDispatch, propsOnFeedback]\n  );\n\n  // whether to display the forgot warning message\n  const forgot =\n    validationStarted && !mandatoryQuestionValidator(props.question, feedback);\n\n  switch (props.question.type) {\n    case 'singleChoice':\n      // @ts-ignore\n      QuestionComponent = SingleChoiceQuestion;\n      break;\n    case 'multiChoice':\n      // @ts-ignore\n      QuestionComponent = MultiChoiceQuestion;\n      break;\n    case 'rating':\n      if (props.question.subType === 'smiley') {\n        switch (themeOption) {\n          case 'option1':\n            // @ts-ignore\n            QuestionComponent = SmileyRatingQuestionOption1;\n            break;\n          case 'option2':\n            // @ts-ignore\n            QuestionComponent = SmileyRatingQuestionOption2;\n            break;\n          case 'option3':\n            // @ts-ignore\n            QuestionComponent = SmileyRatingQuestionOption3;\n            break;\n          case 'option4':\n            // @ts-ignore\n            QuestionComponent = SmileyRatingQuestionOption4;\n            break;\n          case 'option6':\n            // @ts-ignore\n            QuestionComponent = SmileyRatingQuestionOption6;\n            break;\n          default:\n            // @ts-ignore\n            QuestionComponent = SmileyRatingQuestionOption1;\n        }\n      } else if (props.question.subType === 'slider') {\n        // @ts-ignore\n        QuestionComponent = SliderRatingQuestion;\n      } else {\n        // @ts-ignore\n        QuestionComponent = IconRatingQuestion;\n      }\n      break;\n    case 'nps':\n      // @ts-ignore\n      QuestionComponent = SliderRatingQuestion;\n      break;\n    case 'open':\n      // @ts-ignore\n      QuestionComponent = OpenQuestion;\n      break;\n    case 'ranking':\n      // @ts-ignore\n      QuestionComponent = RankingQuestion;\n      break;\n    case 'ratingSlider':\n      // @ts-ignore\n      QuestionComponent = SliderDragRatingQuestion;\n      break;\n    case 'dropdown':\n      // @ts-ignore\n      QuestionComponent = DropdownQuestion;\n      break;\n    case 'matrixRating':\n      // @ts-ignore\n      QuestionComponent = MatrixRatingQuestion;\n      break;\n    case 'multipleOpenEnded':\n      // @ts-ignore\n      QuestionComponent = MultipleOpenEndedQuestion;\n      break;\n    default:\n      QuestionComponent = TempComponent;\n  }\n\n  return (\n    <QuestionComponent\n      {...props}\n      // @ts-ignore\n      feedback={feedback}\n      onFeedback={onFeedbackHandler}\n      forgot={forgot}\n    />\n  );\n};\n\nexport default QuestionContainer;\n"]}