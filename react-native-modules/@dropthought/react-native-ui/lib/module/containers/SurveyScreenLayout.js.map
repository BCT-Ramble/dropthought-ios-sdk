{"version":3,"sources":["SurveyScreenLayout.tsx"],"names":["React","ScrollView","RNScrollView","StyleSheet","Platform","View","findNodeHandle","SurveyPageProvider","ClassicQuestionContainer","QuestionContainer","DefaultSurveyProgressBar","ClassicSurveyFooter","SurveyFooter","DefaultSurveyPageIndicator","KeyboardAvoidingScrollView","GlobalStyle","i18n","THEME_OPTION","useTheme","questionFeedbackValidator","nextPage","useFeedbackState","useSurveyPageContext","SurveyHeader","SurveyProgressBarPosition","FixedBottom","BelowBody","OS","firstInvalidQuestionId","page","feedbackState","invalidQuestionId","question","questions","feedback","feedbacksMap","questionId","mandatory","undefined","optional","getFeedbacks","answeredQuestionIds","map","qid","SurveyScreenLayout","props","themeOption","backgroundColor","pageIndex","survey","onClose","onPrevPage","onNextPage","onSubmit","onUpload","isUploading","SurveyPageIndicator","SurveyProgressBar","surveyProgressBarPosition","scrollViewRef","useRef","scrollEnabled","setScrollEnabled","useState","surveyProgressBar","dir","singleQuestion","pages","validationStarted","setValidationStarted","onValidationStartHandler","useCallback","onValidationFailedHandler","_","targetReg","current","measureLayout","_x","y","scrollTo","x","animated","onPrevPageHandler","mandatoryQuestionTitleRefs","currentPage","surveyId","validatePageFeedbacks","onNextPageHandler","isValid","nextPageIndex","feedbacks","classicQuestions","anonymous","surveyProperty","hexCode","classicLayout","styles","scrollView","scrollViewContentContainer","bodyContent","onCloseHandler","newLayout","type","subType","pageOrder","length","flex1","CLASSIC","SurveyScreenLayoutWrapper","noop","defaultProps","create","flex","paddingHorizontal","flexGrow","alignItems","paddingBottom","width","maxWidth"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  ScrollView as RNScrollView,\n  StyleSheet,\n  Platform,\n  View,\n  findNodeHandle,\n} from 'react-native';\n\nimport { SurveyPageProvider } from '../contexts/survey-page';\nimport ClassicQuestionContainer from './ClassicQuestionContainer';\nimport QuestionContainer from './QuestionContainer';\nimport DefaultSurveyProgressBar from './SurveyProgressBar';\nimport ClassicSurveyFooter from './ClassicSurveyFooter';\nimport SurveyFooter from './SurveyFooter';\nimport DefaultSurveyPageIndicator from '../components/SurveyPageIndicator';\nimport { KeyboardAvoidingScrollView } from '../components/KeyboardAvoidingView';\nimport GlobalStyle from '../styles';\nimport i18n from '../translation';\nimport { THEME_OPTION, useTheme } from '../contexts/theme';\nimport type {\n  Survey,\n  SurveyFeedback,\n  Page,\n  Feedback,\n  ImageFileProps,\n} from '../data';\nimport { questionFeedbackValidator } from '../utils/data';\nimport { nextPage } from '../dt-common';\nimport { useFeedbackState } from '../contexts/feedback';\nimport { useSurveyPageContext } from '../contexts/survey-page';\nimport SurveyHeader from './SurveyHeader';\n\nexport const SurveyProgressBarPosition = {\n  FixedBottom: 0,\n  BelowBody: 1,\n};\n\nconst ScrollView =\n  Platform.OS === 'ios' ? KeyboardAvoidingScrollView : RNScrollView;\n\ntype FeedbackReducerState = any;\n/**\n * check if the feedbacks of questions of the page is valid\n * returns the 1st invalid question id or undefined (means all valid)\n */\nconst firstInvalidQuestionId = (\n  page: Page,\n  feedbackState: FeedbackReducerState\n): string | undefined => {\n  let invalidQuestionId;\n  for (const question of page.questions) {\n    const feedback = feedbackState.feedbacksMap[question.questionId];\n    if (\n      (question.mandatory && feedback === undefined) ||\n      (question.optional && feedback === undefined)\n    ) {\n      invalidQuestionId = question.questionId;\n      break;\n    }\n\n    if (feedback && !questionFeedbackValidator(question, feedback)) {\n      invalidQuestionId = question.questionId;\n      break;\n    }\n  }\n  return invalidQuestionId;\n};\n\n/**\n * get feedbacks array from feedback state\n */\nconst getFeedbacks = (feedbackState: FeedbackReducerState): Feedback[] => {\n  return feedbackState.answeredQuestionIds.map(\n    (qid: string) => feedbackState.feedbacksMap[qid]\n  );\n};\n\ntype Props = {\n  pageIndex: number; //current page index (start from 0)\n  survey: Survey;\n  onClose?: () => void;\n  onSubmit: (surveyFeedback: SurveyFeedback) => void;\n  onNextPage: (nextPageIndex: number) => void;\n  onPrevPage?: () => void;\n  onPageEnter?: () => void;\n  onPageLeave?: () => void;\n  onFeedback?: () => void;\n  onUpload?: (file: ImageFileProps) => Promise<string | undefined>;\n  isUploading?: boolean;\n  SurveyProgressBar?: any;\n  surveyProgressBarPosition?: number;\n  SurveyPageIndicator?: any;\n};\n\nconst SurveyScreenLayout = (props: Props) => {\n  const { themeOption, backgroundColor } = useTheme();\n  const {\n    pageIndex = 0,\n    survey,\n    onClose,\n    onPrevPage,\n    onNextPage,\n    onSubmit,\n    onUpload,\n    isUploading,\n    SurveyPageIndicator = DefaultSurveyPageIndicator,\n    SurveyProgressBar = DefaultSurveyProgressBar,\n    surveyProgressBarPosition = SurveyProgressBarPosition.FixedBottom,\n  } = props;\n  const scrollViewRef = React.useRef<RNScrollView>(null);\n  const [scrollEnabled, setScrollEnabled] = React.useState(true);\n\n  const surveyProgressBar = (\n    <SurveyProgressBar\n      survey={survey}\n      pageIndex={pageIndex}\n      rtl={i18n.dir() === 'rtl'}\n    />\n  );\n\n  const singleQuestion = survey.pages[pageIndex].questions[0];\n\n  // when validation start, set the state\n  const [validationStarted, setValidationStarted] = React.useState(false);\n  const onValidationStartHandler = React.useCallback(() => {\n    setValidationStarted(true);\n  }, []);\n\n  // when validation failed, scroll to the ref\n  const onValidationFailedHandler = React.useCallback((_, targetReg) => {\n    if (targetReg && scrollViewRef.current) {\n      targetReg.measureLayout(\n        findNodeHandle(scrollViewRef.current),\n        (_x: number, y: number) => {\n          if (scrollViewRef.current) {\n            scrollViewRef.current.scrollTo({\n              x: 0,\n              y: y,\n              animated: true,\n            });\n          }\n        }\n      );\n    }\n  }, []);\n\n  const onPrevPageHandler = () => {\n    onPrevPage && onPrevPage();\n  };\n\n  const feedbackState = useFeedbackState();\n  const { mandatoryQuestionTitleRefs } = useSurveyPageContext();\n  const currentPage = survey.pages[pageIndex];\n  const surveyId = survey.surveyId;\n\n  // check if feedbacks are valid\n  const validatePageFeedbacks = React.useCallback(() => {\n    onValidationStartHandler();\n    const invalidQuestionId = firstInvalidQuestionId(\n      currentPage,\n      feedbackState\n    );\n    // if there's an invalid question, call onValidationFailed\n    if (invalidQuestionId)\n      onValidationFailedHandler(\n        invalidQuestionId,\n        mandatoryQuestionTitleRefs[invalidQuestionId]\n      );\n    return !invalidQuestionId;\n  }, [\n    onValidationStartHandler,\n    currentPage,\n    feedbackState,\n    onValidationFailedHandler,\n    mandatoryQuestionTitleRefs,\n  ]);\n\n  const onNextPageHandler = React.useCallback(() => {\n    const isValid = validatePageFeedbacks();\n    if (isValid) {\n      const nextPageIndex = nextPage(\n        pageIndex,\n        getFeedbacks(feedbackState),\n        survey\n      );\n      if (nextPageIndex === -1) {\n        onSubmit({\n          surveyId,\n          feedbacks: getFeedbacks(feedbackState),\n        });\n      } else {\n        onNextPage(nextPageIndex);\n      }\n    }\n  }, [\n    validatePageFeedbacks,\n    pageIndex,\n    feedbackState,\n    survey,\n    onSubmit,\n    onNextPage,\n    surveyId,\n  ]);\n\n  const classicQuestions = survey.pages[pageIndex].questions.map((question) => {\n    return (\n      <ClassicQuestionContainer\n        key={question.questionId}\n        anonymous={survey.anonymous}\n        question={question}\n        validationStarted={validationStarted}\n        themeColor={survey.surveyProperty.hexCode}\n        onDragGrant={() => setScrollEnabled(false)}\n        onDragEnd={() => setScrollEnabled(true)}\n        onUpload={onUpload}\n        isUploading={isUploading}\n      />\n    );\n  });\n\n  const classicLayout = (\n    <>\n      <SurveyPageIndicator\n        pageIndex={pageIndex}\n        survey={survey}\n        rtl={i18n.dir() === 'rtl'}\n      />\n      {/* @ts-ignore */}\n      <ScrollView\n        // @ts-ignore\n        ref={scrollViewRef}\n        style={[styles.scrollView, { backgroundColor }]}\n        extraAvoidingSpace={30}\n        contentContainerStyle={styles.scrollViewContentContainer}\n        scrollEnabled={scrollEnabled}\n      >\n        <View style={styles.bodyContent}>\n          {classicQuestions}\n          <ClassicSurveyFooter\n            survey={survey}\n            pageIndex={pageIndex}\n            onPrevPage={onPrevPageHandler}\n            onNextPage={onNextPageHandler}\n          />\n          {surveyProgressBarPosition === SurveyProgressBarPosition.BelowBody &&\n            surveyProgressBar}\n        </View>\n      </ScrollView>\n      {surveyProgressBarPosition === SurveyProgressBarPosition.FixedBottom &&\n        surveyProgressBar}\n    </>\n  );\n\n  const onCloseHandler = () => {\n    onClose && onClose();\n  };\n\n  // Can rename this if have better name\n  const newLayout = (\n    <>\n      {singleQuestion.type === 'rating' &&\n      singleQuestion.subType === 'smiley' ? null : (\n        <SurveyHeader\n          survey={survey}\n          pageIndex={pageIndex}\n          backgroundColor={backgroundColor}\n          onClose={onCloseHandler}\n        />\n      )}\n      <QuestionContainer\n        key={singleQuestion.questionId}\n        anonymous={survey.anonymous}\n        question={singleQuestion}\n        validationStarted={validationStarted}\n        themeColor={survey.surveyProperty.hexCode}\n        onClose={onCloseHandler}\n        onPrevPage={onPrevPageHandler}\n        onNextPage={onNextPageHandler}\n        onUpload={onUpload}\n        isUploading={isUploading}\n        survey={survey}\n        pageIndex={pageIndex}\n        themeOption={themeOption}\n      />\n      {singleQuestion.type === 'rating' &&\n      singleQuestion.subType === 'smiley' ? null : (\n        <SurveyFooter\n          surveyColor={survey.surveyProperty.hexCode}\n          isFirstPage={pageIndex === 0}\n          isLastPage={pageIndex === survey.pageOrder.length - 1}\n          onPrevPage={onPrevPageHandler}\n          onNextPage={onNextPageHandler}\n          backgroundColor={backgroundColor}\n        />\n      )}\n    </>\n  );\n\n  return (\n    <View style={[GlobalStyle.flex1, { backgroundColor }]}>\n      {themeOption === THEME_OPTION.CLASSIC ? classicLayout : newLayout}\n    </View>\n  );\n};\n\nconst SurveyScreenLayoutWrapper = (props: Props) => {\n  return (\n    <SurveyPageProvider>\n      <SurveyScreenLayout {...props} />\n    </SurveyPageProvider>\n  );\n};\n\nexport default SurveyScreenLayoutWrapper;\n\nconst noop = () => undefined;\nSurveyScreenLayout.defaultProps = {\n  pageIndex: 0,\n  onSubmit: noop,\n  onNextPage: noop,\n  onPrevPage: noop,\n};\n\nconst styles = StyleSheet.create({\n  scrollView: {\n    flex: 1,\n    paddingHorizontal: 30,\n  },\n  scrollViewContentContainer: {\n    flexGrow: 1,\n    alignItems: 'center',\n    paddingBottom: 30,\n  },\n\n  // where the questions and submit/page buttons go\n  bodyContent: {\n    width: '100%',\n    flex: 1,\n    maxWidth: 648,\n  },\n});\n"]}