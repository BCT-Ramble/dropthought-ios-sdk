{"version":3,"sources":["RatingQuestionConstants.js"],"names":["scaleLogic","smileyPoor","require","smileyFair","smileyNeutral","smileyGood","smileyExcellent","smileyPoorSelected","smileyFairSelected","smileyNeutralSelected","smileyGoodSelected","smileyExcellentSelected","defaultStar","starPoor","starFair","starNeutral","starGood","starExcellent","defaultHeart","heartPoor","heartFair","heartNeutral","heartGood","heartExcellent","thumbPoor","thumbFair","thumbNeutral","thumbGood","thumbExcellent","thumbPoorSelected","thumbFairSelected","thumbNeutralSelected","thumbGoodSelected","thumbExcellentSelected","RatingIconType","smiley","star","heart","thumb","defaultIcon","type","colorScheme","smileyIcons","smileyIconsSelected","starIcons","heartIcons","thumbIcons","thumbIconsSelected","getIconList","length","icons","map","value","getIcons","optionLength","getSelectedIcons"],"mappings":"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","sourcesContent":["import { scaleLogic } from '../utils/data';\n\nconst smileyPoor = require('../assets/btn_very_dislike.png');\nconst smileyFair = require('../assets/btn_dislike.png');\nconst smileyNeutral = require('../assets/btn_not_sure.png');\nconst smileyGood = require('../assets/btn_like.png');\nconst smileyExcellent = require('../assets/btn_very_like.png');\n\nconst smileyPoorSelected = require('../assets/btn_very_dislike_selected.png');\nconst smileyFairSelected = require('../assets/btn_dislike_selected.png');\nconst smileyNeutralSelected = require('../assets/btn_not_sure_selected.png');\nconst smileyGoodSelected = require('../assets/btn_like_selected.png');\nconst smileyExcellentSelected = require('../assets/btn_very_like_selected.png');\n\nconst defaultStar = require('../assets/icDefaultStar.png');\nconst starPoor = require('../assets/icStarPoor.png');\nconst starFair = require('../assets/icStarFair.png');\nconst starNeutral = require('../assets/icStarNeutral.png');\nconst starGood = require('../assets/icStarGood.png');\nconst starExcellent = require('../assets/icStarExcellent.png');\n\nconst defaultHeart = require('../assets/icDefaultHeart.png');\nconst heartPoor = require('../assets/icHeartPoor.png');\nconst heartFair = require('../assets/icHeartFair.png');\nconst heartNeutral = require('../assets/icHeartNeutral.png');\nconst heartGood = require('../assets/icHeartGood.png');\nconst heartExcellent = require('../assets/icHeartExcellent.png');\n\nconst thumbPoor = require('../assets/icThumbPoor.png');\nconst thumbFair = require('../assets/icThumbFair.png');\nconst thumbNeutral = require('../assets/icThumbNeutral.png');\nconst thumbGood = require('../assets/icThumbGood.png');\nconst thumbExcellent = require('../assets/icThumbExcellent.png');\n\nconst thumbPoorSelected = require('../assets/icThumbPoorSelected.png');\nconst thumbFairSelected = require('../assets/icThumbFairSelected.png');\nconst thumbNeutralSelected = require('../assets/icThumbNeutralSelected.png');\nconst thumbGoodSelected = require('../assets/icThumbGoodSelected.png');\nconst thumbExcellentSelected = require('../assets/icThumbExcellentSelected.png');\n\n/** @enum {'smiley'|'star'|'heart'|'thumb'} */\nexport const RatingIconType = {\n  smiley: 'smiley',\n  star: 'star',\n  heart: 'heart',\n  thumb: 'thumb',\n};\n\n/**\n * @param {QuestionSubType} type\n * @param {string} colorScheme\n */\nexport const defaultIcon = (type, colorScheme) => {\n  switch (type) {\n    case RatingIconType.star:\n      return defaultStar;\n    case RatingIconType.heart:\n      return defaultHeart;\n  }\n};\n\nconst smileyIcons = [\n  smileyPoor,\n  smileyFair,\n  smileyNeutral,\n  smileyGood,\n  smileyExcellent,\n];\nconst smileyIconsSelected = [\n  smileyPoorSelected,\n  smileyFairSelected,\n  smileyNeutralSelected,\n  smileyGoodSelected,\n  smileyExcellentSelected,\n];\n\nconst starIcons = [starPoor, starFair, starNeutral, starGood, starExcellent];\nconst heartIcons = [\n  heartPoor,\n  heartFair,\n  heartNeutral,\n  heartGood,\n  heartExcellent,\n];\nconst thumbIcons = [\n  thumbPoor,\n  thumbFair,\n  thumbNeutral,\n  thumbGood,\n  thumbExcellent,\n];\nconst thumbIconsSelected = [\n  thumbPoorSelected,\n  thumbFairSelected,\n  thumbNeutralSelected,\n  thumbGoodSelected,\n  thumbExcellentSelected,\n];\n\n/**\n * @param {number} length\n * @param {*} icons\n */\nconst getIconList = (length, icons) => {\n  return scaleLogic[length].map((value) => icons[value]);\n};\n\n/**\n * @param {QuestionSubType} type\n * @param {number} optionLength\n * @returns {string[]}\n */\nexport const getIcons = (type, optionLength) => {\n  let icons;\n  switch (type) {\n    case RatingIconType.smiley:\n      icons = smileyIcons;\n      break;\n    case RatingIconType.star:\n      icons = starIcons;\n      break;\n    case RatingIconType.heart:\n      icons = heartIcons;\n      break;\n    case RatingIconType.thumb:\n      icons = thumbIcons;\n      break;\n  }\n\n  switch (optionLength) {\n    case 2:\n      return getIconList(2, icons);\n    case 3:\n      return getIconList(3, icons);\n    case 4:\n      return getIconList(4, icons);\n    default:\n      return icons;\n  }\n};\n\n/**\n * @param {QuestionSubType} type\n * @param {number} optionLength\n * @returns {string[]}\n */\nexport const getSelectedIcons = (type, optionLength) => {\n  let icons;\n  switch (type) {\n    case RatingIconType.smiley:\n      icons = smileyIconsSelected;\n      break;\n    case RatingIconType.star:\n      icons = starIcons; // do not have selected icon\n      break;\n    case RatingIconType.heart:\n      icons = heartIcons; // do not have selected icon\n      break;\n    case RatingIconType.thumb:\n      icons = thumbIconsSelected;\n      break;\n  }\n\n  switch (optionLength) {\n    case 2:\n      return getIconList(2, icons);\n    case 3:\n      return getIconList(3, icons);\n    case 4:\n      return getIconList(4, icons);\n    default:\n      return icons;\n  }\n};\n\n/**\n * @typedef {import('../data').QuestionSubType} QuestionSubType\n */\n"]}