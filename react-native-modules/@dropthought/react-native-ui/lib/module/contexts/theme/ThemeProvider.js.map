{"version":3,"sources":["ThemeProvider.tsx"],"names":["React","useColorScheme","Colors","ThemeContext","APPEARANCE","COLOR_SCHEMES","THEME_OPTION","getColorScheme","appearance","systemColorScheme","colorScheme","SYSTEM","LIGHT","DARK","includes","light","getFontColor","customFontColor","dark","fontColorDark","fontColorLight","getBackgroundColor","customBackgroundColor","backgroundColorDark","backgroundColorLight","useTheme","themeOption","hexCode","fontColor","backgroundColor","useMemo","ThemeProvider","children","transformedHexCode","BIJLIRIDE","bijlirideHexCode","themeValue"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { useColorScheme, ColorSchemeName } from 'react-native';\nimport { Colors } from '../../styles';\nimport { ThemeContext } from './ThemeContext';\nimport {\n  APPEARANCE,\n  COLOR_SCHEMES,\n  IAppearanceType,\n  IColorSchemesType,\n  FontColor,\n  BackgroundColor,\n  IThemeOptionType,\n  THEME_OPTION,\n} from './theme.const';\n\nfunction getColorScheme(\n  appearance: IAppearanceType,\n  systemColorScheme: ColorSchemeName\n): IColorSchemesType {\n  let colorScheme;\n  if (appearance === APPEARANCE.SYSTEM) {\n    if (systemColorScheme) {\n      colorScheme = COLOR_SCHEMES[systemColorScheme];\n    }\n  } else if ([APPEARANCE.LIGHT, APPEARANCE.DARK].includes(appearance)) {\n    colorScheme = COLOR_SCHEMES[appearance];\n  }\n  return colorScheme ?? COLOR_SCHEMES.light;\n}\n\nfunction getFontColor(\n  customFontColor: FontColor,\n  colorScheme: IColorSchemesType\n) {\n  if (customFontColor) {\n    return customFontColor;\n  }\n  if (colorScheme === COLOR_SCHEMES.dark) {\n    return Colors.fontColorDark;\n  }\n  return Colors.fontColorLight;\n}\n\nfunction getBackgroundColor(\n  customBackgroundColor: BackgroundColor,\n  colorScheme: IColorSchemesType\n) {\n  if (customBackgroundColor) {\n    return customBackgroundColor;\n  }\n  if (colorScheme === COLOR_SCHEMES.dark) {\n    return Colors.backgroundColorDark;\n  }\n  return Colors.backgroundColorLight;\n}\n\nfunction useTheme({\n  themeOption,\n  appearance,\n  hexCode,\n  fontColor: customFontColor,\n  backgroundColor: customBackgroundColor,\n}: {\n  themeOption: IThemeOptionType;\n  appearance: IAppearanceType;\n  hexCode: string;\n  fontColor: FontColor;\n  backgroundColor: BackgroundColor;\n}) {\n  const systemColorScheme = useColorScheme();\n  const colorScheme = getColorScheme(appearance, systemColorScheme);\n  const fontColor = getFontColor(customFontColor, colorScheme);\n  const backgroundColor = getBackgroundColor(\n    customBackgroundColor,\n    colorScheme\n  );\n\n  return React.useMemo(() => {\n    return {\n      themeOption,\n      hexCode,\n      colorScheme,\n      fontColor,\n      backgroundColor,\n      customFontColor,\n      customBackgroundColor,\n    };\n  }, [\n    themeOption,\n    hexCode,\n    colorScheme,\n    fontColor,\n    backgroundColor,\n    customFontColor,\n    customBackgroundColor,\n  ]);\n}\n\ntype Props = {\n  children: React.ReactNode;\n  themeOption: IThemeOptionType;\n  appearance: IAppearanceType;\n  hexCode: string;\n  fontColor: FontColor;\n  backgroundColor: BackgroundColor;\n};\n\nexport function ThemeProvider({\n  children,\n  themeOption,\n  appearance,\n  hexCode,\n  fontColor,\n  backgroundColor,\n}: Props) {\n  let transformedHexCode = hexCode;\n\n  if (themeOption === THEME_OPTION.BIJLIRIDE) {\n    transformedHexCode = Colors.bijlirideHexCode;\n  }\n\n  const themeValue = useTheme({\n    themeOption,\n    appearance,\n    hexCode: transformedHexCode,\n    fontColor,\n    backgroundColor,\n  });\n\n  return (\n    <ThemeContext.Provider value={themeValue}>{children}</ThemeContext.Provider>\n  );\n}\n"]}