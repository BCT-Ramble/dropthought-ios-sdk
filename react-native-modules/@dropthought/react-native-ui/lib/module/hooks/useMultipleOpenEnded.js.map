{"version":3,"sources":["useMultipleOpenEnded.ts"],"names":["useState","useMemo","getRequiredType","i18n","multipleOpenEndedValidator","question","feedback","answers","matrixRequiredType","length","every","value","some","useMultipleOpenEnded","onFeedback","questionIds","questionTitles","responseErrorTextList","metaDataTypeList","exampleMetadataTextList","scale","phiDataList","defaultAnswer","Array","fill","requiredType","questionId","selectedAnswerState","updateFeedback","hasEdited","type","questionRows","map","id","index","questionTitle","responseErrorText","metaDataType","exampleMetadataText","Number","phiData","handleErrorHint","forgot","undefined","t"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,OAAnB,QAAkC,OAAlC;AAEA,SAASC,eAAT,QAAgC,eAAhC;AACA,OAAOC,IAAP,MAAiB,gBAAjB;AAYA,OAAO,MAAMC,0BAA0B,GAAG,CACxCC,QADwC,EAExCC,QAFwC,KAG5B;AACZ,QAAM;AAAEC,IAAAA,OAAO,GAAG;AAAZ,MAAmBD,QAAzB;AACA,QAAME,kBAAkB,GAAGN,eAAe,CAACG,QAAD,CAA1C;;AAEA,UAAQG,kBAAR;AACE,SAAK,KAAL;AACE,aAAOD,OAAO,CAACE,MAAR,GAAiB,CAAjB,IAAsBF,OAAO,CAACG,KAAR,CAAeC,KAAD,IAAWA,KAAK,KAAK,EAAnC,CAA7B;;AACF,SAAK,KAAL;AACE,aAAOJ,OAAO,CAACK,IAAR,CAAcD,KAAD,IAAWA,KAAK,KAAK,EAAlC,CAAP;;AACF;AACE,aAAO,IAAP;AANJ;AAQD,CAfM;;AAiBP,MAAME,oBAAoB,GAAG,CAC3BR,QAD2B,EAE3BC,QAF2B,EAG3BQ,UAH2B,KAIxB;AACH,QAAM;AACJC,IAAAA,WADI;AAEJC,IAAAA,cAAc,GAAG,EAFb;AAGJC,IAAAA,qBAAqB,GAAG,EAHpB;AAIJC,IAAAA,gBAJI;AAKJC,IAAAA,uBALI;AAMJC,IAAAA,KAAK,GAAG,IANJ;AAOJC,IAAAA;AAPI,MAQFhB,QARJ;AASA,QAAMiB,aAAa,GAAG,IAAIC,KAAJ,CAAUP,cAAc,CAACP,MAAzB,EAAiCe,IAAjC,CAAsC,EAAtC,CAAtB;AACA,QAAMC,YAAY,GAAGvB,eAAe,CAACG,QAAD,CAApC;AACA,QAAM;AAAEqB,IAAAA;AAAF,MAAiBrB,QAAvB;AACA,QAAMsB,mBAAmB,GAAG3B,QAAQ,CAClCM,QAAQ,SAAR,IAAAA,QAAQ,WAAR,IAAAA,QAAQ,CAAEC,OAAV,GAAoBD,QAAQ,CAACC,OAA7B,GAAuCe,aADL,CAApC;;AAIA,QAAMM,cAAc,GAAIrB,OAAD,IAAuB;AAC5C,UAAMsB,SAAS,GAAGtB,OAAO,CAACK,IAAR,CAAcD,KAAD,IAAWA,KAAK,CAACF,MAAN,GAAe,CAAvC,CAAlB;AACAK,IAAAA,UAAU,CAAC;AACTY,MAAAA,UAAU,EAAEA,UADH;AAETnB,MAAAA,OAAO,EAAEsB,SAAS,IAAIJ,YAAY,KAAK,MAA9B,GAAuClB,OAAvC,GAAiDe,aAFjD;AAGTQ,MAAAA,IAAI,EAAE;AAHG,KAAD,CAAV;AAKD,GAPD;;AASA,QAAMC,YAA+B,GAAG9B,OAAO,CAC7C,MACE,CAAAc,WAAW,SAAX,IAAAA,WAAW,WAAX,YAAAA,WAAW,CAAEiB,GAAb,CAAiB,CAACC,EAAD,EAAKC,KAAL,MAAgB;AAC/BR,IAAAA,UAAU,EAAEO,EADmB;AAE/BE,IAAAA,aAAa,EAAEnB,cAAF,aAAEA,cAAF,uBAAEA,cAAc,CAAGkB,KAAH,CAFE;AAG/BE,IAAAA,iBAAiB,EAAEnB,qBAAF,aAAEA,qBAAF,uBAAEA,qBAAqB,CAAGiB,KAAH,CAHT;AAI/BG,IAAAA,YAAY,EAAEnB,gBAAF,aAAEA,gBAAF,uBAAEA,gBAAgB,CAAGgB,KAAH,CAJC;AAK/BI,IAAAA,mBAAmB,EAAEnB,uBAAF,aAAEA,uBAAF,uBAAEA,uBAAuB,CAAGe,KAAH,CALb;AAM/Bd,IAAAA,KAAK,EAAEmB,MAAM,CAACnB,KAAD,CANkB;AAO/BoB,IAAAA,OAAO,EAAEnB,WAAW,CAACa,KAAD;AAPW,GAAhB,CAAjB,MAQO,EAVoC,EAW7C,CACEf,uBADF,EAEED,gBAFF,EAGEG,WAHF,EAIEN,WAJF,EAKEC,cALF,EAMEC,qBANF,EAOEG,KAPF,CAX6C,CAA/C;;AAqBA,QAAMqB,eAAe,GAAIC,MAAD,IAAyC;AAC/D,QAAI,CAACA,MAAL,EAAa,OAAOC,SAAP;;AACb,YAAQlB,YAAR;AACE,WAAK,KAAL;AACE,eAAOtB,IAAI,CAACyC,CAAL,CAAO,gCAAP,CAAP;;AACF,WAAK,KAAL;AACE,eAAOzC,IAAI,CAACyC,CAAL,CAAO,6BAAP,CAAP;;AACF;AACE,eAAOD,SAAP;AANJ;AAQD,GAVD;;AAWA,SAAO;AACLZ,IAAAA,YADK;AAELJ,IAAAA,mBAFK;AAGLc,IAAAA,eAHK;AAILb,IAAAA;AAJK,GAAP;AAMD,CApED;;AAsEA,eAAef,oBAAf","sourcesContent":["import { useState, useMemo } from 'react';\nimport type { Question, Feedback, QuestionMetaDataType } from '../data';\nimport { getRequiredType } from '../utils/data';\nimport i18n from '../translation';\n\nexport type QuestionRowItem = {\n  questionId: string;\n  questionTitle?: string;\n  responseErrorText?: string;\n  metaDataType?: QuestionMetaDataType;\n  exampleMetadataText?: string;\n  scale: number;\n  phiData: boolean;\n};\n\nexport const multipleOpenEndedValidator = (\n  question: Question,\n  feedback: Feedback\n): boolean => {\n  const { answers = [] } = feedback;\n  const matrixRequiredType = getRequiredType(question);\n\n  switch (matrixRequiredType) {\n    case 'all':\n      return answers.length > 1 && answers.every((value) => value !== '');\n    case 'one':\n      return answers.some((value) => value !== '');\n    default:\n      return true;\n  }\n};\n\nconst useMultipleOpenEnded = (\n  question: Question,\n  feedback: Feedback,\n  onFeedback: (feedback: Feedback) => void\n) => {\n  const {\n    questionIds,\n    questionTitles = [],\n    responseErrorTextList = [],\n    metaDataTypeList,\n    exampleMetadataTextList,\n    scale = '64',\n    phiDataList,\n  } = question;\n  const defaultAnswer = new Array(questionTitles.length).fill('');\n  const requiredType = getRequiredType(question);\n  const { questionId } = question;\n  const selectedAnswerState = useState<string[]>(\n    feedback?.answers ? feedback.answers : defaultAnswer\n  );\n\n  const updateFeedback = (answers: string[]) => {\n    const hasEdited = answers.some((value) => value.length > 0);\n    onFeedback({\n      questionId: questionId,\n      answers: hasEdited || requiredType === 'none' ? answers : defaultAnswer,\n      type: 'multipleOpenEnded',\n    });\n  };\n\n  const questionRows: QuestionRowItem[] = useMemo(\n    () =>\n      questionIds?.map((id, index) => ({\n        questionId: id,\n        questionTitle: questionTitles?.[index],\n        responseErrorText: responseErrorTextList?.[index],\n        metaDataType: metaDataTypeList?.[index],\n        exampleMetadataText: exampleMetadataTextList?.[index],\n        scale: Number(scale),\n        phiData: phiDataList[index],\n      })) || [],\n    [\n      exampleMetadataTextList,\n      metaDataTypeList,\n      phiDataList,\n      questionIds,\n      questionTitles,\n      responseErrorTextList,\n      scale,\n    ]\n  );\n  const handleErrorHint = (forgot: boolean): string | undefined => {\n    if (!forgot) return undefined;\n    switch (requiredType) {\n      case 'all':\n        return i18n.t('survey:error-hint-required-all');\n      case 'one':\n        return i18n.t('survey:error-hint-least-one');\n      default:\n        return undefined;\n    }\n  };\n  return {\n    questionRows,\n    selectedAnswerState,\n    handleErrorHint,\n    updateFeedback,\n  };\n};\n\nexport default useMultipleOpenEnded;\n"]}