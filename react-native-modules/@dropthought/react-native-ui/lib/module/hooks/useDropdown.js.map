{"version":3,"sources":["useDropdown.ts"],"names":["useState","useEffect","useMemo","metaDataFormatValidator","getOptionsFromQuestion","i18n","isNil","QuestionBrandType","useDropdown","question","feedback","onFeedback","questionId","responseErrorText","options","result","questionBrand","Other","lastOption","length","title","t","placeholder","otherText","bottomSheetVisible","setBottomSheetVisible","selectedOptionIndex","setSelectedOptionIndex","selectedOptionIndexCache","setSelectedOptionIndexCache","renderList","setRenderList","searchText","setSearchText","setOtherText","hasEdited","setHasEdited","answers","isValid","metaDataType","searchedList","filter","toLocaleLowerCase","includes","currentSelectedOption","undefined","optionLabel","answer","indexOfOther","isOther","index","type","otherFlag","onChangeOtherText","text","onChangeSearchText","onCloseBottomSheet","onOpenBottomSheet","onConfirm","onCancel","invalidMessage"],"mappings":"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","sourcesContent":["import { useState, useEffect, useMemo } from 'react';\nimport { metaDataFormatValidator, getOptionsFromQuestion } from '../utils/data';\nimport i18n from '../translation';\nimport type { Question, Feedback } from '../data';\nimport { isNil } from 'ramda';\nimport { QuestionBrandType } from '../utils/data';\n\nconst useDropdown = (\n  question: Question,\n  feedback: Feedback,\n  onFeedback: (feedback: Feedback) => void\n) => {\n  const { questionId, responseErrorText } = question;\n\n  const options = useMemo(() => {\n    let result = getOptionsFromQuestion(question);\n    if (question.questionBrand === QuestionBrandType.Other) {\n      const lastOption = result[result.length - 1];\n      lastOption.title = i18n.t('common:others');\n      lastOption.placeholder =\n        isNil(question.otherText) || question.otherText === ''\n          ? i18n.t('survey:other-placeholder')\n          : question.otherText;\n    }\n    return result;\n  }, [question]);\n\n  const [bottomSheetVisible, setBottomSheetVisible] = useState(false);\n  const [selectedOptionIndex, setSelectedOptionIndex] = useState<number>();\n  const [selectedOptionIndexCache, setSelectedOptionIndexCache] =\n    useState<number>();\n  const [renderList, setRenderList] = useState(options);\n  const [searchText, setSearchText] = useState('');\n  const [otherText, setOtherText] = useState('');\n  const [hasEdited, setHasEdited] = useState(\n    feedback?.answers[0] && typeof feedback.answers[0] === 'string'\n      ? feedback.answers[0].length > 0\n      : false\n  );\n  const isValid = metaDataFormatValidator(otherText, question.metaDataType);\n\n  useEffect(() => {\n    const searchedList = options.filter(({ title }) => {\n      return title\n        .toLocaleLowerCase()\n        .includes(searchText.toLocaleLowerCase() || '');\n    });\n    setRenderList(searchedList);\n  }, [options, searchText]);\n\n  const currentSelectedOption = useMemo(() => {\n    return selectedOptionIndex !== undefined\n      ? options[selectedOptionIndex]\n      : undefined;\n  }, [options, selectedOptionIndex]);\n\n  const optionLabel = useMemo(() => {\n    return currentSelectedOption?.title ?? i18n.t('survey:select-Your-Option');\n  }, [currentSelectedOption]);\n\n  useEffect(() => {\n    if (feedback && feedback.answers && !isNil(feedback.answers[0])) {\n      const answer = feedback.answers[0];\n      if (typeof answer === 'number') {\n        setSelectedOptionIndex(answer);\n      } else if (typeof answer === 'string') {\n        // if the answer is not a number type,\n        // it is for other label, return the last index\n        setOtherText(answer);\n        const indexOfOther = options.length - 1;\n        setSelectedOptionIndex(indexOfOther);\n      }\n    }\n  }, [feedback, options.length]);\n\n  useEffect(() => {\n    if (currentSelectedOption === undefined) return;\n\n    if (!currentSelectedOption.isOther) {\n      setOtherText('');\n      onFeedback({\n        questionId: questionId,\n        answers: [currentSelectedOption.index],\n        type: 'dropdown',\n      });\n    } else if (currentSelectedOption.isOther) {\n      onFeedback({\n        questionId: questionId,\n        answers: [''],\n        type: 'dropdown',\n        otherFlag: true,\n      });\n    }\n  }, [currentSelectedOption, onFeedback, questionId]);\n\n  useEffect(() => {\n    if (currentSelectedOption && currentSelectedOption.isOther) {\n      onFeedback({\n        questionId: questionId,\n        answers: [otherText],\n        type: 'dropdown',\n        otherFlag: true,\n      });\n    }\n  }, [currentSelectedOption, onFeedback, otherText, questionId]);\n\n  const onChangeOtherText = (text: string) => {\n    setHasEdited(true);\n    setOtherText(text);\n  };\n\n  const onChangeSearchText = (text: string) => {\n    setSearchText(text);\n  };\n\n  const onCloseBottomSheet = () => {\n    setBottomSheetVisible(false);\n  };\n\n  const onOpenBottomSheet = () => {\n    setSelectedOptionIndexCache(selectedOptionIndex);\n    setBottomSheetVisible(true);\n  };\n\n  const onConfirm = () => {\n    setSelectedOptionIndex(selectedOptionIndexCache);\n    setSearchText('');\n    onCloseBottomSheet();\n  };\n\n  const onCancel = () => {\n    setSelectedOptionIndexCache(undefined);\n    setSearchText('');\n    onCloseBottomSheet();\n  };\n\n  return {\n    selectedOptionIndexCache,\n    setSelectedOptionIndexCache,\n\n    currentSelectedOption,\n    invalidMessage: hasEdited && !isValid ? responseErrorText : undefined,\n    bottomSheetVisible,\n    optionLabel,\n    renderList,\n    otherText,\n\n    onChangeOtherText,\n    onChangeSearchText,\n\n    onCloseBottomSheet,\n    onOpenBottomSheet,\n    onConfirm,\n    onCancel,\n  };\n};\n\nexport default useDropdown;\n"]}