{"version":3,"sources":["useMatrixChoice.ts"],"names":["useState","useEffect","useRef","getRequiredType","i18n","matrixChoiceValidator","question","feedback","answers","requiredType","length","every","value","some","useMatrixChoice","onFeedback","questionId","questionTitles","collapseList","setCollapseList","Array","fill","selectedAnswer","setSelectedAnswer","hasEdited","matrixRequiredType","current","answer","type","onRowPress","rowIndex","previous","list","map","collapse","index","onColoumPress","coloumIndex","result","newAnswer","push","answerIndex","isAnswered","splice","sort","handleMatrixChoiceErrorHint","forgot","undefined","t"],"mappings":"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","sourcesContent":["import { useState, useEffect, useRef } from 'react';\nimport type { Question, QuestionType } from '../data';\nimport { getRequiredType } from '../utils/data';\nimport i18n from '../translation';\n\nexport interface MatrixChoiceFeedback {\n  questionId: string;\n  answers: number[][];\n  type: QuestionType;\n  otherFlag?: boolean;\n}\n\nexport const matrixChoiceValidator = (\n  question: Question,\n  feedback: MatrixChoiceFeedback\n): boolean => {\n  const { answers = [] } = feedback;\n  const requiredType = getRequiredType(question);\n  switch (requiredType) {\n    case 'all':\n      return answers.length > 1 && answers.every((value) => value[0] !== -1);\n    case 'one':\n      return answers.some((value) => value[0] !== -1);\n    default:\n      return true;\n  }\n};\n\nconst useMatrixChoice = (\n  question: Question,\n  feedback: MatrixChoiceFeedback,\n  onFeedback: (feedback: MatrixChoiceFeedback) => void\n) => {\n  const { questionId, questionTitles } = question;\n  const [collapseList, setCollapseList] = useState<boolean[]>(\n    Array(questionTitles.length).fill(true)\n  );\n\n  const [selectedAnswer, setSelectedAnswer] = useState<number[][]>(\n    feedback?.answers\n      ? feedback.answers\n      : new Array(questionTitles.length).fill(new Array(1).fill(-1))\n  );\n  const hasEdited = useRef(false);\n  const matrixRequiredType = getRequiredType(question);\n\n  useEffect(() => {\n    if (!hasEdited.current) {\n      hasEdited.current = selectedAnswer.some((answer) =>\n        answer.some((value) => value !== -1)\n      );\n    }\n    if (hasEdited.current || matrixRequiredType === 'none') {\n      onFeedback({\n        questionId: questionId,\n        answers: selectedAnswer,\n        type: 'matrixChoice',\n      });\n    }\n  }, [hasEdited, matrixRequiredType, onFeedback, questionId, selectedAnswer]);\n\n  const onRowPress = (rowIndex: number) => {\n    setCollapseList((previous) => {\n      const list = previous.map((collapse, index) => {\n        if (!collapse) {\n          return true;\n        } else {\n          return index !== rowIndex;\n        }\n      });\n      return list;\n    });\n  };\n\n  const onColoumPress = (rowIndex: number, coloumIndex: number) => {\n    setSelectedAnswer((previous) => {\n      const result: number[] = [];\n      const newAnswer = [...previous];\n      const answer = newAnswer[rowIndex];\n      if (answer[0] === -1) {\n        //not answer\n        result.push(coloumIndex);\n      } else {\n        let answerIndex = 0;\n        const isAnswered = answer.some((value, index) => {\n          if (value === coloumIndex) {\n            answerIndex = index;\n            return true;\n          }\n          return false;\n        });\n        if (isAnswered) {\n          //was answered\n          answer.splice(answerIndex, 1);\n          if (answer.length === 0) {\n            result.push(-1);\n          } else {\n            result.push(...answer);\n          }\n        } else {\n          //the answer is not include the answered\n          result.push(...answer);\n          result.push(coloumIndex);\n        }\n      }\n      if (result.length === 0) {\n        result.push(-1);\n      }\n      newAnswer[rowIndex] = result.sort();\n      return newAnswer;\n    });\n  };\n\n  const handleMatrixChoiceErrorHint = (forgot: boolean): string | undefined => {\n    if (!forgot) return undefined;\n    switch (matrixRequiredType) {\n      case 'all':\n        return i18n.t('survey:error-hint-required-all');\n      case 'one':\n        return i18n.t('survey:error-hint-least-one');\n      default:\n        return undefined;\n    }\n  };\n  return {\n    collapseList,\n    selectedAnswer,\n    handleMatrixChoiceErrorHint,\n    onRowPress,\n    onColoumPress,\n  };\n};\n\nexport default useMatrixChoice;\n"]}