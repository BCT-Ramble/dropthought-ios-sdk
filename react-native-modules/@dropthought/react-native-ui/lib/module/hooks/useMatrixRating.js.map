{"version":3,"sources":["useMatrixRating.ts"],"names":["useState","useEffect","getRequiredType","i18n","matrixRatingValidator","question","feedback","answers","matrixRequiredType","length","every","value","some","useMatrixRating","onFeedback","questionId","questionTitles","collapseList","setCollapseList","Array","fill","selectedAnswer","setSelectedAnswer","hasEdited","type","onRowPress","rowIndex","previous","list","map","collapse","index","onColoumPress","coloumIndex","answer","_","handleMatrixRatingErrorHint","forgot","undefined","t"],"mappings":"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","sourcesContent":["import { useState, useEffect } from 'react';\nimport type { Question, Feedback } from '../data';\nimport { getRequiredType } from '../utils/data';\nimport i18n from '../translation';\n\nexport const matrixRatingValidator = (\n  question: Question,\n  feedback: Feedback\n): boolean => {\n  const { answers = [] } = feedback;\n  const matrixRequiredType = getRequiredType(question);\n  switch (matrixRequiredType) {\n    case 'all':\n      return answers.length > 1 && answers.every((value) => value !== -1);\n    case 'one':\n      return answers.some((value) => value !== -1);\n    default:\n      return true;\n  }\n};\n\nconst useMatrixRating = (\n  question: Question,\n  feedback: Feedback,\n  onFeedback: (feedback: Feedback) => void\n) => {\n  const { questionId, questionTitles } = question;\n  const [collapseList, setCollapseList] = useState<boolean[]>(\n    Array(questionTitles.length).fill(true)\n  );\n\n  const [selectedAnswer, setSelectedAnswer] = useState<number[]>(\n    feedback?.answers\n      ? feedback.answers\n      : new Array(questionTitles.length).fill(-1)\n  );\n  const hasEdited = selectedAnswer.some((value) => value !== -1);\n  const matrixRequiredType = getRequiredType(question);\n\n  useEffect(() => {\n    if (hasEdited || matrixRequiredType === 'none') {\n      onFeedback({\n        questionId: questionId,\n        answers: selectedAnswer,\n        type: 'matrixRating',\n      });\n    }\n  }, [hasEdited, matrixRequiredType, onFeedback, questionId, selectedAnswer]);\n\n  const onRowPress = (rowIndex: number) => {\n    setCollapseList((previous) => {\n      const list = previous.map((collapse, index) => {\n        if (!collapse) {\n          return true;\n        } else {\n          return index !== rowIndex;\n        }\n      });\n      return list;\n    });\n  };\n\n  const onColoumPress = (rowIndex: number, coloumIndex: number) => {\n    setSelectedAnswer((previous) => {\n      const answers = previous.map((answer, index) =>\n        index === rowIndex ? coloumIndex : answer\n      );\n      return answers;\n    });\n    setCollapseList((previous) => {\n      const list = previous.map((_, index) => {\n        return index !== rowIndex + 1;\n      });\n      return list;\n    });\n  };\n\n  const handleMatrixRatingErrorHint = (forgot: boolean): string | undefined => {\n    if (!forgot) return undefined;\n    switch (matrixRequiredType) {\n      case 'all':\n        return i18n.t('survey:error-hint-required-all');\n      case 'one':\n        return i18n.t('survey:error-hint-least-one');\n      default:\n        return undefined;\n    }\n  };\n  return {\n    collapseList,\n    selectedAnswer,\n    handleMatrixRatingErrorHint,\n    onRowPress,\n    onColoumPress,\n  };\n};\n\nexport default useMatrixRating;\n"]}