{"version":3,"sources":["SkipLogic.js"],"names":["R","EvaluateRuleSet","getPageIdFromPageIndex","curry","pageIndex","survey","pipe","prop","nth","getPageIndexFromPageId","pageId","findIndex","equals","getRuleSetFromPageIndex","__","getPageFeedbacks","feedbacks","defaultPageFeedbacks","map","question","questionId","textOrIndexArr","defaultFeedback","realFeedback","find","f","isEmpty","answers","s","toString","otherFlag","type","nextPage","defaultNextPage","pageOrder","length","pageRuleSet","nextPageId"],"mappings":"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","sourcesContent":["import R from 'ramda';\nimport { EvaluateRuleSet } from './index';\n\n/**\n * return undefined if not existed\n * @type {(pageIndex: number, survey: Survey) => (string|undefined)}\n */\nexport const getPageIdFromPageIndex = R.curry((pageIndex, survey) =>\n  R.pipe(\n    //\n    R.prop('pageOrder'),\n    R.nth(pageIndex)\n  )(survey)\n);\n\n/**\n * return -1 if not existed\n * @type {(pageId: string, survey: Survey) => number}\n */\nexport const getPageIndexFromPageId = R.curry((pageId, survey) =>\n  R.pipe(\n    //\n    R.prop('pageOrder'),\n    R.findIndex(R.equals(pageId))\n  )(survey)\n);\n\n/**\n * return undefined if survey has no rules or rule not found for page\n * @type {(pageIndex: number, survey: Survey) => ([Rule]|undefined)}\n */\nconst getRuleSetFromPageIndex = (pageIndex, survey) =>\n  R.pipe(\n    // @ts-ignore\n    getPageIdFromPageIndex(pageIndex),\n    R.prop(R.__, R.prop('rules', survey))\n  )(survey);\n\n/**\n * only keep the feedbacks that belongs to a certain page\n * if a question is not answered => textOrIndexArr: ['']\n * also convert the answers to 0-based\n * @type {(pageIndex: number, survey: Survey, feedbacks: Feedback[]) => [IQAData]}\n */\nconst getPageFeedbacks = (pageIndex, survey, feedbacks) => {\n  // get the default page feedback\n  const defaultPageFeedbacks = R.pipe(\n    R.prop('pages'),\n    R.nth(pageIndex),\n    // @ts-ignore\n    R.prop('questions'),\n    R.map((question) => ({\n      questionId: question.questionId,\n      textOrIndexArr: [''],\n    }))\n  )(survey);\n\n  // if feedback has answers, use it to replace the default\n  return defaultPageFeedbacks.map((defaultFeedback) => {\n    const realFeedback = R.find(\n      (f) => f.questionId === defaultFeedback.questionId,\n      feedbacks\n    );\n    if (realFeedback && !R.isEmpty(realFeedback.answers)) {\n      return {\n        questionId: defaultFeedback.questionId,\n        textOrIndexArr: realFeedback.answers.map((s) => s.toString()),\n        otherFlag: realFeedback.otherFlag,\n        type: realFeedback.type,\n      };\n    }\n    return defaultFeedback;\n  });\n};\n\n/**\n * @param {number} pageIndex\n * @param {Feedback[]} feedbacks\n * @param {Survey} survey\n * @return {number} return -1 means jump to end\n */\nexport function nextPage(pageIndex, feedbacks, survey) {\n  const defaultNextPage = () =>\n    pageIndex >= survey.pageOrder.length - 1 ? -1 : pageIndex + 1;\n\n  const pageRuleSet = getRuleSetFromPageIndex(pageIndex, survey);\n  if (!pageRuleSet || R.isEmpty(pageRuleSet)) {\n    return defaultNextPage();\n  }\n  const nextPageId = EvaluateRuleSet(\n    pageRuleSet,\n    getPageFeedbacks(pageIndex, survey, feedbacks)\n  );\n  if (!nextPageId) {\n    return defaultNextPage();\n  }\n  return getPageIndexFromPageId(nextPageId, survey);\n}\n\n/** @typedef {import('../types/data').Survey} Survey */\n/** @typedef {import('../types/data').Rule} Rule */\n/** @typedef {import('../types/data').Feedback} Feedback */\n/** @typedef {import('./IfcRule').IQAData} IQAData */\n"]}