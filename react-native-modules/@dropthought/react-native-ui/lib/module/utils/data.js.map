{"version":3,"sources":["data.ts"],"names":["isEmpty","prop","pipe","findIndex","equals","curry","nth","map","isNil","EvaluateRuleSet","QuestionBrandType","Other","QuestionMetaDataType","Name","Email","Phone","Number","Date","String","getOptionsFromQuestion","question","options","option","index","isOther","title","placeholder","questionBrand","push","length","metaDataTypeQuestionValidator","value","type","metaDataType","reg","toLocaleLowerCase","test","mandatoryQuestionValidator","feedback","answers","otherFlag","mandatory","isAnswered","undefined","questionFeedbackValidator","getPageIndexFromPageId","pageId","survey","transformFeedbacks","pageIndex","feedbacksMap","defaultPageIQAData","questionId","textOrIndexArr","defaultIQAData","s","toString","nextPage","defaultNextPage","pageOrder","pageRuleSet","rules","iQADataArr","nextPageId","scaleLogic","option4FaceTable","option3LoopFaceTable","Map","require","option3TransformTable","option4LoopFaceTable","option4TransformTable"],"mappings":"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","sourcesContent":["import {\n  isEmpty,\n  prop,\n  pipe,\n  findIndex,\n  equals,\n  curry,\n  nth,\n  map,\n  isNil,\n} from 'ramda';\nimport { EvaluateRuleSet } from './dt-common-lib';\nimport type { Feedback, Question, Survey } from '../data';\n\n/** @enum {'other'} */\nexport const QuestionBrandType = {\n  Other: 'other',\n};\n\n/** @enum {'Date'|'Name'|'Email'|'Phone'|'Number'|'String'} */\nexport const QuestionMetaDataType = {\n  Name: 'name',\n  Email: 'email',\n  Phone: 'phone',\n  Number: 'number',\n  Date: 'date',\n  String: 'string',\n};\n\nexport type TransformOptionType = {\n  isOther: boolean;\n  title: string;\n  placeholder: string;\n  index: number;\n};\n\n/**\n * given a Question type, return ['option label1', 'option label2', 'option label3', true]\n * if the type is boolean at the last, it means it is an \"other\" option\n */\nexport const getOptionsFromQuestion = (\n  question: Question\n): TransformOptionType[] => {\n  // copy the original array\n  const options: TransformOptionType[] | [] = (question.options ?? []).map(\n    (option, index) => ({\n      isOther: false,\n      title: option,\n      placeholder: '',\n      index,\n    })\n  );\n  // add additional option when the question brand type is \"other\"\n  if (question.questionBrand === QuestionBrandType.Other) {\n    options.push({\n      isOther: true,\n      // @ts-ignore\n      title: '',\n      placeholder: '',\n      index: options.length,\n    });\n  }\n  // @ts-ignore\n  return options;\n};\n\n/**\n * validate if value match metaDataType question' rule\n */\nexport const metaDataTypeQuestionValidator = (\n  question: Question,\n  value: string\n): boolean => {\n  // if it is not a open ended or dropdown question no need to check, return valid\n  if (question.type !== 'open' && question.type !== 'dropdown') return true;\n\n  // no need to check the value when no value or no type\n  if (!value || !question.metaDataType) return true;\n\n  let reg = null;\n\n  switch (question.metaDataType.toLocaleLowerCase()) {\n    case QuestionMetaDataType.Number:\n      reg = /^\\d+$/; // if need negative integer someday, reg = /^-?\\d+$/\n      return reg.test(value);\n    case QuestionMetaDataType.Date:\n      reg =\n        /^((?:\\d{4}-\\d{2}-\\d{2})|(?:\\d{4}\\/\\d{2}\\/\\d{2})|(?:\\d{4}:\\d{2}:\\d{2}))?( )?(\\d{2}:\\d{2}:\\d{2})?$/;\n      return reg.test(value);\n    case QuestionMetaDataType.Phone:\n      reg = /^\\+[1-9]\\d{1,14}$/;\n      return reg.test(value);\n    case QuestionMetaDataType.Email:\n      reg =\n        /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n      return reg.test(value);\n    default:\n      // no need to check the value\n      return true;\n  }\n};\n\n/**\n * if mandatory question has feedback\n */\nexport const mandatoryQuestionValidator = (\n  question: Question,\n  feedback: Feedback | {} = {}\n): boolean => {\n  // @ts-ignore\n  const { answers, otherFlag } = feedback;\n  if (!question.mandatory) {\n    if (\n      otherFlag &&\n      answers.length > 0 &&\n      (isEmpty(answers[answers.length - 1]) ||\n        isNil(answers[answers.length - 1]))\n    ) {\n      return false;\n    }\n    return true;\n  }\n  // check if feedback has answer\n  const isAnswered =\n    answers !== undefined &&\n    answers.length > 0 &&\n    !isEmpty(answers[answers.length - 1]) &&\n    !isNil(answers[answers.length - 1]);\n\n  return isAnswered;\n};\n\n/**\n * validate if question's feedback is valid:\n * metadata type value check, mandatory check\n */\nexport const questionFeedbackValidator = (\n  question: Question | {} = {},\n  feedback: Feedback | {} = {}\n): boolean => {\n  return (\n    // @ts-ignore\n    metaDataTypeQuestionValidator(question, feedback.answers?.[0]) &&\n    // @ts-ignore\n    mandatoryQuestionValidator(question, feedback)\n  );\n};\n\n/**\n * return -1 if not existed\n * @type {(pageId: string, survey: Survey) => number}\n */\nexport const getPageIndexFromPageId = curry((pageId: string, survey: Survey) =>\n  // @ts-ignore\n  pipe(prop('pageOrder'), findIndex(equals(pageId)))(survey)\n);\n\n/**\n * only keep the feedbacks that belongs to a certain page\n * if a question is not answered => textOrIndexArr: ['']\n * also convert the answers to 0-based\n * transform it to IQAData type\n * @type {(pageIndex: number, survey: Survey, feedbacksMap: {[questionId: string]: Feedback} ) => [IQAData]}\n */\nconst transformFeedbacks = (\n  pageIndex: number,\n  survey: Survey,\n  feedbacksMap: { [questionId: string]: Feedback }\n) => {\n  // get the default page IQAData\n  /** @type {IQAData[]} */\n  const defaultPageIQAData = pipe(\n    prop('pages'),\n    // @ts-ignore\n    nth(pageIndex),\n    prop('questions'),\n    map((question) => ({\n      // @ts-ignore\n      questionId: question.questionId,\n      textOrIndexArr: [''],\n    }))\n    // @ts-ignore\n  )(survey);\n\n  // if feedback has answers, use it to replace the default\n  return defaultPageIQAData.map((defaultIQAData) => {\n    const feedback = feedbacksMap[defaultIQAData.questionId];\n    if (feedback && !isEmpty(feedback.answers)) {\n      return {\n        questionId: defaultIQAData.questionId,\n        // @ts-ignore\n        textOrIndexArr: feedback.answers.map((s) => s.toString()),\n        otherFlag: feedback.otherFlag,\n      };\n    }\n    return defaultIQAData;\n  });\n};\n\nexport function nextPage(\n  pageIndex: number,\n  pageId: string,\n  feedbacksMap: { [questionId: string]: Feedback },\n  survey: Survey\n): number {\n  const defaultNextPage = () =>\n    pageIndex >= survey.pageOrder.length - 1 ? -1 : pageIndex + 1;\n\n  // if there's no rule, go to default next page\n  const pageRuleSet = survey.rules[pageId];\n  if (!pageRuleSet || isEmpty(pageRuleSet)) {\n    return defaultNextPage();\n  }\n\n  // apply the rule\n  const iQADataArr = transformFeedbacks(pageIndex, survey, feedbacksMap);\n  const nextPageId = EvaluateRuleSet(pageRuleSet, iQADataArr);\n  if (!nextPageId) {\n    return defaultNextPage();\n  }\n\n  // next page index\n  return getPageIndexFromPageId(nextPageId, survey);\n}\n\nexport const scaleLogic: {\n  [name in string]: number[];\n} = {\n  '2': [0, 4],\n  '3': [0, 2, 4],\n  '4': [0, 2, 3, 4],\n  '5': [0, 1, 2, 3, 4],\n};\n\nexport const option4FaceTable = ['A', 'B', 'C', 'D', 'E'];\n\nexport const option3LoopFaceTable = new Map([\n  [\n    '1',\n    require('../assets/animations/smiley_option3/option3_smile_1_loop.json'),\n  ],\n  [\n    '2',\n    require('../assets/animations/smiley_option3/option3_smile_2_loop.json'),\n  ],\n  [\n    '3',\n    require('../assets/animations/smiley_option3/option3_smile_3_loop.json'),\n  ],\n  [\n    '4',\n    require('../assets/animations/smiley_option3/option3_smile_4_loop.json'),\n  ],\n  [\n    '5',\n    require('../assets/animations/smiley_option3/option3_smile_5_loop.json'),\n  ],\n]);\n\nexport const option3TransformTable = new Map([\n  [\n    '1-2',\n    require('../assets/animations/smiley_option3/option3_smile_1-2_transform.json'),\n  ],\n  [\n    '2-3',\n    require('../assets/animations/smiley_option3/option3_smile_2-3_transform.json'),\n  ],\n  [\n    '3-4',\n    require('../assets/animations/smiley_option3/option3_smile_3-4_transform.json'),\n  ],\n  [\n    '4-5',\n    require('../assets/animations/smiley_option3/option3_smile_4-5_transform.json'),\n  ],\n  [\n    '1-3',\n    require('../assets/animations/smiley_option3/option3_smile_1-3_transform.json'),\n  ],\n  [\n    '1-5',\n    require('../assets/animations/smiley_option3/option3_smile_1-5_transform.json'),\n  ],\n  [\n    '3-5',\n    require('../assets/animations/smiley_option3/option3_smile_3-5_transform.json'),\n  ],\n]);\n\nexport const option4LoopFaceTable = new Map([\n  ['1A', require('../assets/animations/smiley_option4/1A.json')],\n  ['2B', require('../assets/animations/smiley_option4/2B.json')],\n  ['2C', require('../assets/animations/smiley_option4/2C.json')],\n  ['2E', require('../assets/animations/smiley_option4/2E.json')],\n  ['3C', require('../assets/animations/smiley_option4/3C.json')],\n  ['3D', require('../assets/animations/smiley_option4/3D.json')],\n  ['3E', require('../assets/animations/smiley_option4/3E.json')],\n  ['4D', require('../assets/animations/smiley_option4/4D.json')],\n  ['4E', require('../assets/animations/smiley_option4/4E.json')],\n  ['5E', require('../assets/animations/smiley_option4/5E.json')],\n]);\nexport const option4TransformTable = new Map([\n  ['1A-2B', require('../assets/animations/smiley_option4/1A-2B.json')],\n  ['2B-3C', require('../assets/animations/smiley_option4/2B-3C.json')],\n  ['3C-4D', require('../assets/animations/smiley_option4/3C-4D.json')],\n  ['4D-5E', require('../assets/animations/smiley_option4/4D-5E.json')],\n  ['1A-2E', require('../assets/animations/smiley_option4/1A-2E.json')],\n  ['1A-2C', require('../assets/animations/smiley_option4/1A-2C.json')],\n  ['2C-3E', require('../assets/animations/smiley_option4/2C-3E.json')],\n  ['2C-3D', require('../assets/animations/smiley_option4/2C-3D.json')],\n  ['3D-4E', require('../assets/animations/smiley_option4/3D-4E.json')],\n]);\n\n/** @typedef {import('./dt-common-lib/IfcRule').IQAData} IQAData */\n"]}