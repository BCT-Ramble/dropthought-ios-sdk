{"version":3,"sources":["DraggableItem.tsx"],"names":["React","useEffect","useRef","useState","Animated","PanResponder","DraggableItem","children","index","onDragStart","onDrag","onDragEnd","onLayout","forceReset","movements","draggable","isDragging","setIsDragging","isDraggingRef","longPressTimeout","pan","ValueXY","panResponder","create","onStartShouldSetPanResponder","onPanResponderStart","_e","_gestureState","onPanResponderGrant","_gesture","current","setTimeout","setOffset","x","_value","y","setValue","onPanResponderMove","_","gesture","dy","onPanResponderRelease","clearTimeout","onPanResponderTerminate","shouldMoveRef","spring","toValue","useNativeDriver","start","panStyle","transform","getTranslateTransform","zIndex","draggingStyle","opacity","panHandlers","memo"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,MAA3B,EAAmCC,QAAnC,QAAmD,OAAnD;AACA,SAASC,QAAT,EAAmBC,YAAnB,QAA0D,cAA1D;;AAcA,SAASC,aAAT,CAAuB;AACrBC,EAAAA,QADqB;AAErBC,EAAAA,KAFqB;AAGrBC,EAAAA,WAHqB;AAIrBC,EAAAA,MAJqB;AAKrBC,EAAAA,SALqB;AAMrBC,EAAAA,QANqB;AAOrBC,EAAAA,UAPqB;AAQrBC,EAAAA,SARqB;AASrBC,EAAAA;AATqB,CAAvB,EAUuB;AACrB,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8Bd,QAAQ,CAAC,KAAD,CAA5C;AACA,QAAMe,aAAa,GAAGhB,MAAM,CAAC,KAAD,CAA5B;AAEA,QAAMiB,gBAAgB,GAAGjB,MAAM,EAA/B;AAEA,QAAMkB,GAAG,GAAGjB,QAAQ,CAAC,IAAIC,QAAQ,CAACiB,OAAb,EAAD,CAAR,CAAiC,CAAjC,CAAZ;AACA,QAAMC,YAAY,GAAGpB,MAAM,CACzBG,YAAY,CAACkB,MAAb,CAAoB;AAClBC,IAAAA,4BAA4B,EAAE,MAAM;AAClC,aAAOT,SAAP;AACD,KAHiB;AAIlBU,IAAAA,mBAAmB,EAAE,CAACC,EAAD,EAAKC,aAAL,KAAuB;AAC1ClB,MAAAA,WAAW;AACZ,KANiB;AAOlBmB,IAAAA,mBAAmB,EAAE,CAACF,EAAD,EAAKG,QAAL,KAAkB;AACrCV,MAAAA,gBAAgB,CAACW,OAAjB,GAA2BC,UAAU,CAAC,MAAM;AAC1Cd,QAAAA,aAAa,CAAC,IAAD,CAAb;AACAC,QAAAA,aAAa,CAACY,OAAd,GAAwB,IAAxB,CAF0C,CAG1C;;AACAV,QAAAA,GAAG,CAACY,SAAJ,CAAc;AAAEC,UAAAA,CAAC,EAAEb,GAAG,CAACa,CAAJ,CAAMC,MAAX;AAAmBC,UAAAA,CAAC,EAAEf,GAAG,CAACe,CAAJ,CAAMD;AAA5B,SAAd;AACAd,QAAAA,GAAG,CAACgB,QAAJ,CAAa;AAAEH,UAAAA,CAAC,EAAE,CAAL;AAAQE,UAAAA,CAAC,EAAE;AAAX,SAAb;AACD,OANoC,EAMlC,GANkC,CAArC;AAOD,KAfiB;AAgBlBE,IAAAA,kBAAkB,EAAE,CAACC,CAAD,EAAIC,OAAJ,KAAgB;AAClC,UAAIrB,aAAa,CAACY,OAAlB,EAA2B;AACzBpB,QAAAA,MAAM,IAAIA,MAAM,CAACU,GAAD,EAAMmB,OAAO,CAACC,EAAd,CAAhB;AACD;AACF,KApBiB;AAqBlBC,IAAAA,qBAAqB,EAAE,CAACf,EAAD,EAAKG,QAAL,KAAkB;AACvC,UAAIV,gBAAgB,CAACW,OAArB,EAA8B;AAC5BY,QAAAA,YAAY,CAACvB,gBAAgB,CAACW,OAAlB,CAAZ;AACD;;AACD,UAAIZ,aAAa,CAACY,OAAlB,EAA2B;AACzBb,QAAAA,aAAa,CAAC,KAAD,CAAb;AACAC,QAAAA,aAAa,CAACY,OAAd,GAAwB,KAAxB;AACAnB,QAAAA,SAAS,IAAIA,SAAS,CAACS,GAAD,CAAtB;AACD;AACF,KA9BiB;;AA+BlBuB,IAAAA,uBAAuB,CAACjB,EAAD,EAAKC,aAAL,EAAoB;AACzC,UAAIR,gBAAgB,CAACW,OAArB,EAA8B;AAC5BY,QAAAA,YAAY,CAACvB,gBAAgB,CAACW,OAAlB,CAAZ;AACD;AACF;;AAnCiB,GAApB,CADyB,CAA3B;AAwCA,QAAMc,aAAa,GAAG1C,MAAM,CAACY,SAAD,CAA5B;AACAb,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI2C,aAAa,CAACd,OAAd,KAA0B,CAA1B,IAA+BhB,SAAS,KAAK,CAAjD,EAAoD;AAClD8B,MAAAA,aAAa,CAACd,OAAd,GAAwBhB,SAAxB;AACAV,MAAAA,QAAQ,CAACyC,MAAT,CAAgBzB,GAAhB,EAAqB;AACnB0B,QAAAA,OAAO,EAAE;AAAEb,UAAAA,CAAC,EAAE,CAAL;AAAQE,UAAAA,CAAC,EAAErB;AAAX,SADU;AAEnBiC,QAAAA,eAAe,EAAE;AAFE,OAArB,EAGGC,KAHH;AAID,KAND,MAMO,IAAIJ,aAAa,CAACd,OAAd,KAA0B,CAA1B,IAA+BhB,SAAS,KAAK,CAAjD,EAAoD;AACzD8B,MAAAA,aAAa,CAACd,OAAd,GAAwBhB,SAAxB;AACAV,MAAAA,QAAQ,CAACyC,MAAT,CAAgBzB,GAAhB,EAAqB;AACnB0B,QAAAA,OAAO,EAAE;AAAEb,UAAAA,CAAC,EAAE,CAAL;AAAQE,UAAAA,CAAC,EAAErB;AAAX,SADU;AAEnBiC,QAAAA,eAAe,EAAE;AAFE,OAArB,EAGGC,KAHH;AAID;AACF,GAdQ,EAcN,CAAC5B,GAAD,EAAMN,SAAN,EAAiBN,KAAjB,CAdM,CAAT;AAgBAP,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIY,UAAJ,EAAgB;AACdO,MAAAA,GAAG,CAACgB,QAAJ,CAAa;AAAEH,QAAAA,CAAC,EAAE,CAAL;AAAQE,QAAAA,CAAC,EAAE;AAAX,OAAb;AACD;AACF,GAJQ,EAIN,CAACtB,UAAD,EAAaO,GAAb,CAJM,CAAT;AAMA,QAAM6B,QAAQ,GAAG;AACfC,IAAAA,SAAS,EAAE9B,GAAG,CAAC+B,qBAAJ,EADI;AAEfC,IAAAA,MAAM,EAAE;AAFO,GAAjB;AAKA,QAAMC,aAAa,GAAG;AACpBD,IAAAA,MAAM,EAAEpC,UAAU,GAAG,CAAH,GAAO,CADL;AAEpBsC,IAAAA,OAAO,EAAEtC,UAAU,GAAG,GAAH,GAAS;AAFR,GAAtB;AAIA,sBACE,oBAAC,QAAD,CAAU,IAAV,eACMM,YAAY,CAACQ,OAAb,CAAqByB,WAD3B;AAEE,IAAA,KAAK,EAAE,CACLN,QADK,EAELI,aAFK,EAGL;AAAEH,MAAAA,SAAS,EAAE9B,GAAG,CAAC+B,qBAAJ;AAAb,KAHK,CAFT;AAOE,IAAA,QAAQ,EAAEvC;AAPZ,MASGL,QATH,CADF;AAaD;;AAED,4BAAeP,KAAK,CAACwD,IAAN,CAAWlD,aAAX,CAAf","sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport { Animated, PanResponder, LayoutChangeEvent } from 'react-native';\n\ntype DraggableItemProps = {\n  children: React.ReactNode;\n  index: number;\n  onDragStart: () => void;\n  onDrag: (pan: Animated.ValueXY, y: number) => void;\n  onDragEnd: (pan: Animated.ValueXY) => void;\n  onLayout: (event: LayoutChangeEvent) => void;\n  forceReset: boolean;\n  movements: number;\n  draggable: boolean;\n};\n\nfunction DraggableItem({\n  children,\n  index,\n  onDragStart,\n  onDrag,\n  onDragEnd,\n  onLayout,\n  forceReset,\n  movements,\n  draggable,\n}: DraggableItemProps) {\n  const [isDragging, setIsDragging] = useState(false);\n  const isDraggingRef = useRef(false);\n\n  const longPressTimeout = useRef<NodeJS.Timeout>();\n\n  const pan = useState(new Animated.ValueXY())[0];\n  const panResponder = useRef(\n    PanResponder.create({\n      onStartShouldSetPanResponder: () => {\n        return draggable;\n      },\n      onPanResponderStart: (_e, _gestureState) => {\n        onDragStart();\n      },\n      onPanResponderGrant: (_e, _gesture) => {\n        longPressTimeout.current = setTimeout(() => {\n          setIsDragging(true);\n          isDraggingRef.current = true;\n          //@ts-ignore\n          pan.setOffset({ x: pan.x._value, y: pan.y._value });\n          pan.setValue({ x: 0, y: 0 });\n        }, 200);\n      },\n      onPanResponderMove: (_, gesture) => {\n        if (isDraggingRef.current) {\n          onDrag && onDrag(pan, gesture.dy);\n        }\n      },\n      onPanResponderRelease: (_e, _gesture) => {\n        if (longPressTimeout.current) {\n          clearTimeout(longPressTimeout.current);\n        }\n        if (isDraggingRef.current) {\n          setIsDragging(false);\n          isDraggingRef.current = false;\n          onDragEnd && onDragEnd(pan);\n        }\n      },\n      onPanResponderTerminate(_e, _gestureState) {\n        if (longPressTimeout.current) {\n          clearTimeout(longPressTimeout.current);\n        }\n      },\n    })\n  );\n\n  const shouldMoveRef = useRef(movements);\n  useEffect(() => {\n    if (shouldMoveRef.current !== 0 && movements === 0) {\n      shouldMoveRef.current = movements;\n      Animated.spring(pan, {\n        toValue: { x: 0, y: movements },\n        useNativeDriver: true,\n      }).start();\n    } else if (shouldMoveRef.current === 0 && movements !== 0) {\n      shouldMoveRef.current = movements;\n      Animated.spring(pan, {\n        toValue: { x: 0, y: movements },\n        useNativeDriver: true,\n      }).start();\n    }\n  }, [pan, movements, index]);\n\n  useEffect(() => {\n    if (forceReset) {\n      pan.setValue({ x: 0, y: 0 });\n    }\n  }, [forceReset, pan]);\n\n  const panStyle = {\n    transform: pan.getTranslateTransform(),\n    zIndex: 0,\n  };\n\n  const draggingStyle = {\n    zIndex: isDragging ? 2 : 0,\n    opacity: isDragging ? 0.3 : 1,\n  };\n  return (\n    <Animated.View\n      {...panResponder.current.panHandlers}\n      style={[\n        panStyle,\n        draggingStyle,\n        { transform: pan.getTranslateTransform() },\n      ]}\n      onLayout={onLayout}\n    >\n      {children}\n    </Animated.View>\n  );\n}\n\nexport default React.memo(DraggableItem);\n"]}