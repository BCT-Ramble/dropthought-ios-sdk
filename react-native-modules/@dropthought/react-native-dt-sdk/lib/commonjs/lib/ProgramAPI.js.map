{"version":3,"names":["_APIClient","require","PROGRAM_PATH","apiGetProgramById","programId","language","timezone","requestConfig","fetcher","fetcherInstance","params","method","authRequired","url","request","then","response","data","result"],"sources":["ProgramAPI.js"],"sourcesContent":["import {fetcherInstance} from './APIClient'\n\nconst PROGRAM_PATH = '/api/program'\n\n/**\n * get single language version of a program by id\n * @param {{\n *   programId: string,\n *   language?: string,\n *   timezone?: string,\n * }} param0\n * @param {RequestConfig} requestConfig\n * @param {Fetcher=} fetcher\n * @returns {Promise<Survey>}\n */\nexport async function apiGetProgramById(\n    {programId, language = 'en', timezone},\n    requestConfig = {},\n    fetcher = fetcherInstance,\n) {\n    /** @type {RequestConfig} */\n    const params = {\n        method: 'GET',\n        authRequired: true,\n        params: {\n            language,\n            timezone,\n        },\n        ...requestConfig,\n    }\n\n    const url = `${PROGRAM_PATH}/${programId}`\n    return fetcher.request(url, params).then((response) => {\n        return response.data.result\n    })\n}\n\n/**\n * @typedef {import('./Fetcher').RequestConfig} RequestConfig\n * @typedef {import('./Fetcher').Fetcher} Fetcher\n * @typedef {import('../data').Survey} Survey\n * @typedef {import('../data').SurveyLangMaps} SurveyLangMaps\n */\n"],"mappings":";;;;;;AAAA,IAAAA,UAAA,GAAAC,OAAA;AAEA,MAAMC,YAAY,GAAG,cAAc;;AAEnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,eAAeC,iBAAiBA,CACnC;EAACC,SAAS;EAAEC,QAAQ,GAAG,IAAI;EAAEC;AAAQ,CAAC,EACtCC,aAAa,GAAG,CAAC,CAAC,EAClBC,OAAO,GAAGC,0BAAe,EAC3B;EACE;EACA,MAAMC,MAAM,GAAG;IACXC,MAAM,EAAE,KAAK;IACbC,YAAY,EAAE,IAAI;IAClBF,MAAM,EAAE;MACJL,QAAQ;MACRC;IACJ,CAAC;IACD,GAAGC;EACP,CAAC;EAED,MAAMM,GAAG,GAAI,GAAEX,YAAa,IAAGE,SAAU,EAAC;EAC1C,OAAOI,OAAO,CAACM,OAAO,CAACD,GAAG,EAAEH,MAAM,CAAC,CAACK,IAAI,CAAEC,QAAQ,IAAK;IACnD,OAAOA,QAAQ,CAACC,IAAI,CAACC,MAAM;EAC/B,CAAC,CAAC;AACN;;AAEA;AACA;AACA;AACA;AACA;AACA"}