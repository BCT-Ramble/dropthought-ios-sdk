{"version":3,"names":["_react","_interopRequireDefault","require","_src","_ErrorHintScreen","_survey","_DateTimerParser","obj","__esModule","default","checkSurveyStatus","surveyState","surveyStartDate","surveyEndDate","imageType","PlaceholderImageTypes","ProgramExpired","ProgramScheduled","ProgramDeactivated","ProgramUnavailable","now","Date","StartScreen","props","onStart","onClose","survey","changeLanguage","useSurveyContext","state","surveyEndDateStr","surveyStartDateStr","fromAPIDateStrToJS","onLanguageSelectHandler","React","useCallback","language","createElement","PlaceholderScreen","message","i18n","t","StartScreenLayout","onLanguageSelect","_default","exports"],"sources":["StartScreen.js"],"sourcesContent":["import React from 'react';\nimport {\n  StartScreenLayout,\n  PlaceholderImageTypes,\n  PlaceholderScreen,\n  i18n,\n} from '@dropthought/react-native-ui/src';\nimport ErrorHintScreen from './ErrorHintScreen';\nimport { useSurveyContext } from '../contexts/survey';\nimport { fromAPIDateStrToJS } from '../../lib/DateTimerParser';\n\n/**\n *\n * @param {import('../../data').ProgramStateType} surveyState\n * @param {Date} surveyStartDate\n * @param {Date} surveyEndDate\n */\nconst checkSurveyStatus = (surveyState, surveyStartDate, surveyEndDate) => {\n  let imageType;\n  switch (surveyState) {\n    case 'active':\n      imageType = null;\n      break;\n    case 'expired':\n      imageType = PlaceholderImageTypes.ProgramExpired;\n      break;\n    case 'scheduled':\n      imageType = PlaceholderImageTypes.ProgramScheduled;\n      break;\n    case 'inactive':\n      imageType = PlaceholderImageTypes.ProgramDeactivated;\n      break;\n    case 'drafts':\n    default:\n      imageType = PlaceholderImageTypes.ProgramUnavailable;\n  }\n  // still need to check the start-end time\n  if (!imageType) {\n    const now = new Date();\n    if (now < surveyStartDate) {\n      imageType = PlaceholderImageTypes.ProgramScheduled;\n    } else if (now > surveyEndDate) {\n      imageType = PlaceholderImageTypes.ProgramExpired;\n    }\n  }\n  return imageType;\n};\n\n/**\n * @type {React.FunctionComponent<ScreenProps>}\n * @param {ScreenProps} props\n */\nconst StartScreen = (props) => {\n  const { onStart, onClose } = props;\n  const { survey, changeLanguage } = useSurveyContext();\n  const {\n    state: surveyState,\n    surveyEndDate: surveyEndDateStr,\n    surveyStartDate: surveyStartDateStr,\n  } = survey;\n  const surveyStartDate = fromAPIDateStrToJS(surveyStartDateStr);\n  const surveyEndDate = fromAPIDateStrToJS(surveyEndDateStr);\n\n  const onLanguageSelectHandler = React.useCallback(\n    (language) => {\n      changeLanguage(language);\n    },\n    [changeLanguage]\n  );\n\n  // render placeholder\n  const imageType = checkSurveyStatus(\n    surveyState,\n    surveyStartDate,\n    surveyEndDate\n  );\n  if (imageType) {\n    // need to render placeholder\n    return (\n      <ErrorHintScreen onClose={onClose}>\n        <PlaceholderScreen\n          imageType={imageType}\n          message={i18n.t('start-survey:placeholder-message')}\n        />\n      </ErrorHintScreen>\n    );\n  }\n\n  return (\n    <StartScreenLayout\n      survey={survey}\n      onClose={onClose}\n      onStart={onStart}\n      onLanguageSelect={onLanguageSelectHandler}\n    />\n  );\n};\n\nexport default StartScreen;\n\n/**\n * @typedef {Object} ScreenProps\n * @property {() => void} onStart\n * @property {() => void} onClose\n */\n"],"mappings":"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"}