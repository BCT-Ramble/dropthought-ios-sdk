{"version":3,"sources":["SurveyStack.tsx"],"names":["noData","a","Stack","preview","survey","onClose","themeColor","surveyProperty","hexCode","visiblePageIds","setVisiblePageIds","endScreenvisible","setEndScreenvisible","surveyFeedback","setSurveyFeedback","undefined","error","setError","metadata","run","isPending","loading","deferFn","submitFeedback","onResolve","onReject","rejectedError","handleNextPage","nextPageIndex","pageOrder","length","prevPageIds","nextPageId","filter","prevPageId","handleStart","handlePrevPage","slice","handleSubmit","feedback","timeZone","NativeModules","DtSdk","getConstants","createdTime","Date","now","isUploading","setIsUploading","handleUpload","file","url","reason","styles","flexOne","surveyName","map","pageId","pageIndex","includes","SurveyStack","pages","surveyStartDate","surveyEndDate","PlaceholderImageTypes","ProgramUnavailable","i18n","t","StyleSheet","create","flex"],"mappings":"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","sourcesContent":["import React, { useCallback, useState } from 'react';\nimport { View, StyleSheet, NativeModules } from 'react-native';\nimport { isEmpty, isNil } from 'ramda';\nimport {\n  PlaceholderImageTypes,\n  PlaceholderScreen,\n  i18n,\n  SurveyScreenLayout,\n  ActivityIndicatorMask,\n} from '@dropthought/react-native-ui';\nimport { useAsync } from 'react-async';\nimport { useMetadata } from '../contexts/custom-props';\nimport StartScreen from '../screens/StartScreen';\nimport EndScreen from '../screens/EndScreen';\nimport FakeScreen from '../screens/FakeScreen';\nimport { useSurveyContext } from '../contexts/survey';\nimport { submitFeedback } from '../../lib/Feedback';\nimport ScreenWrapper from './ScreenWrapper';\nimport Header from './Header';\nimport { fromJSToAPIDateStr } from '../../lib/DateTimerParser';\nimport { uploadPicture } from '../../lib/UploadPicture';\nimport type { ImageFormData } from '../../lib/UploadFileAPI';\n\ntype StackProps = {\n  preview: boolean;\n};\n\nconst noData = (a: any) => isNil(a) || isEmpty(a);\n\nconst Stack: React.FunctionComponent<StackProps> = ({ preview }) => {\n  const { survey, onClose } = useSurveyContext();\n  const themeColor = survey.surveyProperty.hexCode;\n  const [visiblePageIds, setVisiblePageIds] = useState([]);\n  const [endScreenvisible, setEndScreenvisible] = useState(false);\n  const [surveyFeedback, setSurveyFeedback] = useState(undefined);\n  const [error, setError] = useState<Error | undefined>();\n  const metadata = useMetadata();\n  const { run, isPending: loading } = useAsync({\n    deferFn: submitFeedback,\n    onResolve: () => {\n      setEndScreenvisible(true);\n    },\n    onReject: (rejectedError) => {\n      setError(rejectedError);\n      setEndScreenvisible(true);\n    },\n  });\n\n  const handleNextPage = useCallback(\n    (nextPageIndex) => {\n      if (nextPageIndex < survey.pageOrder.length) {\n        setVisiblePageIds((prevPageIds) => {\n          const nextPageId = survey.pageOrder[nextPageIndex];\n          return [\n            ...prevPageIds.filter(\n              (prevPageId: string) => prevPageId !== nextPageId\n            ),\n            nextPageId,\n          ];\n        });\n      }\n    },\n    [survey.pageOrder]\n  );\n\n  const handleStart = useCallback(() => {\n    handleNextPage(0);\n  }, [handleNextPage]);\n\n  const handlePrevPage = useCallback(() => {\n    setVisiblePageIds((prevPageIds) => prevPageIds.slice(0, -1));\n  }, []);\n\n  const handleSubmit = useCallback(\n    (feedback) => {\n      if (preview) {\n        setEndScreenvisible(true);\n      } else {\n        const { timeZone } = NativeModules.DtSdk.getConstants();\n        setSurveyFeedback(feedback);\n        run({\n          ...feedback,\n          metadata,\n          createdTime: fromJSToAPIDateStr(Date.now()),\n          timeZone,\n        });\n      }\n    },\n    [metadata, preview, run]\n  );\n\n  const [isUploading, setIsUploading] = useState(false);\n  const handleUpload = async (file: ImageFormData) => {\n    if (file) {\n      setIsUploading(true);\n      try {\n        const { url } = await uploadPicture(file);\n        setIsUploading(false);\n        return url;\n      } catch (reason) {\n        setIsUploading(false);\n        return undefined;\n      }\n    } else {\n      return undefined;\n    }\n  };\n\n  return (\n    <View style={styles.flexOne}>\n      <Header\n        title={survey.surveyName}\n        onClose={onClose}\n        themeColor={themeColor}\n      />\n      <View style={styles.flexOne}>\n        <ScreenWrapper\n          visible\n          isOnTop={!endScreenvisible && visiblePageIds.length === 0}\n        >\n          <StartScreen onStart={handleStart} onClose={onClose} />\n        </ScreenWrapper>\n        {survey.pageOrder.map((pageId: string, pageIndex: number) => {\n          return (\n            <ScreenWrapper\n              key={pageId}\n              visible={visiblePageIds.includes(pageId)}\n              isOnTop={visiblePageIds[visiblePageIds.length - 1] === pageId}\n            >\n              <SurveyScreenLayout\n                survey={survey}\n                pageIndex={pageIndex}\n                onClose={onClose}\n                onNextPage={handleNextPage}\n                onPrevPage={handlePrevPage}\n                onSubmit={handleSubmit}\n                onUpload={handleUpload}\n                isUploading={isUploading}\n              />\n            </ScreenWrapper>\n          );\n        })}\n        <ScreenWrapper visible={endScreenvisible} isOnTop={endScreenvisible}>\n          <EndScreen\n            error={error}\n            surveyFeedback={surveyFeedback}\n            onClose={onClose}\n          />\n        </ScreenWrapper>\n      </View>\n      <ActivityIndicatorMask loading={loading} />\n    </View>\n  );\n};\n\ntype SurveyStackProps = {\n  preview: boolean;\n};\n\nconst SurveyStack: React.FunctionComponent<SurveyStackProps> = ({\n  preview,\n}) => {\n  const { survey, onClose } = useSurveyContext();\n  // check if survey data is valid\n  if (\n    noData(survey.pages) ||\n    noData(survey.surveyProperty) ||\n    noData(survey.surveyStartDate) ||\n    noData(survey.surveyEndDate)\n  ) {\n    // need to render placeholder\n    return (\n      <FakeScreen onClose={onClose}>\n        <PlaceholderScreen\n          imageType={PlaceholderImageTypes.ProgramUnavailable}\n          message={i18n.t('start-survey:placeholder-message')}\n        />\n      </FakeScreen>\n    );\n  }\n  return <Stack preview={preview} />;\n};\n\nexport default SurveyStack;\n\nconst styles = StyleSheet.create({\n  flexOne: {\n    flex: 1,\n  },\n});\n"]}