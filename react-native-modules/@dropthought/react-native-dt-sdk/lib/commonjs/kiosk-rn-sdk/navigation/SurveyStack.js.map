{"version":3,"names":["_react","_interopRequireWildcard","require","_reactNative","_ramda","_src","_reactAsync","_customProps","_StartScreen","_interopRequireDefault","_EndScreen","_ErrorHintScreen","_survey","_Feedback","_ScreenWrapper","_Header","_DateTimerParser","_UploadPicture","obj","__esModule","default","_getRequireWildcardCache","e","WeakMap","r","t","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","prototype","hasOwnProperty","call","i","set","noData","isNil","isEmpty","Stack","preview","survey","onClose","useSurveyContext","themeColor","surveyProperty","hexCode","visiblePageIds","setVisiblePageIds","useState","endScreenvisible","setEndScreenvisible","surveyFeedback","setSurveyFeedback","undefined","error","setError","metadata","useMetadata","run","isPending","loading","useAsync","deferFn","submitFeedback","onResolve","onReject","rejectedError","handleNextPage","useCallback","nextPageIndex","pageOrder","length","prevPageIds","nextPageId","filter","prevPageId","handleStart","handlePrevPage","slice","handleSubmit","feedback","timeZone","NativeModules","DtSdk","getConstants","createdTime","fromJSToAPIDateStr","Date","now","isUploading","setIsUploading","handleUpload","file","url","uploadPicture","reason","createElement","View","style","styles","flexOne","title","surveyName","visible","isOnTop","rtl","language","onStart","map","pageId","pageIndex","key","includes","SurveyScreenLayout","onNextPage","onPrevPage","onSubmit","onUpload","ActivityIndicatorMask","SurveyStack","pages","surveyStartDate","surveyEndDate","PlaceholderScreen","imageType","PlaceholderImageTypes","ProgramUnavailable","message","i18n","_default","exports","StyleSheet","create","flex"],"sources":["SurveyStack.tsx"],"sourcesContent":["import React, { useCallback, useState } from 'react';\nimport { View, StyleSheet, NativeModules } from 'react-native';\nimport { isEmpty, isNil } from 'ramda';\nimport {\n  PlaceholderImageTypes,\n  PlaceholderScreen,\n  i18n,\n  SurveyScreenLayout,\n  ActivityIndicatorMask,\n} from '@dropthought/react-native-ui/src';\nimport { useAsync } from 'react-async';\nimport { useMetadata } from '../contexts/custom-props';\nimport StartScreen from '../screens/StartScreen';\nimport EndScreen from '../screens/EndScreen';\nimport ErrorHintScreen from '../screens/ErrorHintScreen';\nimport { useSurveyContext } from '../contexts/survey';\nimport { submitFeedback } from '../../lib/Feedback';\nimport ScreenWrapper from './ScreenWrapper';\nimport Header from './Header';\nimport { fromJSToAPIDateStr } from '../../lib/DateTimerParser';\nimport { uploadPicture } from '../../lib/UploadPicture';\nimport type { ImageFormData } from '../../lib/UploadFileAPI';\n\ntype StackProps = {\n  preview: boolean;\n};\n\nconst noData = (a: any) => isNil(a) || isEmpty(a);\n\nconst Stack: React.FunctionComponent<StackProps> = ({ preview }) => {\n  const { survey, onClose } = useSurveyContext();\n  const themeColor = survey.surveyProperty.hexCode;\n  const [visiblePageIds, setVisiblePageIds] = useState([]);\n  const [endScreenvisible, setEndScreenvisible] = useState(false);\n  const [surveyFeedback, setSurveyFeedback] = useState(undefined);\n  const [error, setError] = useState<Error | undefined>();\n  const metadata = useMetadata();\n  const { run, isPending: loading } = useAsync({\n    deferFn: submitFeedback,\n    onResolve: () => {\n      setEndScreenvisible(true);\n    },\n    onReject: (rejectedError) => {\n      setError(rejectedError);\n      setEndScreenvisible(true);\n    },\n  });\n\n  const handleNextPage = useCallback(\n    (nextPageIndex) => {\n      if (nextPageIndex < survey.pageOrder.length) {\n        setVisiblePageIds((prevPageIds) => {\n          const nextPageId = survey.pageOrder[nextPageIndex];\n          return [\n            ...prevPageIds.filter(\n              (prevPageId: string) => prevPageId !== nextPageId\n            ),\n            nextPageId,\n          ];\n        });\n      }\n    },\n    [survey.pageOrder]\n  );\n\n  const handleStart = useCallback(() => {\n    handleNextPage(0);\n  }, [handleNextPage]);\n\n  const handlePrevPage = useCallback(() => {\n    setVisiblePageIds((prevPageIds) => prevPageIds.slice(0, -1));\n  }, []);\n\n  const handleSubmit = useCallback(\n    (feedback) => {\n      if (preview) {\n        setEndScreenvisible(true);\n      } else {\n        const { timeZone } = NativeModules.DtSdk.getConstants();\n        setSurveyFeedback(feedback);\n        run({\n          ...feedback,\n          metadata,\n          createdTime: fromJSToAPIDateStr(Date.now()),\n          timeZone,\n        });\n      }\n    },\n    [metadata, preview, run]\n  );\n\n  const [isUploading, setIsUploading] = useState(false);\n  const handleUpload = async (file: ImageFormData) => {\n    if (file) {\n      setIsUploading(true);\n      try {\n        const { url } = await uploadPicture(file);\n        setIsUploading(false);\n        return url;\n      } catch (reason) {\n        setIsUploading(false);\n        return reason;\n      }\n    } else {\n      return undefined;\n    }\n  };\n\n  return (\n    <View style={styles.flexOne}>\n      <Header\n        title={survey.surveyName}\n        onClose={onClose}\n        themeColor={themeColor}\n      />\n      <View style={styles.flexOne}>\n        <ScreenWrapper\n          visible\n          isOnTop={!endScreenvisible && visiblePageIds.length === 0}\n          rtl={survey.language === 'ar'}\n        >\n          <StartScreen onStart={handleStart} onClose={onClose} />\n        </ScreenWrapper>\n        {survey.pageOrder.map((pageId: string, pageIndex: number) => {\n          return (\n            <ScreenWrapper\n              key={pageId}\n              visible={visiblePageIds.includes(pageId)}\n              isOnTop={visiblePageIds[visiblePageIds.length - 1] === pageId}\n              rtl={survey.language === 'ar'}\n            >\n              <SurveyScreenLayout\n                survey={survey}\n                pageIndex={pageIndex}\n                onClose={onClose}\n                onNextPage={handleNextPage}\n                onPrevPage={handlePrevPage}\n                onSubmit={handleSubmit}\n                onUpload={handleUpload}\n                isUploading={isUploading}\n                preview={preview}\n              />\n            </ScreenWrapper>\n          );\n        })}\n        <ScreenWrapper\n          visible={endScreenvisible}\n          isOnTop={endScreenvisible}\n          rtl={survey.language === 'ar'}\n        >\n          <EndScreen\n            error={error}\n            surveyFeedback={surveyFeedback}\n            onClose={onClose}\n          />\n        </ScreenWrapper>\n      </View>\n      <ActivityIndicatorMask loading={loading} />\n    </View>\n  );\n};\n\ntype SurveyStackProps = {\n  preview: boolean;\n};\n\nconst SurveyStack: React.FunctionComponent<SurveyStackProps> = ({\n  preview,\n}) => {\n  const { survey, onClose } = useSurveyContext();\n  // check if survey data is valid\n  if (\n    noData(survey.pages) ||\n    noData(survey.surveyProperty) ||\n    noData(survey.surveyStartDate) ||\n    noData(survey.surveyEndDate)\n  ) {\n    // need to render placeholder\n    return (\n      <ErrorHintScreen onClose={onClose}>\n        <PlaceholderScreen\n          imageType={PlaceholderImageTypes.ProgramUnavailable}\n          message={i18n.t('start-survey:placeholder-message')}\n        />\n      </ErrorHintScreen>\n    );\n  }\n  return <Stack preview={preview} />;\n};\n\nexport default SurveyStack;\n\nconst styles = StyleSheet.create({\n  flexOne: {\n    flex: 1,\n  },\n});\n"],"mappings":"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"}