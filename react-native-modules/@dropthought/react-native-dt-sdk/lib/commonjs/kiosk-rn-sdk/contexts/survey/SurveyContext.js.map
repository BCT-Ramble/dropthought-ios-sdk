{"version":3,"sources":["SurveyContext.js"],"names":["DT_ERR_MISSING_PARAMS","DT_ERR_NO_BIND_PROGRAM","SurveyContext","React","createContext","survey","undefined","changeLanguage","useSurveyContext","useContext","useSurvey","surveyContextValue","getVisibility","visibilityId","language","timezone","Error","visibility","timeout","program","programId","theme","themeOption","appearance","fontColor","backgroundColor","getProgram","surveyId","preFetchImage","Promise","resolve","image","uri","width","height","surveyProperty","base64Reg","match","Image","prefetch","getSize","w","h","programCacheKey","state","i18n","singleQuestionPerPageTransformer","result","newPageOrder","newPages","pages","map","page","pageId","questions","forEach","question","index","newPageId","push","newPage","pageOrder","useSelectedLanguageState","defaultLanguage","selectedLanguage","setSelectedLanguage","useState","prevSelectedLanguage","useRef","setSelectedLanguageWithBackup","useCallback","languageToSet","current","showAlert","title","message","Alert","alert","text","defaultOnCloseHandler","console","log","SurveyContextProvider","baseURL","apiKey","children","onClose","sdkFetcher","init","themeDataFromSDKEntry","onRejectHandler","data","error","isPending","promiseFn","onReject","watchFn","props","prevProps","contextValue","useMemo","THEME_OPTION","CLASSIC","content","GlobalStyle","fullCenter","placeholderProps","imageType","PlaceholderImageTypes","ProgramUnavailable","NoInternet","flex1"],"mappings":"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","sourcesContent":["/**\n * @description\n * survey context expose two data: survey and changeLanguage function\n * it only renders children when survey is available,\n * therefore, the children would always be sure to have \"survey\" in context\n */\nimport * as React from 'react';\nimport {\n  View,\n  ActivityIndicator,\n  Image,\n  Alert,\n  Appearance,\n} from 'react-native';\n\nimport { evolve, merge, isNil } from 'ramda';\nimport { useAsync } from 'react-async';\nimport {\n  i18n,\n  ActivityIndicatorMask,\n  GlobalStyle,\n  PlaceholderScreen,\n  PlaceholderImageTypes,\n  THEME_OPTION,\n} from '@dropthought/react-native-ui';\nimport { ThemeProvider } from '@dropthought/react-native-ui/src/contexts/theme';\n\nimport FakeScreen from '../../screens/FakeScreen';\nimport { saveCache, loadCache } from '../../../lib/Storage';\nimport {\n  apiGetProgramById,\n  apiGetVisibilityById,\n  sdkFetcher,\n} from '../../../lib/API';\nimport { isRequestTimeoutError, isNoInternetError } from '../../../lib/Fetcher';\n\nconst DT_ERR_MISSING_PARAMS = 'dt-missing-parameters';\nconst DT_ERR_NO_BIND_PROGRAM = 'dt-no-bind-program';\n\n/** @type {React.Context<SurveyContextValue>} */\nconst SurveyContext = React.createContext({\n  survey: undefined,\n  changeLanguage: () => undefined,\n});\n\nexport const useSurveyContext = () => {\n  return React.useContext(SurveyContext);\n};\n\nexport const useSurvey = () => {\n  const surveyContextValue = React.useContext(SurveyContext);\n  return surveyContextValue.survey;\n};\n\n/**\n * load the visibility data from cache or api\n * @param {{visibilityId: string, language: string, timezone: string}} param0\n */\nconst getVisibility = async ({ visibilityId, language, timezone }) => {\n  if (!visibilityId) {\n    throw new Error(DT_ERR_MISSING_PARAMS);\n  }\n\n  /** @type {Visibility} */\n  const visibility = await apiGetVisibilityById(visibilityId, {\n    timeout: 10000,\n  });\n\n  if (!visibility.program || !visibility.program.programId) {\n    throw new Error(DT_ERR_NO_BIND_PROGRAM);\n  }\n\n  /** @type {ThemeData} */\n  const theme = {\n    themeOption: visibility.themeOption,\n    appearance: visibility.appearance,\n    fontColor: visibility.fontColor,\n    backgroundColor: visibility.backgroundColor,\n  };\n\n  return getProgram({\n    surveyId: visibility.program.programId,\n    language,\n    timezone,\n    theme,\n  });\n};\n\n/**\n * pre-fetch survey's image, get the width and height of the survey image\n * @param {Survey} survey\n * @return {Promise<Survey>}\n */\nconst preFetchImage = (survey) =>\n  new Promise((resolve) => {\n    const { image: uri, width, height } = survey?.surveyProperty || {};\n    if (!uri || typeof uri !== 'string') {\n      resolve(survey);\n      return;\n    }\n\n    // pre-fetch the uri if it is not base64\n    const base64Reg = /^data:image\\/.+;base64/;\n    if (!uri.match(base64Reg)) {\n      Image.prefetch(uri);\n    }\n\n    // if height and width already existed\n    if (width && height) {\n      resolve(survey);\n      return;\n    }\n\n    // get image's width and height\n    Image.getSize(\n      uri,\n      (w, h) => {\n        // resolve the updated survey with surveyProperty merge with {width, height}\n        resolve(\n          evolve({\n            surveyProperty: merge({\n              width: w,\n              height: h,\n            }),\n          })(survey)\n        );\n      },\n      () => {\n        resolve(survey);\n      }\n    );\n  });\n\n/**\n * load the program data from cache or api\n * @param {{surveyId: string, language: string, timezone?: string, theme?: ThemeData }} param0\n */\nconst getProgram = async ({ surveyId, language, timezone, theme }) => {\n  const programCacheKey = `survey-${surveyId}-${language}`;\n  if (!surveyId) {\n    throw new Error(DT_ERR_MISSING_PARAMS);\n  }\n\n  /** @type {Survey} */\n  let survey = await loadCache(programCacheKey);\n  if (!survey) {\n    survey = await apiGetProgramById(\n      {\n        programId: surveyId,\n        language,\n        timezone,\n      },\n      {\n        timeout: 10000,\n      }\n    );\n  }\n  // pre-fetch image\n  survey = await preFetchImage(survey);\n\n  // only save to cache when state is active\n  if (survey.state === 'active') {\n    await saveCache(programCacheKey, survey);\n  }\n\n  // change the i18n language\n  i18n.changeLanguage(survey.language);\n\n  return { survey, theme };\n};\n\n/**\n * extract questions in page and make them as its' independent page\n * @param {Survey} survey\n */\nconst singleQuestionPerPageTransformer = (survey) => {\n  /** @type {Survey} */\n  let result = {};\n  if (survey) {\n    const newPageOrder = [];\n    const newPages = [];\n    const { pages } = survey;\n    pages.map((page) => {\n      const { pageId, questions } = page;\n      questions.forEach((question, index) => {\n        const newPageId = `${pageId}_${index}`;\n        newPageOrder.push(newPageId);\n        const newPage = { ...page, pageId: newPageId, questions: [question] };\n        newPages.push(newPage);\n      });\n    });\n    result = { ...survey, pageOrder: newPageOrder, pages: newPages };\n  }\n  return result;\n};\n\n// we want to \"remember\" the previous selected language\n// so that, later when there's error, we could fallback to the previous selected language\nconst useSelectedLanguageState = (defaultLanguage) => {\n  const [selectedLanguage, setSelectedLanguage] =\n    React.useState(defaultLanguage);\n  const prevSelectedLanguage = React.useRef();\n\n  // backup the previous selected language\n  const setSelectedLanguageWithBackup = React.useCallback(\n    (languageToSet) => {\n      prevSelectedLanguage.current = selectedLanguage;\n      setSelectedLanguage(languageToSet);\n    },\n    [selectedLanguage]\n  );\n  return [\n    selectedLanguage,\n    prevSelectedLanguage.current,\n    setSelectedLanguageWithBackup,\n    setSelectedLanguage,\n  ];\n};\n\nconst showAlert = () => {\n  const title = 'Unable to fetch data';\n  const message = 'Please check if you are connected to the internet';\n  // @TODO: SurveyNativeBridge\n  Alert.alert(title, message, [\n    {\n      text: 'OK',\n    },\n  ]);\n};\n\nconst defaultOnCloseHandler = () => {\n  console.log('please provide your own onClose function when using SDKEntry');\n};\n\n/**\n * @param {Props} param0\n */\nexport const SurveyContextProvider = ({\n  baseURL,\n  apiKey,\n  visibilityId,\n  surveyId,\n  children,\n  defaultLanguage = 'en',\n  onClose = defaultOnCloseHandler,\n  themeOption,\n  appearance = 'system',\n  fontColor,\n  backgroundColor,\n  timezone,\n}) => {\n  if (baseURL || apiKey) {\n    sdkFetcher.init({ baseURL, apiKey });\n  }\n  const themeDataFromSDKEntry = {\n    themeOption,\n    appearance,\n    fontColor,\n    backgroundColor,\n  };\n  const [\n    selectedLanguage,\n    prevSelectedLanguage,\n    setSelectedLanguageWithBackup,\n    setSelectedLanguage,\n  ] = useSelectedLanguageState(defaultLanguage);\n\n  // handler the rejection when switching language\n  const onRejectHandler = React.useCallback(() => {\n    if (\n      !isNil(prevSelectedLanguage) &&\n      prevSelectedLanguage !== selectedLanguage\n    ) {\n      // fallback to previous language directly\n      setSelectedLanguage(prevSelectedLanguage);\n      showAlert();\n    }\n  }, [selectedLanguage, prevSelectedLanguage, setSelectedLanguage]);\n\n  const { data, error, isPending } = useAsync({\n    promiseFn: visibilityId ? getVisibility : getProgram,\n    onReject: onRejectHandler,\n\n    visibilityId,\n    surveyId,\n    language: selectedLanguage,\n    timezone,\n\n    // watch, only re-run the promise, when language is changed or visibilityId is changed\n    watchFn: (props, prevProps) =>\n      props.visibilityId !== prevProps.visibilityId ||\n      (props.language !== prevProps.language &&\n        props.language !== prevSelectedLanguage) ||\n      props.surveyId !== prevProps.surveyId,\n  });\n\n  const { survey, theme = themeDataFromSDKEntry } = data ?? {};\n\n  /** @type {SurveyContextValue} */\n  const contextValue = React.useMemo(\n    () => ({\n      onClose,\n      survey:\n        theme?.themeOption === THEME_OPTION.CLASSIC\n          ? survey\n          : singleQuestionPerPageTransformer(survey),\n      changeLanguage: setSelectedLanguageWithBackup,\n    }),\n    [survey, onClose, setSelectedLanguageWithBackup, theme]\n  );\n\n  // initial loading data view\n  if (!data) {\n    // loading\n    let content = (\n      <View style={GlobalStyle.fullCenter}>\n        <ActivityIndicator size=\"large\" />\n      </View>\n    );\n    if (error) {\n      let placeholderProps = {\n        imageType: PlaceholderImageTypes.ProgramUnavailable,\n        message:\n          'Sorry for the inconvenience.\\nPlease come back and check later on.',\n      };\n      if (isRequestTimeoutError(error) || isNoInternetError(error)) {\n        placeholderProps = {\n          imageType: PlaceholderImageTypes.NoInternet,\n          message: 'Please check if you are connected to the internet',\n        };\n      }\n      content = <PlaceholderScreen {...placeholderProps} />;\n    }\n    return <FakeScreen onClose={onClose}>{content}</FakeScreen>;\n  }\n  return (\n    <SurveyContext.Provider value={contextValue}>\n      <ThemeProvider {...theme}>\n        <View style={GlobalStyle.flex1}>\n          {children}\n          <ActivityIndicatorMask loading={isPending} />\n        </View>\n      </ThemeProvider>\n    </SurveyContext.Provider>\n  );\n};\n\n/** @typedef {import('../../SDKEntry').SDKEntryProps} Props */\n\n/**\n * @typedef {object} SurveyContextValue\n * @property {Survey} survey\n * @property {(language: string) => void} changeLanguage\n * @property {() => void} onClose\n */\n/** @typedef {import('../../../data').Survey} Survey */\n/** @typedef {import('../../../data').Visibility} Visibility */\n/** @typedef {import('../../../data').ThemeData} ThemeData */\n"]}