{"version":3,"names":["isEmpty","uuidv4","apiPostEvent","QueueStorage","KEY_FEEDBACKS","KEY_FAILED_FEEDBACKS_DURING_PROCESSING","KEY_FAILED_REASONS_DURING_PROCESSING","FeedbacksQueue","key","encrypted","FailedFeedbacksQueue","FailedReasonsQueue","sendFeedback","surveyFeedback","programId","surveyId","feedbacks","metadata","createdTime","timeZone","UploaderStates","Idle","Processing","waitUntil","check","round","Promise","resolve","timeout","setTimeout","CreateFeedbacksUploader","initialized","state","numOfProcessed","userCanceled","subscriptions","publish","queuedFeedbacks","failedFeedbacksDuringProcessing","failedReasons","getAll","forEach","subscription","subscriber","uploadStatus","numOfFeedbacksProcessed","uploadSingle","feedback","front","err","_err$response","console","log","message","enqueue","status","response","dequeue","uploadDone","retryFailed","failedFeedbacks","clear","uploadStart","uploadContinue","cancel","all","initialize","undefined","upload","subscribe","id","push","removeSubscription","filter","sub","feedbackUploader"],"sources":["FeedbacksUploader.js"],"sourcesContent":["import { isEmpty } from 'ramda';\nimport uuidv4 from 'uuid/v4';\n\nimport { apiPostEvent } from './API';\n\nimport QueueStorage from './QueueStorage';\n\nconst KEY_FEEDBACKS = 'KEY_FEEDBACKS';\nconst KEY_FAILED_FEEDBACKS_DURING_PROCESSING =\n  'KEY_FAILED_FEEDBACKS_DURING_PROCESSING';\nconst KEY_FAILED_REASONS_DURING_PROCESSING =\n  'KEY_FAILED_REASONS_DURING_PROCESSING';\n\n/** @type {QueueStorage<SurveyFeedback>} */\nexport const FeedbacksQueue = new QueueStorage({\n  key: KEY_FEEDBACKS,\n  encrypted: true,\n});\n/** @type {QueueStorage<SurveyFeedback>} */\nexport const FailedFeedbacksQueue = new QueueStorage({\n  key: KEY_FAILED_FEEDBACKS_DURING_PROCESSING,\n  encrypted: true,\n});\n/** @type {QueueStorage<FailedReason>} */\nexport const FailedReasonsQueue = new QueueStorage({\n  key: KEY_FAILED_REASONS_DURING_PROCESSING,\n  encrypted: true,\n});\n\n/**\n * @param {SurveyFeedback} surveyFeedback\n * @param {*} cancelSource\n */\nasync function sendFeedback(surveyFeedback) {\n  return apiPostEvent({\n    programId: surveyFeedback.surveyId,\n    feedbacks: surveyFeedback.feedbacks,\n    metadata: surveyFeedback.metadata,\n    createdTime: surveyFeedback.createdTime,\n    timeZone: surveyFeedback.timeZone,\n  });\n}\n\n/** @enum {'idle' | 'processing' } */\nexport const UploaderStates = {\n  Idle: 'idle',\n  Processing: 'processing',\n};\n\n/**\n * @typedef {Object} FeedbackUploaderSubscription\n * @property {string} id\n * @property {FeedbackUploaderSubscriber} subscriber\n */\n/**\n * @typedef {Object} FeedbackUploaderPublishState\n * @property {UploaderStates} uploadStatus\n * @property {number} numOfFeedbacksProcessed\n * @property {SurveyFeedback[]} queuedFeedbacks\n * @property {SurveyFeedback[]} failedFeedbacksDuringProcessing\n * @property {FailedReason[]} failedReasons\n * @property {boolean} userCanceled\n */\n/**\n * @typedef {(state: FeedbackUploaderPublishState) => void} FeedbackUploaderSubscriber\n */\n\n/**\n * @param {() => boolean} check\n * @returns\n */\nconst waitUntil = async (check) => {\n  let round = 0;\n  return new Promise((resolve) => {\n    const timeout = () => {\n      round++;\n      setTimeout(() => {\n        if (check() || round >= 10) {\n          resolve();\n          return;\n        } else {\n          timeout();\n        }\n      }, 500);\n    };\n    timeout();\n  });\n};\n\nfunction CreateFeedbacksUploader() {\n  /** @type {boolean | null | undefined} */\n  let initialized = null; // null -> not start yet, undefined -> in progress, true -> finished\n  let state = UploaderStates.Idle;\n  let numOfProcessed = 0;\n  let userCanceled = false;\n\n  /** @type {FeedbackUploaderSubscription[]} */\n  let subscriptions = [];\n\n  function publish() {\n    if (isEmpty(subscriptions)) return;\n\n    const [queuedFeedbacks, failedFeedbacksDuringProcessing, failedReasons] = [\n      FeedbacksQueue.getAll(),\n      FailedFeedbacksQueue.getAll(),\n      FailedReasonsQueue.getAll(),\n    ];\n\n    subscriptions.forEach((subscription) => {\n      if (\n        subscription.subscriber &&\n        typeof subscription.subscriber === 'function'\n      ) {\n        subscription.subscriber({\n          uploadStatus: state,\n          numOfFeedbacksProcessed: numOfProcessed,\n          queuedFeedbacks,\n          failedFeedbacksDuringProcessing,\n          failedReasons,\n          userCanceled,\n        });\n      }\n    });\n  }\n\n  async function uploadSingle() {\n    // if user cancel, stop process the next feedback\n    if (userCanceled) {\n      return;\n    }\n\n    const feedback = FeedbacksQueue.front();\n\n    // no more feedback in the queue, stop\n    if (!feedback) return;\n\n    try {\n      await sendFeedback(feedback);\n      numOfProcessed++;\n    } catch (err) {\n      console.log(\n        'failed when sending feedback',\n        feedback.surveyId,\n        err.message\n      );\n      // failed, add to failed queue\n      FailedFeedbacksQueue.enqueue(feedback);\n      FailedReasonsQueue.enqueue({\n        message: err.message,\n        status: err.response?.status,\n      });\n    } finally {\n      FeedbacksQueue.dequeue();\n\n      publish();\n      await uploadSingle();\n    }\n  }\n\n  function uploadDone() {\n    state = UploaderStates.Idle;\n    publish();\n  }\n\n  function retryFailed() {\n    // get failed feedbacks and save to processing queue\n    // clear failed feedback queue\n    const failedFeedbacks = FailedFeedbacksQueue.getAll();\n    FeedbacksQueue.enqueue(failedFeedbacks);\n    FailedFeedbacksQueue.clear();\n    FailedReasonsQueue.clear();\n  }\n\n  function uploadStart() {\n    // reset states\n    state = UploaderStates.Processing;\n    numOfProcessed = 0;\n    userCanceled = false;\n\n    retryFailed();\n    publish();\n  }\n\n  function uploadContinue() {\n    retryFailed();\n    publish();\n  }\n\n  /**\n   * @public\n   */\n  function cancel() {\n    userCanceled = true;\n    publish();\n  }\n\n  /**\n   * @public\n   */\n  async function clear() {\n    cancel();\n    await Promise.all([\n      FeedbacksQueue.clear(),\n      FailedFeedbacksQueue.clear(),\n      FailedReasonsQueue.clear(),\n    ]);\n  }\n\n  /**\n   * @public\n   */\n  async function initialize() {\n    // only initialize once\n    if (initialized === true) return;\n    if (typeof initialized === 'undefined') {\n      return waitUntil(() => initialized === true);\n    }\n    initialized = undefined;\n\n    // check queues are initialized\n    await Promise.all([\n      FeedbacksQueue.initialize(),\n      FailedFeedbacksQueue.initialize(),\n      FailedReasonsQueue.initialize(),\n    ]);\n    initialized = true;\n  }\n\n  /**\n   * @public\n   */\n  async function upload() {\n    if (initialized !== true) return;\n\n    if (state === UploaderStates.Processing) {\n      // upload is in process\n      uploadContinue();\n      return;\n    }\n\n    uploadStart();\n\n    // upload feedback one by one\n    await uploadSingle();\n\n    // all the feedbacks are processed\n    uploadDone();\n  }\n\n  /**\n   * @public\n   * @param {FeedbackUploaderSubscriber} subscriber\n   */\n  function subscribe(subscriber) {\n    const id = uuidv4();\n    const subscription = {\n      id,\n      subscriber,\n    };\n    subscriptions.push(subscription);\n    publish();\n    return function removeSubscription() {\n      subscriptions = subscriptions.filter((sub) => sub.id !== id);\n    };\n  }\n\n  return {\n    upload,\n    subscribe,\n    cancel,\n    clear,\n    initialize,\n  };\n}\n\n/**\n * @description singleton uploader\n * @example\n *     // to upload\n *     feedbackUploader.upload()\n *\n *     // to cancel\n *     feedbackUploader.cancel()\n *\n *     // to clear all the saved unsent feedbacks\n *     feedbackUploader.clear()\n *\n *     // to subscribe state\n *     const unSubscribe = feedbackUploader.subscribe( state => {\n *         console.log(state)\n *         // check type FeedbackUploaderPublishState\n *     })\n *     // to unsubscribe\n *     unSubscribe()\n */\nexport const feedbackUploader = CreateFeedbacksUploader();\n\n/**@typedef {import('../data').Feedback} Feedback */\n/**@typedef {import('../data').SurveyFeedback} SurveyFeedback */\n\n/**\n * @typedef {Object} FailedReason\n * @property {string} message\n * @property {number|undefined} status\n */\n"],"mappings":"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"}