{"version":3,"names":["React","View","ActivityIndicator","Image","Alert","evolve","merge","isNil","useAsync","i18n","ActivityIndicatorMask","GlobalStyle","PlaceholderScreen","PlaceholderImageTypes","THEME_OPTION","ThemeProvider","ErrorHintScreen","saveCache","loadCache","apiGetProgramById","apiGetVisibilityById","sdkFetcher","isRequestTimeoutError","isNoInternetError","DT_ERR_MISSING_PARAMS","DT_ERR_NO_BIND_PROGRAM","SurveyContext","createContext","survey","undefined","changeLanguage","useSurveyContext","useContext","useSurvey","surveyContextValue","getVisibility","visibilityId","language","timezone","Error","visibility","timeout","program","programId","theme","themeOption","appearance","fontColor","backgroundColor","getProgram","surveyId","preFetchImage","Promise","resolve","image","uri","width","height","surveyProperty","base64Reg","match","prefetch","getSize","w","h","programCacheKey","state","singleQuestionPerPageTransformer","result","newPageOrder","newPages","pages","map","page","pageId","questions","forEach","question","index","newPageId","push","newPage","pageOrder","useSelectedLanguageState","defaultLanguage","selectedLanguage","setSelectedLanguage","useState","prevSelectedLanguage","useRef","setSelectedLanguageWithBackup","useCallback","languageToSet","current","showAlert","title","message","alert","text","defaultOnCloseHandler","console","log","SurveyContextProvider","baseURL","apiKey","children","onClose","init","themeDataFromSDKEntry","onRejectHandler","data","error","isPending","promiseFn","onReject","watchFn","props","prevProps","transformedThemeOption","transformedHexCode","hexCode","themeName","BIJLIRIDE","transformedTheme","contextValue","useMemo","CLASSIC","content","createElement","style","fullCenter","size","placeholderProps","imageType","ProgramUnavailable","NoInternet","hideCloseButton","Provider","value","flex1","loading"],"sources":["SurveyContext.js"],"sourcesContent":["/**\n * @description\n * survey context expose two data: survey and changeLanguage function\n * it only renders children when survey is available,\n * therefore, the children would always be sure to have \"survey\" in context\n */\nimport * as React from 'react';\nimport { View, ActivityIndicator, Image, Alert } from 'react-native';\n\nimport { evolve, merge, isNil } from 'ramda';\nimport { useAsync } from 'react-async';\nimport {\n  i18n,\n  ActivityIndicatorMask,\n  GlobalStyle,\n  PlaceholderScreen,\n  PlaceholderImageTypes,\n  THEME_OPTION,\n  ThemeProvider,\n} from '@dropthought/react-native-ui/src';\n\nimport ErrorHintScreen from '../../screens/ErrorHintScreen';\nimport { saveCache, loadCache } from '../../../lib/Storage';\nimport {\n  apiGetProgramById,\n  apiGetVisibilityById,\n  sdkFetcher,\n} from '../../../lib/API';\nimport { isRequestTimeoutError, isNoInternetError } from '../../../lib/Fetcher';\n\nconst DT_ERR_MISSING_PARAMS = 'dt-missing-parameters';\nconst DT_ERR_NO_BIND_PROGRAM = 'dt-no-bind-program';\n\n/** @type {React.Context<SurveyContextValue>} */\nconst SurveyContext = React.createContext({\n  survey: undefined,\n  changeLanguage: () => undefined,\n});\n\nexport const useSurveyContext = () => {\n  return React.useContext(SurveyContext);\n};\n\nexport const useSurvey = () => {\n  const surveyContextValue = React.useContext(SurveyContext);\n  return surveyContextValue.survey;\n};\n\n/**\n * load the visibility data from cache or api\n * @param {{visibilityId: string, language: string, timezone: string}} param0\n */\nconst getVisibility = async ({ visibilityId, language, timezone }) => {\n  if (!visibilityId) {\n    throw new Error(DT_ERR_MISSING_PARAMS);\n  }\n\n  /** @type {Visibility} */\n  const visibility = await apiGetVisibilityById(visibilityId, {\n    timeout: 10000,\n  });\n\n  if (!visibility.program || !visibility.program.programId) {\n    throw new Error(DT_ERR_NO_BIND_PROGRAM);\n  }\n\n  /** @type {ThemeData} */\n  const theme = {\n    themeOption: visibility.themeOption,\n    appearance: visibility.appearance,\n    fontColor: visibility.fontColor,\n    backgroundColor: visibility.backgroundColor,\n  };\n\n  return getProgram({\n    surveyId: visibility.program.programId,\n    language,\n    timezone,\n    theme,\n  });\n};\n\n/**\n * pre-fetch survey's image, get the width and height of the survey image\n * @param {Survey} survey\n * @return {Promise<Survey>}\n */\nconst preFetchImage = (survey) =>\n  new Promise((resolve) => {\n    const { image: uri, width, height } = survey?.surveyProperty || {};\n    if (!uri || typeof uri !== 'string') {\n      resolve(survey);\n      return;\n    }\n\n    // pre-fetch the uri if it is not base64\n    const base64Reg = /^data:image\\/.+;base64/;\n    if (!uri.match(base64Reg)) {\n      Image.prefetch(uri);\n    }\n\n    // if height and width already existed\n    if (width && height) {\n      resolve(survey);\n      return;\n    }\n\n    // get image's width and height\n    Image.getSize(\n      uri,\n      (w, h) => {\n        // resolve the updated survey with surveyProperty merge with {width, height}\n        resolve(\n          evolve({\n            surveyProperty: merge({\n              width: w,\n              height: h,\n            }),\n          })(survey)\n        );\n      },\n      () => {\n        resolve(survey);\n      }\n    );\n  });\n\n/**\n * load the program data from cache or api\n * @param {{surveyId: string, language: string, timezone?: string, theme?: ThemeData }} param0\n */\nconst getProgram = async ({ surveyId, language, timezone, theme }) => {\n  const programCacheKey = `survey-${surveyId}-${language}`;\n  if (!surveyId) {\n    throw new Error(DT_ERR_MISSING_PARAMS);\n  }\n\n  /** @type {Survey} */\n  let survey = await loadCache(programCacheKey);\n  if (!survey) {\n    survey = await apiGetProgramById(\n      {\n        programId: surveyId,\n        language,\n        timezone,\n      },\n      {\n        timeout: 10000,\n      }\n    );\n  }\n  // pre-fetch image\n  survey = await preFetchImage(survey);\n\n  // only save to cache when state is active\n  if (survey.state === 'active') {\n    await saveCache(programCacheKey, survey);\n  }\n\n  // change the i18n language\n  i18n.changeLanguage(survey.language);\n\n  return { survey, theme };\n};\n\n/**\n * extract questions in page and make them as its' independent page\n * @param {Survey} survey\n */\nconst singleQuestionPerPageTransformer = (survey) => {\n  /** @type {Survey} */\n  let result = {};\n  if (survey) {\n    const newPageOrder = [];\n    const newPages = [];\n    const { pages } = survey;\n    pages.map((page) => {\n      const { pageId, questions } = page;\n      questions.forEach((question, index) => {\n        const newPageId = `${pageId}_${index}`;\n        newPageOrder.push(newPageId);\n        const newPage = { ...page, pageId: newPageId, questions: [question] };\n        newPages.push(newPage);\n      });\n    });\n    result = { ...survey, pageOrder: newPageOrder, pages: newPages };\n  }\n  return result;\n};\n\n// we want to \"remember\" the previous selected language\n// so that, later when there's error, we could fallback to the previous selected language\nconst useSelectedLanguageState = (defaultLanguage) => {\n  const [selectedLanguage, setSelectedLanguage] =\n    React.useState(defaultLanguage);\n  const prevSelectedLanguage = React.useRef();\n\n  // backup the previous selected language\n  const setSelectedLanguageWithBackup = React.useCallback(\n    (languageToSet) => {\n      prevSelectedLanguage.current = selectedLanguage;\n      setSelectedLanguage(languageToSet);\n    },\n    [selectedLanguage]\n  );\n  return [\n    selectedLanguage,\n    prevSelectedLanguage.current,\n    setSelectedLanguageWithBackup,\n    setSelectedLanguage,\n  ];\n};\n\nconst showAlert = () => {\n  const title = 'Unable to fetch data';\n  const message = 'Please check if you are connected to the internet';\n  // @TODO: SurveyNativeBridge\n  Alert.alert(title, message, [\n    {\n      text: 'OK',\n    },\n  ]);\n};\n\nconst defaultOnCloseHandler = () => {\n  console.log('please provide your own onClose function when using SDKEntry');\n};\n\n/**\n * @param {Props} param0\n */\nexport const SurveyContextProvider = ({\n  baseURL,\n  apiKey,\n  visibilityId,\n  surveyId,\n  children,\n  defaultLanguage = 'en',\n  onClose = defaultOnCloseHandler,\n  themeOption,\n  appearance = 'system',\n  fontColor,\n  backgroundColor,\n  timezone,\n}) => {\n  if (baseURL || apiKey) {\n    sdkFetcher.init({ baseURL, apiKey });\n  }\n  const themeDataFromSDKEntry = {\n    themeOption,\n    appearance,\n    fontColor,\n    backgroundColor,\n  };\n  const [\n    selectedLanguage,\n    prevSelectedLanguage,\n    setSelectedLanguageWithBackup,\n    setSelectedLanguage,\n  ] = useSelectedLanguageState(defaultLanguage);\n\n  // handler the rejection when switching language\n  const onRejectHandler = React.useCallback(() => {\n    if (\n      !isNil(prevSelectedLanguage) &&\n      prevSelectedLanguage !== selectedLanguage\n    ) {\n      // fallback to previous language directly\n      setSelectedLanguage(prevSelectedLanguage);\n      showAlert();\n    }\n  }, [selectedLanguage, prevSelectedLanguage, setSelectedLanguage]);\n\n  const { data, error, isPending } = useAsync({\n    promiseFn: visibilityId ? getVisibility : getProgram,\n    onReject: onRejectHandler,\n\n    visibilityId,\n    surveyId,\n    language: selectedLanguage,\n    timezone,\n\n    // watch, only re-run the promise, when language is changed or visibilityId is changed\n    watchFn: (props, prevProps) =>\n      props.visibilityId !== prevProps.visibilityId ||\n      (props.language !== prevProps.language &&\n        props.language !== prevSelectedLanguage) ||\n      props.surveyId !== prevProps.surveyId,\n  });\n\n  const { survey, theme = themeDataFromSDKEntry } = data ?? {};\n\n  let transformedThemeOption = theme.themeOption;\n  let transformedHexCode = survey?.surveyProperty.hexCode ?? '';\n  if (\n    survey?.surveyProperty.themeName === 'Bijiliride Theme' ||\n    survey?.surveyProperty.themeName === 'Bijliride Theme'\n  ) {\n    transformedThemeOption = THEME_OPTION.BIJLIRIDE;\n  }\n  const transformedTheme = {\n    ...theme,\n    themeOption: transformedThemeOption,\n    hexCode: transformedHexCode,\n  };\n\n  /** @type {SurveyContextValue} */\n  const contextValue = React.useMemo(\n    () => ({\n      onClose,\n      survey:\n        transformedThemeOption === THEME_OPTION.CLASSIC ||\n        transformedThemeOption === THEME_OPTION.BIJLIRIDE\n          ? survey\n          : singleQuestionPerPageTransformer(survey),\n      changeLanguage: setSelectedLanguageWithBackup,\n    }),\n    [onClose, transformedThemeOption, survey, setSelectedLanguageWithBackup]\n  );\n\n  // initial loading data view\n  if (!data) {\n    // loading\n    let content = (\n      <View style={GlobalStyle.fullCenter}>\n        <ActivityIndicator size=\"large\" />\n      </View>\n    );\n    if (error) {\n      let placeholderProps = {\n        imageType: PlaceholderImageTypes.ProgramUnavailable,\n        message:\n          'Sorry for the inconvenience.\\nPlease come back and check later on.',\n      };\n      if (isRequestTimeoutError(error) || isNoInternetError(error)) {\n        placeholderProps = {\n          imageType: PlaceholderImageTypes.NoInternet,\n          message: 'Please check if you are connected to the internet',\n        };\n      }\n      content = <PlaceholderScreen {...placeholderProps} />;\n    }\n    return (\n      <ErrorHintScreen onClose={onClose} hideCloseButton={!error}>\n        {content}\n      </ErrorHintScreen>\n    );\n  }\n  return (\n    <SurveyContext.Provider value={contextValue}>\n      <ThemeProvider {...transformedTheme}>\n        <View style={GlobalStyle.flex1}>\n          {children}\n          <ActivityIndicatorMask loading={isPending} />\n        </View>\n      </ThemeProvider>\n    </SurveyContext.Provider>\n  );\n};\n\n/** @typedef {import('../../SDKEntry').SDKEntryProps} Props */\n\n/**\n * @typedef {object} SurveyContextValue\n * @property {Survey} survey\n * @property {(language: string) => void} changeLanguage\n * @property {() => void} onClose\n */\n/** @typedef {import('../../../data').Survey} Survey */\n/** @typedef {import('../../../data').Visibility} Visibility */\n/** @typedef {import('../../../data').ThemeData} ThemeData */\n"],"mappings":"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"}