{"version":3,"sources":["useWindowDimensions.ts"],"names":["React","Dimensions","useWindowDimensions","dimensions","setDimensions","useState","height","width","get","useEffect","onChange","window","d","listener","addEventListener","remove"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,UAAT,QAAuC,cAAvC;;AAOA,SAASC,mBAAT,GAA+B;AAC7B,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BJ,KAAK,CAACK,QAAN,CAA+B,MAAM;AACvE,UAAM;AAAEC,MAAAA,MAAM,GAAG,CAAX;AAAcC,MAAAA,KAAK,GAAG;AAAtB,QAA4BN,UAAU,CAACO,GAAX,CAAe,QAAf,CAAlC;AACA,WAAO;AACLF,MAAAA,MADK;AAELC,MAAAA;AAFK,KAAP;AAID,GANmC,CAApC;AAOAP,EAAAA,KAAK,CAACS,SAAN,CAAgB,MAAM;AACpB,UAAMC,QAAQ,GAAG,CAAC;AAAEC,MAAAA;AAAF,KAAD,KAAwC;AACvD,YAAM;AAAEJ,QAAAA,KAAF;AAASD,QAAAA;AAAT,UAAoBK,MAA1B;AACAP,MAAAA,aAAa,CAAEQ,CAAD,IAAO;AACnB,YAAIL,KAAK,KAAKK,CAAC,CAACL,KAAZ,IAAqBD,MAAM,KAAKM,CAAC,CAACN,MAAtC,EAA8C;AAC5C,iBAAOM,CAAP;AACD;;AAED,eAAO;AACLL,UAAAA,KADK;AAELD,UAAAA;AAFK,SAAP;AAID,OATY,CAAb;AAUD,KAZD;;AAaAI,IAAAA,QAAQ,CAAC;AACPC,MAAAA,MAAM,EAAEV,UAAU,CAACO,GAAX,CAAe,QAAf;AADD,KAAD,CAAR;AAGA,UAAMK,QAAQ,GAAGZ,UAAU,CAACa,gBAAX,CAA4B,QAA5B,EAAsCJ,QAAtC,CAAjB;AAEA,WAAO,MAAM;AACXG,MAAAA,QAAQ,SAAR,IAAAA,QAAQ,WAAR,YAAAA,QAAQ,CAAEE,MAAV;AACD,KAFD;AAGD,GAtBD,EAsBG,EAtBH;AAwBA,SAAOZ,UAAP;AACD;;AAED,eAAeD,mBAAf","sourcesContent":["import * as React from 'react';\nimport { Dimensions, ScaledSize } from 'react-native';\n\ntype DimensionsType = {\n  height: number;\n  width: number;\n};\n\nfunction useWindowDimensions() {\n  const [dimensions, setDimensions] = React.useState<DimensionsType>(() => {\n    const { height = 0, width = 0 } = Dimensions.get('window');\n    return {\n      height,\n      width,\n    };\n  });\n  React.useEffect(() => {\n    const onChange = ({ window }: { window: ScaledSize }) => {\n      const { width, height } = window;\n      setDimensions((d) => {\n        if (width === d.width && height === d.height) {\n          return d;\n        }\n\n        return {\n          width,\n          height,\n        };\n      });\n    };\n    onChange({\n      window: Dimensions.get('window'),\n    });\n    const listener = Dimensions.addEventListener('change', onChange);\n\n    return () => {\n      listener?.remove();\n    };\n  }, []);\n\n  return dimensions;\n}\n\nexport default useWindowDimensions;\n"]}