{"version":3,"names":["React","useCallback","useState","View","StyleSheet","NativeModules","isEmpty","isNil","PlaceholderImageTypes","PlaceholderScreen","i18n","SurveyScreenLayout","ActivityIndicatorMask","useAsync","useMetadata","StartScreen","EndScreen","ErrorHintScreen","useSurveyContext","submitFeedback","ScreenWrapper","Header","fromJSToAPIDateStr","uploadPicture","noData","a","Stack","preview","survey","onClose","themeColor","surveyProperty","hexCode","visiblePageIds","setVisiblePageIds","endScreenvisible","setEndScreenvisible","surveyFeedback","setSurveyFeedback","undefined","error","setError","metadata","run","isPending","loading","deferFn","onResolve","onReject","rejectedError","handleNextPage","nextPageIndex","pageOrder","length","prevPageIds","nextPageId","filter","prevPageId","handleStart","handlePrevPage","slice","handleSubmit","feedback","timeZone","DtSdk","getConstants","createdTime","Date","now","isUploading","setIsUploading","handleUpload","file","url","reason","createElement","style","styles","flexOne","title","surveyName","visible","isOnTop","rtl","language","onStart","map","pageId","pageIndex","key","includes","onNextPage","onPrevPage","onSubmit","onUpload","SurveyStack","pages","surveyStartDate","surveyEndDate","imageType","ProgramUnavailable","message","t","create","flex"],"sources":["SurveyStack.tsx"],"sourcesContent":["import React, { useCallback, useState } from 'react';\nimport { View, StyleSheet, NativeModules } from 'react-native';\nimport { isEmpty, isNil } from 'ramda';\nimport {\n  PlaceholderImageTypes,\n  PlaceholderScreen,\n  i18n,\n  SurveyScreenLayout,\n  ActivityIndicatorMask,\n} from '@dropthought/react-native-ui/src';\nimport { useAsync } from 'react-async';\nimport { useMetadata } from '../contexts/custom-props';\nimport StartScreen from '../screens/StartScreen';\nimport EndScreen from '../screens/EndScreen';\nimport ErrorHintScreen from '../screens/ErrorHintScreen';\nimport { useSurveyContext } from '../contexts/survey';\nimport { submitFeedback } from '../../lib/Feedback';\nimport ScreenWrapper from './ScreenWrapper';\nimport Header from './Header';\nimport { fromJSToAPIDateStr } from '../../lib/DateTimerParser';\nimport { uploadPicture } from '../../lib/UploadPicture';\nimport type { ImageFormData } from '../../lib/UploadFileAPI';\n\ntype StackProps = {\n  preview: boolean;\n};\n\nconst noData = (a: any) => isNil(a) || isEmpty(a);\n\nconst Stack: React.FunctionComponent<StackProps> = ({ preview }) => {\n  const { survey, onClose } = useSurveyContext();\n  const themeColor = survey.surveyProperty.hexCode;\n  const [visiblePageIds, setVisiblePageIds] = useState([]);\n  const [endScreenvisible, setEndScreenvisible] = useState(false);\n  const [surveyFeedback, setSurveyFeedback] = useState(undefined);\n  const [error, setError] = useState<Error | undefined>();\n  const metadata = useMetadata();\n  const { run, isPending: loading } = useAsync({\n    deferFn: submitFeedback,\n    onResolve: () => {\n      setEndScreenvisible(true);\n    },\n    onReject: (rejectedError) => {\n      setError(rejectedError);\n      setEndScreenvisible(true);\n    },\n  });\n\n  const handleNextPage = useCallback(\n    (nextPageIndex) => {\n      if (nextPageIndex < survey.pageOrder.length) {\n        setVisiblePageIds((prevPageIds) => {\n          const nextPageId = survey.pageOrder[nextPageIndex];\n          return [\n            ...prevPageIds.filter(\n              (prevPageId: string) => prevPageId !== nextPageId\n            ),\n            nextPageId,\n          ];\n        });\n      }\n    },\n    [survey.pageOrder]\n  );\n\n  const handleStart = useCallback(() => {\n    handleNextPage(0);\n  }, [handleNextPage]);\n\n  const handlePrevPage = useCallback(() => {\n    setVisiblePageIds((prevPageIds) => prevPageIds.slice(0, -1));\n  }, []);\n\n  const handleSubmit = useCallback(\n    (feedback) => {\n      if (preview) {\n        setEndScreenvisible(true);\n      } else {\n        const { timeZone } = NativeModules.DtSdk.getConstants();\n        setSurveyFeedback(feedback);\n        run({\n          ...feedback,\n          metadata,\n          createdTime: fromJSToAPIDateStr(Date.now()),\n          timeZone,\n        });\n      }\n    },\n    [metadata, preview, run]\n  );\n\n  const [isUploading, setIsUploading] = useState(false);\n  const handleUpload = async (file: ImageFormData) => {\n    if (file) {\n      setIsUploading(true);\n      try {\n        const { url } = await uploadPicture(file);\n        setIsUploading(false);\n        return url;\n      } catch (reason) {\n        setIsUploading(false);\n        return reason;\n      }\n    } else {\n      return undefined;\n    }\n  };\n\n  return (\n    <View style={styles.flexOne}>\n      <Header\n        title={survey.surveyName}\n        onClose={onClose}\n        themeColor={themeColor}\n      />\n      <View style={styles.flexOne}>\n        <ScreenWrapper\n          visible\n          isOnTop={!endScreenvisible && visiblePageIds.length === 0}\n          rtl={survey.language === 'ar'}\n        >\n          <StartScreen onStart={handleStart} onClose={onClose} />\n        </ScreenWrapper>\n        {survey.pageOrder.map((pageId: string, pageIndex: number) => {\n          return (\n            <ScreenWrapper\n              key={pageId}\n              visible={visiblePageIds.includes(pageId)}\n              isOnTop={visiblePageIds[visiblePageIds.length - 1] === pageId}\n              rtl={survey.language === 'ar'}\n            >\n              <SurveyScreenLayout\n                survey={survey}\n                pageIndex={pageIndex}\n                onClose={onClose}\n                onNextPage={handleNextPage}\n                onPrevPage={handlePrevPage}\n                onSubmit={handleSubmit}\n                onUpload={handleUpload}\n                isUploading={isUploading}\n                preview={preview}\n              />\n            </ScreenWrapper>\n          );\n        })}\n        <ScreenWrapper\n          visible={endScreenvisible}\n          isOnTop={endScreenvisible}\n          rtl={survey.language === 'ar'}\n        >\n          <EndScreen\n            error={error}\n            surveyFeedback={surveyFeedback}\n            onClose={onClose}\n          />\n        </ScreenWrapper>\n      </View>\n      <ActivityIndicatorMask loading={loading} />\n    </View>\n  );\n};\n\ntype SurveyStackProps = {\n  preview: boolean;\n};\n\nconst SurveyStack: React.FunctionComponent<SurveyStackProps> = ({\n  preview,\n}) => {\n  const { survey, onClose } = useSurveyContext();\n  // check if survey data is valid\n  if (\n    noData(survey.pages) ||\n    noData(survey.surveyProperty) ||\n    noData(survey.surveyStartDate) ||\n    noData(survey.surveyEndDate)\n  ) {\n    // need to render placeholder\n    return (\n      <ErrorHintScreen onClose={onClose}>\n        <PlaceholderScreen\n          imageType={PlaceholderImageTypes.ProgramUnavailable}\n          message={i18n.t('start-survey:placeholder-message')}\n        />\n      </ErrorHintScreen>\n    );\n  }\n  return <Stack preview={preview} />;\n};\n\nexport default SurveyStack;\n\nconst styles = StyleSheet.create({\n  flexOne: {\n    flex: 1,\n  },\n});\n"],"mappings":"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"}