{"version":3,"sources":["SurveyStack.tsx"],"names":["React","useCallback","useState","View","StyleSheet","NativeModules","isEmpty","isNil","PlaceholderImageTypes","PlaceholderScreen","i18n","SurveyScreenLayout","ActivityIndicatorMask","useAsync","useMetadata","StartScreen","EndScreen","FakeScreen","useSurveyContext","submitFeedback","ScreenWrapper","Header","fromJSToAPIDateStr","uploadPicture","noData","a","Stack","preview","survey","onClose","themeColor","surveyProperty","hexCode","visiblePageIds","setVisiblePageIds","endScreenvisible","setEndScreenvisible","surveyFeedback","setSurveyFeedback","undefined","error","setError","metadata","run","isPending","loading","deferFn","onResolve","onReject","rejectedError","handleNextPage","nextPageIndex","pageOrder","length","prevPageIds","nextPageId","filter","prevPageId","handleStart","handlePrevPage","slice","handleSubmit","feedback","timeZone","DtSdk","getConstants","createdTime","Date","now","isUploading","setIsUploading","handleUpload","file","url","reason","styles","flexOne","surveyName","map","pageId","pageIndex","includes","SurveyStack","pages","surveyStartDate","surveyEndDate","ProgramUnavailable","t","create","flex"],"mappings":"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","sourcesContent":["import React, { useCallback, useState } from 'react';\nimport { View, StyleSheet, NativeModules } from 'react-native';\nimport { isEmpty, isNil } from 'ramda';\nimport {\n  PlaceholderImageTypes,\n  PlaceholderScreen,\n  i18n,\n  SurveyScreenLayout,\n  ActivityIndicatorMask,\n} from '@dropthought/react-native-ui';\nimport { useAsync } from 'react-async';\nimport { useMetadata } from '../contexts/custom-props';\nimport StartScreen from '../screens/StartScreen';\nimport EndScreen from '../screens/EndScreen';\nimport FakeScreen from '../screens/FakeScreen';\nimport { useSurveyContext } from '../contexts/survey';\nimport { submitFeedback } from '../../lib/Feedback';\nimport ScreenWrapper from './ScreenWrapper';\nimport Header from './Header';\nimport { fromJSToAPIDateStr } from '../../lib/DateTimerParser';\nimport { uploadPicture } from '../../lib/UploadPicture';\nimport type { ImageFormData } from '../../lib/UploadFileAPI';\n\ntype StackProps = {\n  preview: boolean;\n};\n\nconst noData = (a: any) => isNil(a) || isEmpty(a);\n\nconst Stack: React.FunctionComponent<StackProps> = ({ preview }) => {\n  const { survey, onClose } = useSurveyContext();\n  const themeColor = survey.surveyProperty.hexCode;\n  const [visiblePageIds, setVisiblePageIds] = useState([]);\n  const [endScreenvisible, setEndScreenvisible] = useState(false);\n  const [surveyFeedback, setSurveyFeedback] = useState(undefined);\n  const [error, setError] = useState<Error | undefined>();\n  const metadata = useMetadata();\n  const { run, isPending: loading } = useAsync({\n    deferFn: submitFeedback,\n    onResolve: () => {\n      setEndScreenvisible(true);\n    },\n    onReject: (rejectedError) => {\n      setError(rejectedError);\n      setEndScreenvisible(true);\n    },\n  });\n\n  const handleNextPage = useCallback(\n    (nextPageIndex) => {\n      if (nextPageIndex < survey.pageOrder.length) {\n        setVisiblePageIds((prevPageIds) => {\n          const nextPageId = survey.pageOrder[nextPageIndex];\n          return [\n            ...prevPageIds.filter(\n              (prevPageId: string) => prevPageId !== nextPageId\n            ),\n            nextPageId,\n          ];\n        });\n      }\n    },\n    [survey.pageOrder]\n  );\n\n  const handleStart = useCallback(() => {\n    handleNextPage(0);\n  }, [handleNextPage]);\n\n  const handlePrevPage = useCallback(() => {\n    setVisiblePageIds((prevPageIds) => prevPageIds.slice(0, -1));\n  }, []);\n\n  const handleSubmit = useCallback(\n    (feedback) => {\n      if (preview) {\n        setEndScreenvisible(true);\n      } else {\n        const { timeZone } = NativeModules.DtSdk.getConstants();\n        setSurveyFeedback(feedback);\n        run({\n          ...feedback,\n          metadata,\n          createdTime: fromJSToAPIDateStr(Date.now()),\n          timeZone,\n        });\n      }\n    },\n    [metadata, preview, run]\n  );\n\n  const [isUploading, setIsUploading] = useState(false);\n  const handleUpload = async (file: ImageFormData) => {\n    if (file) {\n      setIsUploading(true);\n      try {\n        const { url } = await uploadPicture(file);\n        setIsUploading(false);\n        return url;\n      } catch (reason) {\n        setIsUploading(false);\n        return undefined;\n      }\n    } else {\n      return undefined;\n    }\n  };\n\n  return (\n    <View style={styles.flexOne}>\n      <Header\n        title={survey.surveyName}\n        onClose={onClose}\n        themeColor={themeColor}\n      />\n      <View style={styles.flexOne}>\n        <ScreenWrapper\n          visible\n          isOnTop={!endScreenvisible && visiblePageIds.length === 0}\n        >\n          <StartScreen onStart={handleStart} onClose={onClose} />\n        </ScreenWrapper>\n        {survey.pageOrder.map((pageId: string, pageIndex: number) => {\n          return (\n            <ScreenWrapper\n              key={pageId}\n              visible={visiblePageIds.includes(pageId)}\n              isOnTop={visiblePageIds[visiblePageIds.length - 1] === pageId}\n            >\n              <SurveyScreenLayout\n                survey={survey}\n                pageIndex={pageIndex}\n                onClose={onClose}\n                onNextPage={handleNextPage}\n                onPrevPage={handlePrevPage}\n                onSubmit={handleSubmit}\n                onUpload={handleUpload}\n                isUploading={isUploading}\n              />\n            </ScreenWrapper>\n          );\n        })}\n        <ScreenWrapper visible={endScreenvisible} isOnTop={endScreenvisible}>\n          <EndScreen\n            error={error}\n            surveyFeedback={surveyFeedback}\n            onClose={onClose}\n          />\n        </ScreenWrapper>\n      </View>\n      <ActivityIndicatorMask loading={loading} />\n    </View>\n  );\n};\n\ntype SurveyStackProps = {\n  preview: boolean;\n};\n\nconst SurveyStack: React.FunctionComponent<SurveyStackProps> = ({\n  preview,\n}) => {\n  const { survey, onClose } = useSurveyContext();\n  // check if survey data is valid\n  if (\n    noData(survey.pages) ||\n    noData(survey.surveyProperty) ||\n    noData(survey.surveyStartDate) ||\n    noData(survey.surveyEndDate)\n  ) {\n    // need to render placeholder\n    return (\n      <FakeScreen onClose={onClose}>\n        <PlaceholderScreen\n          imageType={PlaceholderImageTypes.ProgramUnavailable}\n          message={i18n.t('start-survey:placeholder-message')}\n        />\n      </FakeScreen>\n    );\n  }\n  return <Stack preview={preview} />;\n};\n\nexport default SurveyStack;\n\nconst styles = StyleSheet.create({\n  flexOne: {\n    flex: 1,\n  },\n});\n"]}